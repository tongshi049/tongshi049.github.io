<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tong Shi&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-11T18:31:48.438Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tong Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Thread - currentThread() methods</title>
    <link href="http://yoursite.com/2019/04/11/multithreading-currentThread/"/>
    <id>http://yoursite.com/2019/04/11/multithreading-currentThread/</id>
    <published>2019-04-11T18:19:37.000Z</published>
    <updated>2019-04-11T18:31:48.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="currentThread"><a href="#currentThread" class="headerlink" title="currentThread()"></a>currentThread()</h2><p>The <strong>java.lang.Thread.currentThread()</strong> method returns a reference to the currently executing thread object</p><p><strong>EXAMPLE</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreaTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Fight"</span>);</span><br><span class="line">System.out.println(<span class="string">"Current Thread is: "</span> + Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">attack();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"current main thread is: "</span> + Thread.currentThread().getName());</span><br><span class="line">t.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>OUTPUT</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">current main thread is: main</span><br><span class="line">Fight</span><br><span class="line">Current Thread is: Thread-<span class="number">0</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;currentThread&quot;&gt;&lt;a href=&quot;#currentThread&quot; class=&quot;headerlink&quot; title=&quot;currentThread()&quot;&gt;&lt;/a&gt;currentThread()&lt;/h2&gt;&lt;p&gt;The &lt;strong&gt;java.lang.
      
    
    </summary>
    
    
      <category term="Java Basic" scheme="http://yoursite.com/tags/Java-Basic/"/>
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java Thread II - Lifecycle and States</title>
    <link href="http://yoursite.com/2019/04/11/threadII/"/>
    <id>http://yoursite.com/2019/04/11/threadII/</id>
    <published>2019-04-11T17:50:45.000Z</published>
    <updated>2019-04-11T18:33:18.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lifecycle-and-States-of-a-Thread-in-Java-to-be-continued"><a href="#Lifecycle-and-States-of-a-Thread-in-Java-to-be-continued" class="headerlink" title="Lifecycle and States of a Thread in Java (to be continued)"></a>Lifecycle and States of a Thread in Java (to be continued)</h1><p><strong>States:</strong><br>1) New, 2) Runnable, 3) Blocked, 4) Waiting, 5) Timed Waiting, 6) Terminated</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lifecycle-and-States-of-a-Thread-in-Java-to-be-continued&quot;&gt;&lt;a href=&quot;#Lifecycle-and-States-of-a-Thread-in-Java-to-be-continued&quot; class=
      
    
    </summary>
    
    
      <category term="Java Basic" scheme="http://yoursite.com/tags/Java-Basic/"/>
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java Thread I - Creation</title>
    <link href="http://yoursite.com/2019/04/11/multithread/"/>
    <id>http://yoursite.com/2019/04/11/multithread/</id>
    <published>2019-04-11T16:00:37.000Z</published>
    <updated>2019-04-11T18:33:36.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Multithreading"><a href="#Multithreading" class="headerlink" title="Multithreading"></a>Multithreading</h1><p>Multithreading is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of CPU. Each part of such program is called a thread. So, threads are light-weight processes within a process.</p><p><strong>Threads can be created by using two mechanisms:</strong></p><ol><li>Extending the Thread class</li><li>Implementing the Runnable Interface**</li></ol><h2 id="Thread-cration-by-extending-the-Thread-class"><a href="#Thread-cration-by-extending-the-Thread-class" class="headerlink" title="Thread cration by extending the Thread class"></a>Thread cration by extending the Thread class</h2><ul><li>create a class that extends the <strong>java.lang.Thread</strong> class</li><li>override the run() method, a thread begins its life inside run() method.</li><li>call start() method to start the execution of a thread. Start() invokes the run() method on the Thread object</li></ul><p><strong>Example:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"Thread start: "</span> + <span class="keyword">this</span>.name + <span class="string">", i= "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread mt1 = <span class="keyword">new</span> MyThread(<span class="string">"thread1"</span>);</span><br><span class="line">        MyThread mt2 = <span class="keyword">new</span> MyThread(<span class="string">"thread2"</span>);</span><br><span class="line">        MyThread mt3 = <span class="keyword">new</span> MyThread(<span class="string">"thread3"</span>);</span><br><span class="line"></span><br><span class="line">        mt1.start();</span><br><span class="line">        mt2.start();</span><br><span class="line">        mt3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Thread-cration-by-implementing-the-Runnable-interface"><a href="#Thread-cration-by-implementing-the-Runnable-interface" class="headerlink" title="Thread cration by implementing the Runnable interface"></a>Thread cration by implementing the Runnable interface</h2><ul><li>create a new class which implements java.lang.Runnable interface</li><li>override run() method</li><li>construct an object of the new class</li><li>instantiate a Thread object from the Runaable: Thread t = new Thread(r)</li><li>call start() method on this object</li></ul><p><strong>Example:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRunnable</span> <span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"Thread start: "</span> + <span class="keyword">this</span>.name + <span class="string">", i= "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyRunnable mr1 = <span class="keyword">new</span> MyRunnable(<span class="string">"Runnable1"</span>);</span><br><span class="line">MyRunnable mr2 = <span class="keyword">new</span> MyRunnable(<span class="string">"Runnable2"</span>);</span><br><span class="line">MyRunnable mr3 = <span class="keyword">new</span> MyRunnable(<span class="string">"Runnable3"</span>);</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(mr1);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(mr2);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(mr3);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Supplymentary"><a href="#Supplymentary" class="headerlink" title="Supplymentary"></a>Supplymentary</h2><h3 id="java-lang-Thread"><a href="#java-lang-Thread" class="headerlink" title="java.lang.Thread"></a>java.lang.Thread</h3><ul><li>Thread(Runnable target)<br>constructs a new thread that calls the run() method of the specified target</li><li>void start()<br>starts this thread, causing the run() method to be called. This method will return immediately. The new thread runs concurrently.</li><li>void run()<br>calls the run method of the associated Runnable.</li></ul><h3 id="java-lang-Runnable"><a href="#java-lang-Runnable" class="headerlink" title="java.lang.Runnable"></a>java.lang.Runnable</h3><ul><li>void run()<br>must be overriden and supplied with instructions for the task that you want to have executed.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Multithreading&quot;&gt;&lt;a href=&quot;#Multithreading&quot; class=&quot;headerlink&quot; title=&quot;Multithreading&quot;&gt;&lt;/a&gt;Multithreading&lt;/h1&gt;&lt;p&gt;Multithreading is a Ja
      
    
    </summary>
    
    
      <category term="Java Basic" scheme="http://yoursite.com/tags/Java-Basic/"/>
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Valid Perfect Square</title>
    <link href="http://yoursite.com/2019/04/11/leetcodeQ367/"/>
    <id>http://yoursite.com/2019/04/11/leetcodeQ367/</id>
    <published>2019-04-11T15:49:10.000Z</published>
    <updated>2019-04-11T15:53:13.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-367-Valid-Perfect-Square"><a href="#LeetCode-Q-367-Valid-Perfect-Square" class="headerlink" title="LeetCode Q 367 - Valid Perfect Square"></a>LeetCode Q 367 - Valid Perfect Square</h1><p>Given a positive integer num, write a function which returns True if num is a perfect square else False.</p><p><strong>Note: Do not</strong> use any built-in library function such as sqrt.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">1</span>, right = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (num % mid == <span class="number">0</span> &amp;&amp; mid == num / mid)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mid &gt; num / mid)</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (mid + <span class="number">1</span> &gt; num / (mid + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-367-Valid-Perfect-Square&quot;&gt;&lt;a href=&quot;#LeetCode-Q-367-Valid-Perfect-Square&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 367 - Valid Perfect Square&quot;&gt;&lt;/a&gt;LeetCode Q 367 - Valid Perfect Square&lt;/h1&gt;&lt;p&gt;Given a positive integer num, write a function which returns True if num is a perfect square else False.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: Do not&lt;/strong&gt; use any built-in library function such as sqrt.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Integer Break</title>
    <link href="http://yoursite.com/2019/04/11/leetcodeQ343/"/>
    <id>http://yoursite.com/2019/04/11/leetcodeQ343/</id>
    <published>2019-04-11T15:40:21.000Z</published>
    <updated>2019-04-11T15:48:44.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-343-Integer-Break"><a href="#LeetCode-Q-343-Integer-Break" class="headerlink" title="LeetCode Q 343 - Integer Break"></a>LeetCode Q 343 - Integer Break</h1><p>Given a positive integer n, break it into the sum of <strong>at least</strong> two positive integers and maximize the product of those integers. Return the maximum product you can get.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>DP function:</strong><br><code>dp[n] = Max{Max(dp[i], i) * Max(dp[n - i], n - i)},  i &lt; n</code></p><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// dp[1] = 1; dp[2] = 1;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">dp[i] = Math.max(dp[i], Math.max(dp[i - j], i - j) * Math.max(dp[j], j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-343-Integer-Break&quot;&gt;&lt;a href=&quot;#LeetCode-Q-343-Integer-Break&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 343 - Integer Break&quot;&gt;&lt;/a&gt;LeetCode Q 343 - Integer Break&lt;/h1&gt;&lt;p&gt;Given a positive integer n, break it into the sum of &lt;strong&gt;at least&lt;/strong&gt; two positive integers and maximize the product of those integers. Return the maximum product you can get.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Bulb Switcher</title>
    <link href="http://yoursite.com/2019/04/11/leetcodeQ319/"/>
    <id>http://yoursite.com/2019/04/11/leetcodeQ319/</id>
    <published>2019-04-11T15:36:48.000Z</published>
    <updated>2019-04-11T15:40:03.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-319-Bulb-Switcher"><a href="#LeetCode-Q-319-Bulb-Switcher" class="headerlink" title="LeetCode Q 319 - Bulb Switcher"></a>LeetCode Q 319 - Bulb Switcher</h1><p>There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it’s off or turning off if it’s on). For the i-th round, you toggle every i bulb. For the n-th round, you only toggle the last bulb. Find how many bulbs are on after n rounds.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>A bulb ends up on iff it is <strong>switched an odd number of times</strong>.</p><p>Call them bulb 1 to bulb n. Bulb i is switched in round d if and only if d divides i. So bulb i ends up on if and only if it has an <strong>odd number of divisors</strong>.</p><p><strong>Divisors come in pairs</strong>, like i=12 has divisors 1 and 12, 2 and 6, and 3 and 4. Except when i is a square, like 36 has divisors 1 and 36, 2 and 18, 3 and 12, 4 and 9, and double divisor 6. <strong>So bulb i ends up on if and only if i is a square</strong>.</p><p>So just count the square numbers.</p><p>Let R = int(sqrt(n)). That’s the root of the largest square in the range [1,n]. And 1 is the smallest root. So you have the roots from 1 to R, that’s R roots. Which correspond to the R squares.</p><p><strong>Note:</strong>the return type of Math.sqrt is double, we need to cast it to int.</p><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bulbSwitch</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) Math.sqrt(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-319-Bulb-Switcher&quot;&gt;&lt;a href=&quot;#LeetCode-Q-319-Bulb-Switcher&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 319 - Bulb Switcher&quot;&gt;&lt;/a&gt;LeetCode Q 319 - Bulb Switcher&lt;/h1&gt;&lt;p&gt;There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it’s off or turning off if it’s on). For the i-th round, you toggle every i bulb. For the n-th round, you only toggle the last bulb. Find how many bulbs are on after n rounds.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Perfect Squares</title>
    <link href="http://yoursite.com/2019/04/11/leetcodeQ279/"/>
    <id>http://yoursite.com/2019/04/11/leetcodeQ279/</id>
    <published>2019-04-11T15:34:47.000Z</published>
    <updated>2019-04-11T15:35:20.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-279-Perfect-Squares"><a href="#LeetCode-Q-279-Perfect-Squares" class="headerlink" title="LeetCode Q 279 - Perfect Squares"></a>LeetCode Q 279 - Perfect Squares</h1><p>Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, …) which sum to n.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>DP function:</strong><br><code>dp[n] = Min{ dp[n - i*i] + 1 },  n - i*i &gt;=0 &amp;&amp; i &gt;= 1</code></p><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i * i &lt;= n; i++) </span><br><span class="line">dp[i * i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j * j &lt;= i; j++) &#123;</span><br><span class="line">dp[i] = Math.min(dp[i], dp[i - j * j] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-279-Perfect-Squares&quot;&gt;&lt;a href=&quot;#LeetCode-Q-279-Perfect-Squares&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 279 - Perfect Squares&quot;&gt;&lt;/a&gt;LeetCode Q 279 - Perfect Squares&lt;/h1&gt;&lt;p&gt;Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, …) which sum to n.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Super Ugly Number</title>
    <link href="http://yoursite.com/2019/04/11/leetcodeQ313/"/>
    <id>http://yoursite.com/2019/04/11/leetcodeQ313/</id>
    <published>2019-04-11T15:08:08.000Z</published>
    <updated>2019-04-11T15:22:28.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-313-Super-Ugly-Number"><a href="#LeetCode-Q-313-Super-Ugly-Number" class="headerlink" title="LeetCode Q 313 - Super Ugly Number"></a>LeetCode Q 313 - Super Ugly Number</h1><p>Write a program to find the nth super ugly number.</p><p>Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthSuperUglyNumber</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] primes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] times = <span class="keyword">new</span> <span class="keyword">int</span>[primes.length];</span><br><span class="line"><span class="keyword">int</span>[] uglys = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">uglys[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">uglys[i] = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; primes.length; j++) </span><br><span class="line">uglys[i] = Math.min(uglys[i], primes[j] * uglys[times[j]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; times.lnegth; j++)</span><br><span class="line"><span class="keyword">if</span> (uglys[times[j]] * primes[j] == uglys[i])</span><br><span class="line">times[j]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ugly[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Code: Heap + Set</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthSuperUglyNumber</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] primes)</span> </span>&#123;</span><br><span class="line">PriorityQueue&lt;Long&gt; que = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">Set&lt;Long&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">que.offer(<span class="number">1L</span>); set.add(<span class="number">1L</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">long</span> num = que.poll();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> prime: primes) &#123;</span><br><span class="line"><span class="keyword">if</span> (set.add(prime * num))</span><br><span class="line">que.offer(prime * num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> que.poll().intValue(); <span class="comment">// need to convert it into int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-313-Super-Ugly-Number&quot;&gt;&lt;a href=&quot;#LeetCode-Q-313-Super-Ugly-Number&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 313 - Super Ugly Number&quot;&gt;&lt;/a&gt;LeetCode Q 313 - Super Ugly Number&lt;/h1&gt;&lt;p&gt;Write a program to find the nth super ugly number.&lt;/p&gt;
&lt;p&gt;Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Ugly Number II</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ264/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ264/</id>
    <published>2019-04-10T16:23:40.000Z</published>
    <updated>2019-04-10T16:40:54.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-263-Ugly-Number-II"><a href="#LeetCode-Q-263-Ugly-Number-II" class="headerlink" title="LeetCode Q 263 - Ugly Number II"></a>LeetCode Q 263 - Ugly Number II</h1><p>Write a program to find the n-th ugly number.</p><p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code: Method 1</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">List&lt;Integer&gt; uglys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">uglys.add(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// p2, p3 &amp; p5 share the same queue: uglys</span></span><br><span class="line"><span class="keyword">int</span> p2 = <span class="number">0</span>, p3 = <span class="number">0</span>, p5 = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> lastNumber = uglys.get(i - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (uglys.get(p2) * <span class="number">2</span> &lt;= lastNumber) p2++;</span><br><span class="line"><span class="keyword">while</span> (uglys.get(p3) * <span class="number">3</span> &lt;= lastNumber) p3++;</span><br><span class="line"><span class="keyword">while</span> (uglys.get(p5) * <span class="number">5</span> &lt;= lastNumber) p5++;</span><br><span class="line">uglys.add(Math.min(Math.min(uglys.get(p2) * <span class="number">2</span>, uglys.get(p3) * <span class="number">3</span>), uglys.get(p5) * <span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uglys.get(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Code: Set + Heap</strong><br><strong>Note:</strong> Since num * 2, num2 = num * 3, num3 = num * 5 has a potential to cause integer overflow, we need to use Long to store the number.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); </span></span><br><span class="line">    Set&lt;Long&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    PriorityQueue&lt;Long&gt; que = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">    que.offer(<span class="number">1L</span>); set.add(<span class="number">1L</span>);</span><br><span class="line">    <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        num = que.poll();</span><br><span class="line">        <span class="keyword">long</span> num1 = num * <span class="number">2</span>, num2 = num * <span class="number">3</span>, num3 = num * <span class="number">5</span>; <span class="comment">// integer overflow</span></span><br><span class="line">        <span class="keyword">if</span> (set.add(num1)) que.offer(num1);</span><br><span class="line">        <span class="keyword">if</span> (set.add(num2)) que.offer(num2);</span><br><span class="line">        <span class="keyword">if</span> (set.add(num3)) que.offer(num3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-263-Ugly-Number-II&quot;&gt;&lt;a href=&quot;#LeetCode-Q-263-Ugly-Number-II&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 263 - Ugly Number II&quot;&gt;&lt;/a&gt;LeetCode Q 263 - Ugly Number II&lt;/h1&gt;&lt;p&gt;Write a program to find the n-th ugly number.&lt;/p&gt;
&lt;p&gt;Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>Ugly Number</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ263/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ263/</id>
    <published>2019-04-10T16:23:14.000Z</published>
    <updated>2019-04-10T16:28:38.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-263-Ugly-Number"><a href="#LeetCode-Q-263-Ugly-Number" class="headerlink" title="LeetCode Q 263 - Ugly Number"></a>LeetCode Q 263 - Ugly Number</h1><p>Write a program to check whether a given number is an ugly number.</p><p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code: Recursive approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span> || n == <span class="number">3</span> || n == <span class="number">5</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> isUgly(n / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">0</span>) <span class="keyword">return</span> isUgly(n / <span class="number">3</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">5</span> == <span class="number">0</span>) <span class="keyword">return</span> isUgly(n / <span class="number">5</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Code: Iterative approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (n &gt;= <span class="number">2</span> &amp;&amp; n % <span class="number">2</span> == <span class="number">0</span>) n /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (n &gt;= <span class="number">3</span> &amp;&amp; n % <span class="number">3</span> == <span class="number">0</span>) n /= <span class="number">3</span>; </span><br><span class="line"><span class="keyword">while</span> (n &gt;= <span class="number">5</span> &amp;&amp; n % <span class="number">5</span> == <span class="number">0</span>) n /= <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-263-Ugly-Number&quot;&gt;&lt;a href=&quot;#LeetCode-Q-263-Ugly-Number&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 263 - Ugly Number&quot;&gt;&lt;/a&gt;LeetCode Q 263 - Ugly Number&lt;/h1&gt;&lt;p&gt;Write a program to check whether a given number is an ugly number.&lt;/p&gt;
&lt;p&gt;Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Missing Number</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ268/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ268/</id>
    <published>2019-04-10T16:18:25.000Z</published>
    <updated>2019-04-10T16:22:57.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-268-Missing-Number"><a href="#LeetCode-Q-268-Missing-Number" class="headerlink" title="LeetCode Q 268 - Missing Number"></a>LeetCode Q 268 - Missing Number</h1><p>Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code: Recursive approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num: nums) sum += num;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">1</span> + nums.length) * num.length / <span class="number">2</span> - sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-268-Missing-Number&quot;&gt;&lt;a href=&quot;#LeetCode-Q-268-Missing-Number&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 268 - Missing Number&quot;&gt;&lt;/a&gt;LeetCode Q 268 - Missing Number&lt;/h1&gt;&lt;p&gt;Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Add Digits</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ258/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ258/</id>
    <published>2019-04-10T16:14:32.000Z</published>
    <updated>2019-04-10T16:17:48.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-258-Add-Digits"><a href="#LeetCode-Q-258-Add-Digits" class="headerlink" title="LeetCode Q 258 - Add Digits"></a>LeetCode Q 258 - Add Digits</h1><p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code: Recursive approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (num / <span class="number">10</span> == <span class="number">0</span>) <span class="keyword">return</span> num;</span><br><span class="line"><span class="keyword">int</span> newNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">newNum += num % <span class="number">10</span>;</span><br><span class="line">num /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> addDigits(newNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Code: Iterative approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (num &gt;= <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> newNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">newNum += num % <span class="number">10</span>;</span><br><span class="line">num /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num = newNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-258-Add-Digits&quot;&gt;&lt;a href=&quot;#LeetCode-Q-258-Add-Digits&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 258 - Add Digits&quot;&gt;&lt;/a&gt;LeetCode Q 258 - Add Digits&lt;/h1&gt;&lt;p&gt;Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Power of Two</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ231/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ231/</id>
    <published>2019-04-10T16:07:32.000Z</published>
    <updated>2019-04-10T16:14:12.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-231-Power-of-Two"><a href="#LeetCode-Q-231-Power-of-Two" class="headerlink" title="LeetCode Q 231 - Power of Two"></a>LeetCode Q 231 - Power of Two</h1><p>Given an integer, write a function to determine if it is a power of two.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code: Recursive approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">0</span> || n % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> isPowerOfTwo(n / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Code: Iterative approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span> (n % <span class="number">2</span> == <span class="number">0</span>) n /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-231-Power-of-Two&quot;&gt;&lt;a href=&quot;#LeetCode-Q-231-Power-of-Two&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 231 - Power of Two&quot;&gt;&lt;/a&gt;LeetCode Q 231 - Power of Two&lt;/h1&gt;&lt;p&gt;Given an integer, write a function to determine if it is a power of two.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Basic Calculator II</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ227/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ227/</id>
    <published>2019-04-10T15:58:59.000Z</published>
    <updated>2019-04-10T16:06:31.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-227-Basic-Calculator-II"><a href="#LeetCode-Q-227-Basic-Calculator-II" class="headerlink" title="LeetCode Q 227 - Basic Calculator II"></a>LeetCode Q 227 - Basic Calculator II</h1><p>Implement a basic calculator to evaluate a simple expression string.</p><p>The expression string contains only non-negative integers, +, -, *, / operators and empty spaces. The integer division should truncate toward zero.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>We use a stack to store numbers during calculation.</p><ul><li>When we meet a <strong>‘+’</strong> or <strong>‘-‘</strong>, we push <strong>num</strong> or <strong>-num</strong> into the stack, then update the sign and num;</li><li>When we meet a <strong>‘*‘</strong> or <strong>‘/‘</strong>, we <strong>multiply</strong> or <strong>divide the popped number from stacknum by num</strong>, then push the result into the stack, then update the sign and num.</li></ul><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.trim().length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>; <span class="keyword">char</span> sign = <span class="string">'+'</span>;</span><br><span class="line">    </span><br><span class="line">    s = s.trim();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">' '</span>) <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(s.charAt(i))) </span><br><span class="line">           num = <span class="number">10</span> * num + s.charAt(i) - <span class="string">'0'</span>; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( !Character.isDigit(s.charAt(i)) || i == s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sign == <span class="string">'+'</span>) stack.push(num);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">'-'</span>) stack.push(-num);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">'*'</span>) stack.push(stack.pop() * num);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">'/'</span>) stack.push(stack.pop() / num);</span><br><span class="line">            sign = s.charAt(i);</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : stack) res += i;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-227-Basic-Calculator-II&quot;&gt;&lt;a href=&quot;#LeetCode-Q-227-Basic-Calculator-II&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 227 - Basic Calculator II&quot;&gt;&lt;/a&gt;LeetCode Q 227 - Basic Calculator II&lt;/h1&gt;&lt;p&gt;Implement a basic calculator to evaluate a simple expression string.&lt;/p&gt;
&lt;p&gt;The expression string contains only non-negative integers, +, -, *, / operators and empty spaces. The integer division should truncate toward zero.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Basic Calculator</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ224/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ224/</id>
    <published>2019-04-10T15:51:50.000Z</published>
    <updated>2019-04-10T16:06:49.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-224-Basic-Calculator"><a href="#LeetCode-Q-224-Basic-Calculator" class="headerlink" title="LeetCode Q 224 - Basic Calculator"></a>LeetCode Q 224 - Basic Calculator</h1><p>Implement a basic calculator to evaluate a simple expression string.</p><p>The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The <strong>key point</strong> is how we deal with <strong>“( )”</strong>. </p><ul><li>Whenever we encounter a ‘(‘, we push the current number and sign into stack.</li><li>Whenever we encounter a ‘)’, we pop the sign and number in the stack and do the calculation.</li></ul><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, sign = <span class="number">1</span>, temp = <span class="number">0</span>;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">' '</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(s.charAt(i))) &#123;</span><br><span class="line">            temp = temp * <span class="number">10</span> + (s.charAt(i) - <span class="string">'0'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'+'</span>) &#123;</span><br><span class="line">            res += sign * temp; sign = <span class="number">1</span>; temp = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'-'</span>) &#123;</span><br><span class="line">            res += sign * temp; sign = -<span class="number">1</span>; temp = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">            stack.push(res); stack.push(sign);</span><br><span class="line">            res = <span class="number">0</span>; sign = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">')'</span>) &#123;</span><br><span class="line">            res += sign * temp; temp = <span class="number">0</span>;</span><br><span class="line">            res *= stack.pop(); res += stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (temp != <span class="number">0</span>)</span><br><span class="line">        res += sign * temp;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-224-Basic-Calculator&quot;&gt;&lt;a href=&quot;#LeetCode-Q-224-Basic-Calculator&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 224 - Basic Calculator&quot;&gt;&lt;/a&gt;LeetCode Q 224 - Basic Calculator&lt;/h1&gt;&lt;p&gt;Implement a basic calculator to evaluate a simple expression string.&lt;/p&gt;
&lt;p&gt;The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Excel Sheet Column Number</title>
    <link href="http://yoursite.com/2019/04/09/leetcode171/"/>
    <id>http://yoursite.com/2019/04/09/leetcode171/</id>
    <published>2019-04-09T16:03:26.000Z</published>
    <updated>2019-04-09T17:11:26.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-171-Excel-Sheet-Column-Number"><a href="#LeetCode-Q-171-Excel-Sheet-Column-Number" class="headerlink" title="LeetCode Q 171 - Excel Sheet Column Number"></a>LeetCode Q 171 - Excel Sheet Column Number</h1><p>Given a column title as appear in an Excel sheet, return its corresponding column number.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Algorithm</strong><br>Bases Convert</p><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">res = res * <span class="number">26</span> + (s.charAt(i) - <span class="string">'A'</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-171-Excel-Sheet-Column-Number&quot;&gt;&lt;a href=&quot;#LeetCode-Q-171-Excel-Sheet-Column-Number&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 171 - Excel Sheet Column Number&quot;&gt;&lt;/a&gt;LeetCode Q 171 - Excel Sheet Column Number&lt;/h1&gt;&lt;p&gt;Given a column title as appear in an Excel sheet, return its corresponding column number.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Excel Sheet Column Title</title>
    <link href="http://yoursite.com/2019/04/09/leetcode168/"/>
    <id>http://yoursite.com/2019/04/09/leetcode168/</id>
    <published>2019-04-09T16:00:22.000Z</published>
    <updated>2019-04-09T17:11:54.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-168-Excel-Sheet-Column-Title"><a href="#LeetCode-Q-168-Excel-Sheet-Column-Title" class="headerlink" title="LeetCode Q 168 - Excel Sheet Column Title"></a>LeetCode Q 168 - Excel Sheet Column Title</h1><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Algorithm</strong><br>Bases Convert</p><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">n--;</span><br><span class="line">sb.append((<span class="keyword">char</span>)(n % <span class="number">26</span> + <span class="string">'A'</span>));</span><br><span class="line">n /= <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-168-Excel-Sheet-Column-Title&quot;&gt;&lt;a href=&quot;#LeetCode-Q-168-Excel-Sheet-Column-Title&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 168 - Excel Sheet Column Title&quot;&gt;&lt;/a&gt;LeetCode Q 168 - Excel Sheet Column Title&lt;/h1&gt;&lt;p&gt;Given a positive integer, return its corresponding column title as appear in an Excel sheet.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Factorial Trailing Zeroes</title>
    <link href="http://yoursite.com/2019/04/09/leetcode172/"/>
    <id>http://yoursite.com/2019/04/09/leetcode172/</id>
    <published>2019-04-09T15:44:55.000Z</published>
    <updated>2019-04-09T17:12:00.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-172-Factorial-Trailing-Zeroes"><a href="#LeetCode-Q-172-Factorial-Trailing-Zeroes" class="headerlink" title="LeetCode Q 172 - Factorial Trailing Zeroes"></a>LeetCode Q 172 - Factorial Trailing Zeroes</h1><p>Given an integer n, return the number of trailing zeroes in n!.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Algorithm</strong><br>The number of tailing zeroes is related to the number of divisors 2 and 5. And 2 is smaller than 5, so this number is determined by the number of divisor 5.<br>Therefore, we calculate the number in 1 ~ n, which is multiplication of 5, 25, 125, 625,…</p><p><strong>Code: Method 1 (Not Correct)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt;= n) &#123;</span><br><span class="line">res += n / num;</span><br><span class="line">num *= <span class="number">5</span>;  <span class="comment">// this will cause integer overflow </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>Code: Method 2</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">res += n / <span class="number">5</span>;</span><br><span class="line">n /= <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-172-Factorial-Trailing-Zeroes&quot;&gt;&lt;a href=&quot;#LeetCode-Q-172-Factorial-Trailing-Zeroes&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 172 - Factorial Trailing Zeroes&quot;&gt;&lt;/a&gt;LeetCode Q 172 - Factorial Trailing Zeroes&lt;/h1&gt;&lt;p&gt;Given an integer n, return the number of trailing zeroes in n!.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Happy Number</title>
    <link href="http://yoursite.com/2019/04/09/leetcode202/"/>
    <id>http://yoursite.com/2019/04/09/leetcode202/</id>
    <published>2019-04-09T15:40:59.000Z</published>
    <updated>2019-04-09T17:12:05.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-202-Happy-Number"><a href="#LeetCode-Q-202-Happy-Number" class="headerlink" title="LeetCode Q 202 - Happy Number"></a>LeetCode Q 202 - Happy Number</h1><p>Write an algorithm to determine if a number is “happy”<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!set.add(n))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">n = getNextNumber(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getNextNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">res += (n % <span class="number">10</span>) ^ (n % <span class="number">10</span>);</span><br><span class="line">n /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-202-Happy-Number&quot;&gt;&lt;a href=&quot;#LeetCode-Q-202-Happy-Number&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 202 - Happy Number&quot;&gt;&lt;/a&gt;LeetCode Q 202 - Happy Number&lt;/h1&gt;&lt;p&gt;Write an algorithm to determine if a number is “happy”&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Count Primes</title>
    <link href="http://yoursite.com/2019/04/09/leetcode204/"/>
    <id>http://yoursite.com/2019/04/09/leetcode204/</id>
    <published>2019-04-09T15:38:37.000Z</published>
    <updated>2019-04-09T17:12:13.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-204-Count-Primes"><a href="#LeetCode-Q-204-Count-Primes" class="headerlink" title="LeetCode Q 204 - Count Primes"></a>LeetCode Q 204 - Count Primes</h1><p>Count the number of prime numbers less than a non-negative number, n.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span>[] notPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notPrime[i]) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">2</span>; num * i &lt; n; num++) </span><br><span class="line">                notPrime[num * i] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-204-Count-Primes&quot;&gt;&lt;a href=&quot;#LeetCode-Q-204-Count-Primes&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 204 - Count Primes&quot;&gt;&lt;/a&gt;LeetCode Q 204 - Count Primes&lt;/h1&gt;&lt;p&gt;Count the number of prime numbers less than a non-negative number, n.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
</feed>
