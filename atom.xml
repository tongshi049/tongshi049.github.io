<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tong Shi&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-18T17:10:46.506Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tong Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Concated Words</title>
    <link href="http://yoursite.com/2019/04/18/leetcodeQ472/"/>
    <id>http://yoursite.com/2019/04/18/leetcodeQ472/</id>
    <published>2019-04-18T16:44:21.000Z</published>
    <updated>2019-04-18T17:10:46.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-472-concated-words"><a class="markdownIt-Anchor" href="#leetcode-q-472-concated-words"></a> LeetCode Q 472 - Concated Words</h1><p>Given a list of words (<strong>without duplicates</strong>), please write a program that returns all concatenated words in the given list of words.<br>A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.<br>E.g. Input: [“cat”,“cats”,“catsdogcats”,“dog”,“dogcatsdog”,“hippopotamuses”,“rat”,“ratcatdogcat”]<br>Output: [“catsdogcats”,“dogcatsdog”,“ratcatdogcat”]</p><a id="more"></a><h2 id="solution-trie-backtracking"><a class="markdownIt-Anchor" href="#solution-trie-backtracking"></a> Solution : Trie + Backtracking</h2><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findAllConcatenatedWordsInADict</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (words == <span class="keyword">null</span> || words.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line"><span class="comment">// build the trie</span></span><br><span class="line"><span class="keyword">for</span> (String word: words) &#123;</span><br><span class="line"><span class="keyword">if</span> (word.length() == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">insert(word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// search for concatenated word</span></span><br><span class="line"><span class="keyword">for</span> (String word: words) &#123;</span><br><span class="line"><span class="keyword">if</span> (word.length() == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (isConcatenated(word, <span class="number">0</span>, <span class="number">0</span>)) res.add(word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">TrieNode[] parent;</span><br><span class="line"><span class="keyword">boolean</span> is End;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123; parent = <span class="keyword">new</span> TrieNode[<span class="number">26</span>]; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TrieNode root = <span class="keyword">new</span> TrieNode();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">TrieNode node = root;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> ch: word.toCharArray()) &#123;</span><br><span class="line"><span class="keyword">if</span> (node.children[ch - <span class="string">'a'</span>] == <span class="keyword">null</span>) </span><br><span class="line">node.children[ch - <span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">node = node.children[ch - <span class="string">'a'</span>];</span><br><span class="line">&#125;</span><br><span class="line">node.isEnd = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use backtracking the check if the current word is a concatenated word</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isConcatenated</span><span class="params">(String word, <span class="keyword">int</span> index, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Boundary case</span></span><br><span class="line"><span class="keyword">if</span> (index &gt;= word.length()) <span class="keyword">return</span> count &gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">TrieNode node = root;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; word.length(); i++) &#123;</span><br><span class="line"><span class="keyword">char</span> ch = word.charAt(i);</span><br><span class="line"><span class="keyword">if</span> (node.children[ch - <span class="string">'a'</span>] == <span class="keyword">null</span>) <span class="comment">// our constraints</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">node = node.children[ch - <span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">if</span> (node.isEnd) &#123;</span><br><span class="line"><span class="keyword">if</span> (isConcatenated(word, i + <span class="number">1</span>, count + <span class="number">1</span>)) <span class="comment">// explore</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-472-concated-words&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-472-concated-words&quot;&gt;&lt;/a&gt; LeetCode Q 472 - Concated Words&lt;/h1&gt;
&lt;p&gt;Given a list of words (&lt;strong&gt;without duplicates&lt;/strong&gt;), please write a program that returns all concatenated words in the given list of words.&lt;br&gt;
A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.&lt;br&gt;
E.g. Input: [“cat”,“cats”,“catsdogcats”,“dog”,“dogcatsdog”,“hippopotamuses”,“rat”,“ratcatdogcat”]&lt;br&gt;
Output: [“catsdogcats”,“dogcatsdog”,“ratcatdogcat”]&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
      <category term="Trie" scheme="http://yoursite.com/tags/Trie/"/>
    
  </entry>
  
  <entry>
    <title>Fraction to Recurring Decimal</title>
    <link href="http://yoursite.com/2019/04/18/leetcodeQ166/"/>
    <id>http://yoursite.com/2019/04/18/leetcodeQ166/</id>
    <published>2019-04-18T15:41:33.000Z</published>
    <updated>2019-04-18T16:02:15.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-166-fraction-to-recurring-decimal"><a class="markdownIt-Anchor" href="#leetcode-q-166-fraction-to-recurring-decimal"></a> LeetCode Q 166 - Fraction to Recurring Decimal</h1><p>Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.<br>If the fractional part is repeating, enclose the repeating part in parentheses.</p><p>For example, input: numerator = 1, denominator = 2; output: “0.5”<br>input: numerator = 2, denominator = -1; output: “-2”<br>input: numerator = 2, denominator = 3; output: “0.(6)”</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p><strong>Key point</strong> is  to consider all edge cases while thinking this problem through, including: <strong>negative integer, possible overflow, how to deal with repeated remainder</strong>.</p><p>Use HashMap to store a remainder and its associated index while doing the division so that whenever a same remainder comes up, we know there is a repeating fractional part.</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] KEYS = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fractionToDecimal</span><span class="params">(<span class="keyword">int</span> numerator, <span class="keyword">int</span> denominator)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (numerator == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line"><span class="comment">// deal with negative result</span></span><br><span class="line"><span class="keyword">if</span> ((numerator &gt; <span class="number">0</span>) ^ (denominator &gt; <span class="number">0</span>)) sb.append(<span class="string">"-"</span>);</span><br><span class="line"><span class="keyword">long</span> num = Math.abs((<span class="keyword">long</span>) numerator); <span class="comment">// when charing Integer.MIN_VALUE to positive number</span></span><br><span class="line"><span class="keyword">long</span> den = Math.abs((<span class="keyword">long</span>) denominator); <span class="comment">//if we still use int type, this will cause integer overflow.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// integer part:</span></span><br><span class="line">res.append(num / den);</span><br><span class="line">num %= den;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> res.toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// fractional part:</span></span><br><span class="line">res.append(<span class="string">"."</span>);</span><br><span class="line">Map&lt;Long, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Long, Integer&gt;();</span><br><span class="line">map.put(num, res.length());</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">num *= <span class="number">10</span>;</span><br><span class="line">res.append(num / den);</span><br><span class="line">num %= den;</span><br><span class="line"><span class="keyword">if</span> (map.containsKey(num)) &#123;</span><br><span class="line">res.insert(map.get(num), <span class="string">'('</span>);</span><br><span class="line">res.append(<span class="string">')'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">map.put(num, res.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-166-fraction-to-recurring-decimal&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-166-fraction-to-recurring-decimal&quot;&gt;&lt;/a&gt; LeetCode Q 166 - Fraction to Recurring Decimal&lt;/h1&gt;
&lt;p&gt;Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.&lt;br&gt;
If the fractional part is repeating, enclose the repeating part in parentheses.&lt;/p&gt;
&lt;p&gt;For example, input: numerator = 1, denominator = 2; output: “0.5”&lt;br&gt;
input: numerator = 2, denominator = -1; output: “-2”&lt;br&gt;
input: numerator = 2, denominator = 3; output: “0.(6)”&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Group Anagrams</title>
    <link href="http://yoursite.com/2019/04/18/leetcodeQ49/"/>
    <id>http://yoursite.com/2019/04/18/leetcodeQ49/</id>
    <published>2019-04-18T15:32:49.000Z</published>
    <updated>2019-04-18T15:41:08.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-49-group-anagrams"><a class="markdownIt-Anchor" href="#leetcode-q-49-group-anagrams"></a> LeetCode Q 49 - Group Anagrams</h1><p>Given an array of strings, group anagrams together.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p><strong>Key point is how to identify anagrams.</strong><br>We can use a prime number to represent each letter in alphabet.<br>Then use the multiplication of each letter to represent a word.</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] KEYS = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>&#125;;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String str: strs) &#123;</span><br><span class="line"><span class="keyword">int</span> number = getNumber(str);</span><br><span class="line">map.putIfAbsent(number, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">map.get(number).add(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num: map.keySet()) </span><br><span class="line">res.add(map.get(num));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (word == <span class="keyword">null</span> || word.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> ch: word.toCharArray())</span><br><span class="line">res \*= KEYS[ch - <span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-49-group-anagrams&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-49-group-anagrams&quot;&gt;&lt;/a&gt; LeetCode Q 49 - Group Anagrams&lt;/h1&gt;
&lt;p&gt;Given an array of strings, group anagrams together.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
  </entry>
  
  <entry>
    <title>Valid Sudoku</title>
    <link href="http://yoursite.com/2019/04/18/leetcodeQ36/"/>
    <id>http://yoursite.com/2019/04/18/leetcodeQ36/</id>
    <published>2019-04-18T15:23:55.000Z</published>
    <updated>2019-04-18T15:30:26.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-36-valid-sudoku"><a class="markdownIt-Anchor" href="#leetcode-q-36-valid-sudoku"></a> LeetCode Q 36 - Valid Sudoku</h1><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the <strong>following rules</strong>:</p><ul><li>Each of the digits 1-9 must occur exactly once in each row.</li><li>Each of the digits 1-9 must occur exactly once in each column.</li><li>Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.<br>Empty cells are indicated by the character ‘.’.</li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><h3 id="method-1-hashtable"><a class="markdownIt-Anchor" href="#method-1-hashtable"></a> Method 1: HashTable</h3><p>Use a HashSet to check if we have seen the char before.</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">Set&lt;Integer&gt;[] rows = <span class="keyword">new</span> HashSet[<span class="number">9</span>];</span><br><span class="line">Set&lt;Integer&gt;[] cols = <span class="keyword">new</span> HashSet[<span class="number">9</span>];</span><br><span class="line">Set&lt;Integer&gt;[] boxes = <span class="keyword">new</span> HashSet[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] != <span class="string">'.'</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> num = board[i][j] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span> (rows[i] == <span class="keyword">null</span>) rows[i] = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (!rows[i].add(num)) <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line"><span class="keyword">if</span> (cols[i] == <span class="keyword">null</span>) cols[i] = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (!cols[i].add(num)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> index = (i / <span class="number">3</span>) * <span class="number">3</span> + j / <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (boxes[i] == <span class="keyword">null</span>) boxes[i] = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (!boxes[i].add(num)) <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="method-2-hashtable-string"><a class="markdownIt-Anchor" href="#method-2-hashtable-string"></a> Method 2: HashTable + String</h3><p>Collect the set of things we see, encoded as strings. For example:</p><ul><li>‘4’ in row 7 is encoded as “(4)7”.</li><li>‘4’ in column 7 is encoded as “7(4)”.</li><li>‘4’ in the top-right block is encoded as “0(4)2”.<br>Scream false if we ever fail to add something because it was already added (i.e., seen before).</li></ul><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">Set&lt;String&gt; seen = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] != <span class="string">'.'</span>) &#123;</span><br><span class="line">String b = <span class="string">"("</span> + board[i][j] + <span class="string">")"</span>;</span><br><span class="line"><span class="keyword">if</span> (!seen.add(b + i) || !seen.add(j + b) || !seen.add(i/<span class="number">3</span> + b + j/<span class="number">3</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-36-valid-sudoku&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-36-valid-sudoku&quot;&gt;&lt;/a&gt; LeetCode Q 36 - Valid Sudoku&lt;/h1&gt;
&lt;p&gt;Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the &lt;strong&gt;following rules&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each of the digits 1-9 must occur exactly once in each row.&lt;/li&gt;
&lt;li&gt;Each of the digits 1-9 must occur exactly once in each column.&lt;/li&gt;
&lt;li&gt;Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.&lt;br&gt;
Empty cells are indicated by the character ‘.’.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
  </entry>
  
  <entry>
    <title>Soduku Solver</title>
    <link href="http://yoursite.com/2019/04/18/leetcodeQ37/"/>
    <id>http://yoursite.com/2019/04/18/leetcodeQ37/</id>
    <published>2019-04-18T14:56:24.000Z</published>
    <updated>2019-04-18T15:24:31.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-37-soduku-solver"><a class="markdownIt-Anchor" href="#leetcode-q-37-soduku-solver"></a> LeetCode Q 37 - Soduku Solver</h1><p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p><p>A sudoku solution must satisfy all of the <strong>following rules</strong>:</p><ul><li>Each of the digits 1-9 must occur exactly once in each row.</li><li>Each of the digits 1-9 must occur exactly once in each column.</li><li>Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.</li></ul><p>Empty cells are indicated by the character ‘.’.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><h3 id="method-backtracking"><a class="markdownIt-Anchor" href="#method-backtracking"></a> Method: Backtracking</h3><ol><li>Our Choice: place 1 - 9 in an empty cell.</li><li>Our Constraints: placement cann’t break rules.</li><li>Our Goal: fill the board.</li></ol><p><strong>This is a NP-complete problem.</strong></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">solve(board);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] != <span class="string">'.'</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">1</span>; num &lt;= <span class="number">9</span>; num++) &#123;</span><br><span class="line">board[i][j] = (<span class="keyword">char</span>) (num + <span class="string">'0'</span>); <span class="comment">// choose</span></span><br><span class="line"><span class="keyword">if</span> (isValid(board, i, j) &amp;&amp; solve(board)) <span class="comment">// explore</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">board[i][j]; <span class="comment">// unchose</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span> <span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">Set&lt;Character&gt; seen = HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][y] == <span class="string">'.'</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!seen.add(board[i][y])) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">seen = HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[x][i] == <span class="string">'.'</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!seen.add(board[x][i])) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">seen = HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> row = x / <span class="number">3</span>, col = y / <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = row * <span class="number">3</span>; i &lt; row * <span class="number">3</span> + <span class="number">3</span>; i++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = col * <span class="number">3</span>; j &lt; col * <span class="number">3</span> + <span class="number">3</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[x][i] == <span class="string">'.'</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!seen.add(board[x][i])) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-37-soduku-solver&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-37-soduku-solver&quot;&gt;&lt;/a&gt; LeetCode Q 37 - Soduku Solver&lt;/h1&gt;
&lt;p&gt;Write a program to solve a Sudoku puzzle by filling the empty cells.&lt;/p&gt;
&lt;p&gt;A sudoku solution must satisfy all of the &lt;strong&gt;following rules&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each of the digits 1-9 must occur exactly once in each row.&lt;/li&gt;
&lt;li&gt;Each of the digits 1-9 must occur exactly once in each column.&lt;/li&gt;
&lt;li&gt;Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Empty cells are indicated by the character ‘.’.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>Insert Delete GetRandom O(1)</title>
    <link href="http://yoursite.com/2019/04/17/leetcodeQ380/"/>
    <id>http://yoursite.com/2019/04/17/leetcodeQ380/</id>
    <published>2019-04-17T22:53:05.000Z</published>
    <updated>2019-04-18T16:33:38.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-380-insert-delete-getrandom-o1"><a class="markdownIt-Anchor" href="#leetcode-q-380-insert-delete-getrandom-o1"></a> LeetCode Q 380 - Insert Delete GetRandom O(1)</h1><p>Design a data structure that supports all following operations in <strong>average O(1)</strong> time.</p><ul><li>insert(val): Inserts an item val to the set if not already present.</li><li>remove(val): Removes an item val from the set if present.</li><li>getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.</li></ul><p>Follow up: allow duplicates</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><ol><li>First, we consider to use an <strong>array</strong> to store the inserted number, which costs O(1) time.</li><li>However, if we want to delete a number from an array, if we want to move the numbers behind this number this will costs nearly O(n) time. Then we consider to swap the last element in the array with the number we want to delete, which is O(1) operation. To realize this operation, we use a <strong>HashMap</strong> to store the number and corresponding index. So, this map will enable our operation to access each number in the array in O(1) time.</li><li>Since the numbers are all stored in a consecutive space in the array, from 0 to list.length() - 1, we can use Random.nextInt(list.size()) to get the index, the return the number in that index.</li></ol><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; map;</span><br><span class="line">List&lt;Integer&gt; list;</span><br><span class="line"><span class="comment">// Initialize your data structure here.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RandomizedSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">map = <span class="keyword">new</span> HashMap&lt;&gt;(); list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inserts a value to the set. Returns true if the set did not already contain the specified element. </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (map.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">map.put(val, list.length());</span><br><span class="line">list.add(val);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Removes a value from the set. Returns true if the set contained the specified element. </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!map.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> index = map.get(val);</span><br><span class="line">map.put(map.get(list.size() - <span class="number">1</span>), index);</span><br><span class="line">list.set(index, lsit.get(list.size() - <span class="number">1</span>))</span><br><span class="line">list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">map.remove(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table bgcolor="#ccf2ff"><td>&emsp;For the follow-up with duplicates allowed, I think we can use Map(Integer, List(Integer)). Insert would keep adding to the end of the list for duplicates and Remove would try to first remove the last element from the list in map.</td></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-380-insert-delete-getrandom-o1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-380-insert-delete-getrandom-o1&quot;&gt;&lt;/a&gt; LeetCode Q 380 - Insert Delete GetRandom O(1)&lt;/h1&gt;
&lt;p&gt;Design a data structure that supports all following operations in &lt;strong&gt;average O(1)&lt;/strong&gt; time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert(val): Inserts an item val to the set if not already present.&lt;/li&gt;
&lt;li&gt;remove(val): Removes an item val from the set if present.&lt;/li&gt;
&lt;li&gt;getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow up: allow duplicates&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Contiguous Array</title>
    <link href="http://yoursite.com/2019/04/17/leetcodeQ525/"/>
    <id>http://yoursite.com/2019/04/17/leetcodeQ525/</id>
    <published>2019-04-17T15:11:34.000Z</published>
    <updated>2019-04-17T15:56:33.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-525-contiguous-array"><a class="markdownIt-Anchor" href="#leetcode-q-525-contiguous-array"></a> LeetCode Q 525 - Contiguous Array</h1><p>Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p>Our solution will be explained with an example.<br><code>input array: [0, 1, 0, 0, 0, 1, 1, 1]</code><br>Use a variable <code>sum</code>. Traverse the array, when meet a 0, sum - 1; when meed a 1, sum + 1.<br>From the following image, we can find that if at any moment, the countcount becomes zero, it implies that we’ve encountered equal number of zeros and ones from the beginning till the current index of the array(ii). Not only this, another point to be noted is that if we encounter the same countcount twice while traversing the array, it means that the number of zeros and ones are equal between the indices corresponding to the equal countcount values.</p><img src="leetcodeQ525.png" width="50%" height="50%"><p>Therefore, we use a map to store that information. Say <strong>key</strong> is the sum val, <strong>value</strong> denotes the index. In every iteration, 1) update sum; 2) see if that sum is already a key of the map, if it is then update maxLen = Max(maxLen, i - map.get(sum)).</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxLength</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, maxLength = <span class="number">0</span>; map.put(<span class="number">0</span>, -<span class="number">1</span>); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] == <span class="number">0</span>)</span><br><span class="line">sum--;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (map.containsKey(sum))</span><br><span class="line">maxLength = Math.max(maxLength, i - map.get(sum));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">map.put(sum, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-525-contiguous-array&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-525-contiguous-array&quot;&gt;&lt;/a&gt; LeetCode Q 525 - Contiguous Array&lt;/h1&gt;
&lt;p&gt;Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
  </entry>
  
  <entry>
    <title>Two Sum</title>
    <link href="http://yoursite.com/2019/04/17/leetcodeQ1/"/>
    <id>http://yoursite.com/2019/04/17/leetcodeQ1/</id>
    <published>2019-04-17T15:05:56.000Z</published>
    <updated>2019-04-17T15:09:19.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1-two-sum"><a class="markdownIt-Anchor" href="#leetcode-q-1-two-sum"></a> LeetCode Q 1 - Two Sum</h1><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the same element twice.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (map.containsKey(target - nums[i]))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;map.get(target - nums[i]), i&#125;;</span><br><span class="line">map.put(nums[i], i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1-two-sum&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1-two-sum&quot;&gt;&lt;/a&gt; LeetCode Q 1 - Two Sum&lt;/h1&gt;
&lt;p&gt;Given an array of integers, return indices of the two numbers such that they add up to a specific target.&lt;/p&gt;
&lt;p&gt;You may assume that each input would have &lt;strong&gt;exactly&lt;/strong&gt; one solution, and you may not use the same element twice.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
  </entry>
  
  <entry>
    <title>4Sum II</title>
    <link href="http://yoursite.com/2019/04/17/leetcodeQ454/"/>
    <id>http://yoursite.com/2019/04/17/leetcodeQ454/</id>
    <published>2019-04-17T14:53:43.000Z</published>
    <updated>2019-04-17T15:10:13.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-454-4sum-ii"><a class="markdownIt-Anchor" href="#leetcode-q-454-4sum-ii"></a> LeetCode Q 454 - 4Sum II</h1><p>Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.</p><p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -2^28 to 2^28 - 1 and the result is guaranteed to be at most 2^31 - 1.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p>The solution is quite similar to <a href="/2019/04/17/leetcodeQ1/" title="Two Sum">Two Sum</a>.<br>We use a HashMap to store the possible sum of every pair in A and B.<br>Then we check if the sum of some pair in C and D equals to -key in the map.</p><p><strong>Time Complexity: O(n^2)</strong></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fourSumCount</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B, <span class="keyword">int</span>[] C, <span class="keyword">int</span>[] D)</span> </span>&#123;</span><br><span class="line">&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a: A) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b: B) &#123;</span><br><span class="line">map.put(a + b, map.getOrDefault(a + b, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c: C) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d: D) &#123;</span><br><span class="line"><span class="keyword">if</span> (map.containsKey(-c-d)) res += map.get(-c-d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-454-4sum-ii&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-454-4sum-ii&quot;&gt;&lt;/a&gt; LeetCode Q 454 - 4Sum II&lt;/h1&gt;
&lt;p&gt;Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.&lt;/p&gt;
&lt;p&gt;To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -2^28 to 2^28 - 1 and the result is guaranteed to be at most 2^31 - 1.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
  </entry>
  
  <entry>
    <title>4Sum</title>
    <link href="http://yoursite.com/2019/04/17/leetcodeQ18/"/>
    <id>http://yoursite.com/2019/04/17/leetcodeQ18/</id>
    <published>2019-04-17T14:40:41.000Z</published>
    <updated>2019-04-17T15:05:23.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-18-4sum"><a class="markdownIt-Anchor" href="#leetcode-q-18-4sum"></a> LeetCode Q 18 - 4Sum</h1><p>Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that <code>a + b + c + d = target?</code>Find all unique quadruplets in the array which gives the sum of target.</p><p>**Note:**The solution set must not contain duplicate quadruplets.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p>The key points are, 1) how we deal with duplicates, 2) how to make use of boundary case to make our code more effecient.</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> len = nums.length;</span><br><span class="line">Arrays.sort(nums);</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">4</span> || nums[<span class="number">0</span>] * <span class="number">4</span> &gt; target || nums[len - <span class="number">1</span>] * <span class="number">4</span> &lt; target)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] + nums[i + <span class="number">3</span>] &gt; target) <span class="keyword">break</span>; <span class="comment">// i is too large;</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] + nums[len - <span class="number">1</span>] + nums[len - <span class="number">2</span>] + nums[len - <span class="number">3</span>] &lt; target) <span class="keyword">continue</span>; <span class="comment">// i is too small;</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// skip duplicates</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length - <span class="number">2</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] + nums[j] + nums[j + <span class="number">1</span>] + nums[j + <span class="number">2</span>] &gt; target) <span class="keyword">break</span>; <span class="comment">// j is too large;</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] + nums[j] + nums[len - <span class="number">1</span>] + nums[len - <span class="number">2</span>] &lt; target) <span class="keyword">continue</span>; <span class="comment">// j is too small;</span></span><br><span class="line"><span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// skip duplicates</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> start = j + <span class="number">1</span>, end = len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line"><span class="keyword">int</span> sum = nums[i] + nums[j] + nums[start] + nums[end];</span><br><span class="line"><span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">res.add(Arrays.asList(nums[i], nums[j], nums[start], nums[end]));</span><br><span class="line"><span class="keyword">while</span> (start &lt; end &amp;&amp; nums[start] = nums[start+<span class="number">1</span>]) start++;</span><br><span class="line"><span class="keyword">while</span> (start &lt; end &amp;&amp; nums[end] = nums[end-<span class="number">1</span>]) end--;</span><br><span class="line">start++; end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) end--;</span><br><span class="line"><span class="keyword">else</span> start++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-18-4sum&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-18-4sum&quot;&gt;&lt;/a&gt; LeetCode Q 18 - 4Sum&lt;/h1&gt;
&lt;p&gt;Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that &lt;code&gt;a + b + c + d = target?&lt;/code&gt;Find all unique quadruplets in the array which gives the sum of target.&lt;/p&gt;
&lt;p&gt;**Note:**The solution set must not contain duplicate quadruplets.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Longest Substring Without Repeating Characters</title>
    <link href="http://yoursite.com/2019/04/17/leetcodeQ3/"/>
    <id>http://yoursite.com/2019/04/17/leetcodeQ3/</id>
    <published>2019-04-17T14:27:02.000Z</published>
    <updated>2019-04-17T14:40:05.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-3-longest-substring-without-repeating-characters"><a class="markdownIt-Anchor" href="#leetcode-q-3-longest-substring-without-repeating-characters"></a> LeetCode Q 3 - Longest Substring Without Repeating Characters</h1><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p>The solution is intuitional. Use two pointers applying sliding window algorithm and sweeping the whole string, then find the max length.</p><p>We can use a <strong>HashSet</strong> or an <strong>array</strong> to detect repeated character.</p><h3 id="method-1-use-a-hashset"><a class="markdownIt-Anchor" href="#method-1-use-a-hashset"></a> Method 1: Use a HashSet</h3><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>; r &lt; s.length(); ) &#123;</span><br><span class="line"><span class="keyword">if</span> (set.contains(s.charAt(r))) &#123;</span><br><span class="line">set.add(s.charAt(r++));</span><br><span class="line">maxLen = Math.max(maxLen, set.size());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">set.remove(s.charAt(l++));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Runtime: 9ms.</strong></p><h3 id="method-2-use-an-array"><a class="markdownIt-Anchor" href="#method-2-use-an-array"></a> Method 2: Use an array</h3><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>; r &lt; s.length(); r++) &#123;</span><br><span class="line">count[s.charAt(r)]++;</span><br><span class="line"><span class="keyword">while</span> (count[s.charAt(r)] &gt; <span class="number">1</span>)</span><br><span class="line">count[s.charAt(l++)]--;</span><br><span class="line">maxLen = Math.max(maxLen, r - l + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Runtime: 3ms.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-3-longest-substring-without-repeating-characters&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-3-longest-substring-without-repeating-characters&quot;&gt;&lt;/a&gt; LeetCode Q 3 - Longest Substring Without Repeating Characters&lt;/h1&gt;
&lt;p&gt;Given a string, find the length of the &lt;strong&gt;longest substring&lt;/strong&gt; without repeating characters.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="Sliding Window" scheme="http://yoursite.com/tags/Sliding-Window/"/>
    
  </entry>
  
  <entry>
    <title>Reflection in Java</title>
    <link href="http://yoursite.com/2019/04/16/reflection-in-java/"/>
    <id>http://yoursite.com/2019/04/16/reflection-in-java/</id>
    <published>2019-04-17T02:13:50.000Z</published>
    <updated>2019-04-17T02:14:50.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="reflection-in-java-to-be-continued"><a class="markdownIt-Anchor" href="#reflection-in-java-to-be-continued"></a> Reflection in Java (to be continued)</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;reflection-in-java-to-be-continued&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#reflection-in-java-to-be-continued&quot;&gt;&lt;/a&gt; Reflection in Java 
      
    
    </summary>
    
    
      <category term="Java Baisc" scheme="http://yoursite.com/tags/Java-Baisc/"/>
    
      <category term="Reflection" scheme="http://yoursite.com/tags/Reflection/"/>
    
  </entry>
  
  <entry>
    <title>synchronized Keyword in Java</title>
    <link href="http://yoursite.com/2019/04/16/synchronized-keyword-java/"/>
    <id>http://yoursite.com/2019/04/16/synchronized-keyword-java/</id>
    <published>2019-04-17T01:31:26.000Z</published>
    <updated>2019-04-17T02:11:09.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-introduction"><a class="markdownIt-Anchor" href="#1-introduction"></a> 1. Introduction</h2><p> The synchronized keyword is all about different threads reading and writing to the same variables, objects and resources. This is not a trivial topic in Java, but here is a quote from Sun:</p><blockquote style="text-align:justify;background-color: #ccfff5">&emsp;synchronized methods enable a simple strategy for preventing thread interference and memory consistency errors: if an object is visible to more than one thread, all reads or writes to that object's variables are done through synchronized methods.</blockquote><p> In a very, very small nutshell: When you have two threads that are reading and writing to the same ‘resource’.</p><a id="more"></a><h2 id="2-usage"><a class="markdownIt-Anchor" href="#2-usage"></a> 2. Usage</h2><p>The synchronized keyword can be used on different levels:</p><ul><li><strong>Instance methods</strong></li><li><strong>Static methods</strong></li><li><strong>Code blocks</strong></li></ul><p> When we use a synchronized block, internally Java uses a monitor also known as monitor lock or intrinsic lock, to provide synchronization. These monitors are bound to an object, thus all synchronized blocks of the same object can have only one thread executing them at the same time.</p><h3 id="21-synchronized-instantce-method"><a class="markdownIt-Anchor" href="#21-synchronized-instantce-method"></a> 2.1 synchronized instantce method</h3><p> Simply add the synchronized keyword in the method declaration to make the method synchronized:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronisedCalculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setSum(getSum() + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table bgcolor="#ccf2ff" "><td style="font-weight: bold;">&emsp;Instance methods are synchronized over the instance of the class owning the method. Which means only one thread per instance of the class can execute this method.</td></table><h3 id="22-synchronized-static-method"><a class="markdownIt-Anchor" href="#22-synchronized-static-method"></a> 2.2 synchronized static method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronisedCalculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setSum(getSum() + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table bgcolor="#ccf2ff" "><td style="font-weight: bold;">&emsp;These methods are synchronized on the Class object associated with the class and since only one Class object exists per JVM per class, only one thread can execute inside a static synchronized method per class, irrespective of the number of instances it has.</td></table><h3 id="23-synchronized-blocks-within-methods"><a class="markdownIt-Anchor" href="#23-synchronized-blocks-within-methods"></a> 2.3 synchronized blocks within methods</h3><p> Sometimes we do not want to synchronize the entire method but only some instructions within it. This can be achieved by applying synchronized to a block:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performSynchrinisedTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">setCount(getCount()+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table bgcolor="#ccf2ff" "><td style="font-weight: bold;">&emsp;Notice, that we passed a parameter this to the synchronized block. This is the monitor object, the code inside the block get synchronized on the monitor object. Simply put, only one thread per monitor object can execute inside that block of code.</td></table><p>In case the method is <em>static</em>, we would <strong>pass class name</strong> in place of the object reference. And the class would be a monitor for synchronization of the block:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">performStaticSyncTask</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (SynchronisedBlocks.class) &#123;</span><br><span class="line">setStaticCount(getStaticCount() + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-introduction&quot;&gt;&lt;/a&gt; 1. Introduction&lt;/h2&gt;
&lt;p&gt; The synchronized keyword is all about different threads reading and writing to the same variables, objects and resources. This is not a trivial topic in Java, but here is a quote from Sun:&lt;/p&gt;
&lt;blockquote style=&quot;text-align:justify;background-color: #ccfff5&quot;&gt;
&amp;emsp;synchronized methods enable a simple strategy for preventing thread interference and memory consistency errors: if an object is visible to more than one thread, all reads or writes to that object&#39;s variables are done through synchronized methods.
&lt;/blockquote&gt;
&lt;p&gt; In a very, very small nutshell: When you have two threads that are reading and writing to the same ‘resource’.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java Basic" scheme="http://yoursite.com/tags/Java-Basic/"/>
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java Thread - Commonly Used Methods - java.lang.Object Class</title>
    <link href="http://yoursite.com/2019/04/16/java-lang-object-method/"/>
    <id>http://yoursite.com/2019/04/16/java-lang-object-method/</id>
    <published>2019-04-17T00:21:17.000Z</published>
    <updated>2019-04-17T01:14:29.030Z</updated>
    
    <content type="html"><![CDATA[<p><font size="+1"><code>wait()</code> and <code>notify()</code> method is in java.lang.Object Class</font><br><strong><font color="#06bcf9">Why they are in java.lang.Object Class rather than in java.lang.Thread Class?</font></strong></p><table bgcolor="#ccf2ff" "><td>&emsp;The threads are the things accessing the data structure. The locks are on the data structure object in order to keep the threads from accessing the data structure in an unsafe way.<br>&emsp;In Java, we use lock objects as synchronization, mutex, and communication points between threads. We <span style="font-weight: bold;">synchronize on a lock object</span> to get mutex access to an important code block and to synchronize memory. We <span style="font-weight: bold;">wait on an object</span> if we are waiting for some condition to change – some resource to become available. We <span style="font-weight: bold;">notify on an object</span> if we want to awaken sleeping threads.</td></table><a id="more"></a><h2 id="1-nofity-javalangobject"><a class="markdownIt-Anchor" href="#1-nofity-javalangobject"></a> 1. nofity() – java.lang.Object</h2><p><strong><code>public final void notify()</code></strong><br> Wakes up a single thread that is waiting on this object’s monitor. If any threads are waiting on this object, one of them is chosen to be awakened. The choice is arbitrary and occurs at the discretion of the implementation. A thread waits on an object’s monitor by calling one of the wait methods.<br> The awakened thread will not be able to proceed until the current thread <strong>relinquishes the lock on this object</strong>. The awakened thread will compete in the usual manner with any other threads that might be actively competing to synchronize on this object; for example, the awakened thread <strong>enjoys no reliable privilege or disadvantage</strong> in being the next thread to lock this object.</p><p> This method should only <strong>be called by a thread that is the owner of this object’s monitor</strong>. A thread becomes the owner of the object’s monitor in one of three ways:</p><ul><li>By executing a synchronized instance method of that object.</li><li>By executing the body of a synchronized statement that synchronizes on the object.</li><li>For objects of type Class, by executing a synchronized static method of that class.<br>Only one thread at a time can own an object’s monitor.</li></ul><p><strong><font color="#06bcf9">Tips:</font></strong></p><table bgcolor="#ccf2ff" "><td><span style="font-weight: bold;">wait() <span style="font-weight: bold;">makes current thread release the lock.</span><br><span style="font-weight: bold;">notify()</span> signals other waiting thread(s) which then try to acquire the lock.</span></td></table><h2 id="2-nofityall-javalangobject"><a class="markdownIt-Anchor" href="#2-nofityall-javalangobject"></a> 2. nofityAll() – java.lang.Object</h2><p><strong><code>public final void notifyAll()</code></strong><br> Wakes up all threads that are waiting on this object’s monitor. A thread waits on an object’s monitor by calling one of the wait methods.</p><h2 id="3-wait-javalangobject"><a class="markdownIt-Anchor" href="#3-wait-javalangobject"></a> 3. wait() – java.lang.Object</h2><p><strong><code>public final void wait(long timeout) throws InterruptedException</code></strong><br> Causes the current thread to <strong>wait</strong> until either another thread invokes the <strong>notify() method or the notifyAll()</strong> method for this object, or <strong>a specified amount of time has elapsed</strong>.<br> <strong>The current thread must own this object’s monitor</strong>.</p><p> This method causes the current thread (call it T) to place itself in the <strong><font size="+1">wait set</font></strong> for this object and then to relinquish any and all synchronization claims on this object. Thread T becomes disabled for thread scheduling purposes and lies dormant until one of four things happens:</p><ul><li>Some other thread invokes the notify method for this object and thread T happens to be arbitrarily chosen as the thread to be awakened.</li><li>Some other thread invokes the notifyAll method for this object.<br>Some other thread interrupts thread T.</li><li>The specified amount of real time has elapsed, more or less. If timeout is zero, however, then real time is not taken into consideration and the thread simply waits until notified.</li><li>The thread T is then removed from the wait set for this object and re-enabled for thread scheduling. It then competes in the usual manner with other threads for the right to synchronize on the object; once it has gained control of the object, all its synchronization claims on the object are restored to the status quo ante - that is, to the situation as of the time that the wait method was invoked. Thread T then returns from the invocation of the wait method. Thus, on return from the wait method, the synchronization state of the object and of thread T is exactly as it was when the wait method was invoked.</li></ul><p> If the current thread is interrupted by any thread before or while it is waiting, then an <strong>InterruptedException</strong> is thrown. This exception is not thrown until the lock status of this object has been restored as described above.</p><p><font color="tomato" size="+1">Note that the wait method, as it places the current thread into the wait set for this object, unlocks only this object; any other objects on which the current thread may be synchronized remain locked while the thread waits.<br>This method should only be called by a thread that is the owner of this object’s monitor.</font></p><p><strong><font color="#06bcf9">For example:</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// locks should be final objects so the object we are synchronizing on never changes</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">...</span><br><span class="line"><span class="comment">// ensure that the thread has a mutex lock on some key code</span></span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// i need to wait for other threads to finish with some resource</span></span><br><span class="line"><span class="comment">// this releases the lock and waits on the associated monitor</span></span><br><span class="line">lock.wait();</span><br><span class="line">...</span><br><span class="line"><span class="comment">// i need to signal another thread that some state has changed and they can awake and continue to run </span></span><br><span class="line">lock.notify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font size=&quot;+1&quot;&gt;&lt;code&gt;wait()&lt;/code&gt; and &lt;code&gt;notify()&lt;/code&gt; method is in java.lang.Object Class&lt;/font&gt;&lt;br&gt;
&lt;strong&gt;&lt;font color=&quot;#06bcf9&quot;&gt;Why they are in java.lang.Object Class rather than in java.lang.Thread Class?&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;table bgcolor=&quot;#ccf2ff&quot; &quot;&gt;
	&lt;td&gt;
	&amp;emsp;The threads are the things accessing the data structure. The locks are on the data structure object in order to keep the threads from accessing the data structure in an unsafe way.&lt;br&gt;
	&amp;emsp;In Java, we use lock objects as synchronization, mutex, and communication points between threads. We &lt;span style=&quot;font-weight: bold;&quot;&gt;synchronize on a lock object&lt;/span&gt; to get mutex access to an important code block and to synchronize memory. We &lt;span style=&quot;font-weight: bold;&quot;&gt;wait on an object&lt;/span&gt; if we are waiting for some condition to change – some resource to become available. We &lt;span style=&quot;font-weight: bold;&quot;&gt;notify on an object&lt;/span&gt; if we want to awaken sleeping threads.
	&lt;/td&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="Java Basic" scheme="http://yoursite.com/tags/Java-Basic/"/>
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Find Right Interval</title>
    <link href="http://yoursite.com/2019/04/16/leetcodeQ436/"/>
    <id>http://yoursite.com/2019/04/16/leetcodeQ436/</id>
    <published>2019-04-16T18:03:52.000Z</published>
    <updated>2019-04-16T18:24:12.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-436-find-right-interval"><a class="markdownIt-Anchor" href="#leetcode-q-436-find-right-interval"></a> LeetCode Q 436 - Find Right Interval</h1><p>Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the “right” of i.<br>For any interval i, you need to store the minimum interval j’s index, which means that the interval j has the minimum start point to build the “right” relationship for interval i. If the interval j doesn’t exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> Comparator&lt;<span class="keyword">int</span>[]&gt; comparator = <span class="keyword">new</span> Comparatro&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">1</span>] != b[<span class="number">1</span>]) <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>]; <span class="comment">// order the pos in ascending order</span></span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">2</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// start point comes first</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] findRightInterval(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line"><span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[intervals.length];</span><br><span class="line">List&lt;<span class="keyword">int</span>[]&gt; points = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// we store the left point and right point of the interval seperately, and use an array to wrap it.</span></span><br><span class="line"><span class="comment">// int[0]: index; int[1]: left / right pos; int[2]: an indecator, 1 - left point, -1 - right point.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">points.add(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;i, intervals[i][<span class="number">0</span>], <span class="number">1</span>&#125;); <span class="comment">// left point</span></span><br><span class="line">points.add(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;i, intervals[i][<span class="number">0</span>], <span class="number">1</span>&#125;); <span class="comment">// right point</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Collections.sort(points, comparator);</span><br><span class="line"></span><br><span class="line">Queue&lt;<span class="keyword">int</span>[]&gt; pq = PriorityQueue&lt;&gt;(comparator);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = points.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">int</span>[] point = points.get(i);</span><br><span class="line"><span class="keyword">if</span> (point[<span class="number">2</span>] == <span class="number">1</span>) &#123;<span class="comment">// it's a left point</span></span><br><span class="line">pq.offer(point);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pq.size() == <span class="number">0</span>) <span class="comment">// no right point</span></span><br><span class="line">res[point[<span class="number">0</span>]] = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// find the smallest right point</span></span><br><span class="line">res[point[<span class="number">0</span>]] = pq.peek()[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-436-find-right-interval&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-436-find-right-interval&quot;&gt;&lt;/a&gt; LeetCode Q 436 - Find Right Interval&lt;/h1&gt;
&lt;p&gt;Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the “right” of i.&lt;br&gt;
For any interval i, you need to store the minimum interval j’s index, which means that the interval j has the minimum start point to build the “right” relationship for interval i. If the interval j doesn’t exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Sweep Line" scheme="http://yoursite.com/tags/Sweep-Line/"/>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>The Skyline Problem</title>
    <link href="http://yoursite.com/2019/04/16/leetcodeQ218/"/>
    <id>http://yoursite.com/2019/04/16/leetcodeQ218/</id>
    <published>2019-04-16T17:31:46.000Z</published>
    <updated>2019-04-16T18:09:35.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-218-the-skyline-problem"><a class="markdownIt-Anchor" href="#leetcode-q-218-the-skyline-problem"></a> LeetCode Q 218 - The Skyline Problem</h1><p>A city’s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are given the locations and height of all the buildings as shown on a cityscape photo (Figure A), write a program to output the skyline formed by these buildings collectively (Figure B).</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><ul><li>When you reach a start point, the height of current building immediately takes effect which means it could possibly affect the contour or shadow others when mixed with other following buildings;</li><li>When you reach a end point, the height of current building will stop its influences;</li></ul><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">int</span>[]&gt; getSkyline(<span class="keyword">int</span>[][] buildings) &#123;</span><br><span class="line">List&lt;<span class="keyword">int</span>[]&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;<span class="keyword">int</span>[]&gt; heights = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// we store the left and right heights seperately!</span></span><br><span class="line"><span class="comment">// in the heights, the int[] has size 2. </span></span><br><span class="line"><span class="comment">// int[0]: l / r position; int[1]: height</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] building: buildings) &#123;</span><br><span class="line">heights.add(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;building[<span class="number">0</span>], -building[<span class="number">2</span>]&#125;); <span class="comment">// neg value indicates it's left point;</span></span><br><span class="line">heights.add(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;building[<span class="number">1</span>], building[<span class="number">2</span>]&#125;); <span class="comment">// pos value indicates it's right point;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort the list in ascending order</span></span><br><span class="line"><span class="comment">// for example [2, 9, 10], [2, 9, 15], we want [2, -15], [2, -10], [9, 10], [9, 15];</span></span><br><span class="line">Collections.sort(heights, (a, b) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">0</span>] != b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// pq is used to store the height value, we want the larger one comes first.</span></span><br><span class="line">Queue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a,b) -&gt; (b - a));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prev = <span class="number">0</span>; pq.offer(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] arr: heights) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[<span class="number">1</span>] &lt; <span class="number">0</span>) <span class="comment">// indicates a left point, we offer the height value into the queue</span></span><br><span class="line">pq.offer(-arr[<span class="number">1</span>]); <span class="comment">// since we want it to impact others</span></span><br><span class="line"><span class="keyword">if</span> (arr[<span class="number">1</span>] &gt; <span class="number">0</span>) <span class="comment">// indicates a right point, remove the height value from the queue</span></span><br><span class="line">pq.remove(arr[<span class="number">1</span>]); <span class="comment">// since we want that height value to stop its influence</span></span><br><span class="line"><span class="keyword">int</span> curr = pq.peek();</span><br><span class="line"><span class="keyword">if</span> (curr != prev) &#123;</span><br><span class="line">res.add(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;arr[<span class="number">0</span>], curr&#125;);</span><br><span class="line">prev = curr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-218-the-skyline-problem&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-218-the-skyline-problem&quot;&gt;&lt;/a&gt; LeetCode Q 218 - The Skyline Problem&lt;/h1&gt;
&lt;p&gt;A city’s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are given the locations and height of all the buildings as shown on a cityscape photo (Figure A), write a program to output the skyline formed by these buildings collectively (Figure B).&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Sweep Line" scheme="http://yoursite.com/tags/Sweep-Line/"/>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>Is Subsequence</title>
    <link href="http://yoursite.com/2019/04/16/leetcodeQ392/"/>
    <id>http://yoursite.com/2019/04/16/leetcodeQ392/</id>
    <published>2019-04-16T17:10:15.000Z</published>
    <updated>2019-04-18T15:58:16.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-392-is-subsequence"><a class="markdownIt-Anchor" href="#leetcode-q-392-is-subsequence"></a> LeetCode Q 392 - Is Subsequence</h1><p>Given a string s and a string t, check if s is subsequence of t.<br>You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length is about  500,000) string, and s is a short string (&lt;=100).<br><strong>Follow up:</strong><br>If there are lots of incoming S, say S1, S2, … , Sk where k &gt;= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><h3 id="1-solution-1"><a class="markdownIt-Anchor" href="#1-solution-1"></a> 1. Solution 1</h3><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (s.length() &gt; t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; s.length() &amp;&amp; j &lt; t.length()) &#123;</span><br><span class="line"><span class="keyword">if</span> (s.charAt(i) == t.charAt(j)) i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i == s.length();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (s.length() &gt; t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> index = t.indexOf(s.charAt(i));</span><br><span class="line"><span class="keyword">if</span> (index == -<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">t = t.substring(index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-solution-of-follow-up-question"><a class="markdownIt-Anchor" href="#2-solution-of-follow-up-question"></a> 2. Solution of Follow Up Question</h3><table bgcolor="#ccf2ff" "><td>&emsp;If we check each s in this way, then it would be O(kn) time where k is the number of s and n is the length of t. This is inefficient. <br> &emsp;Since there is a lot of s, it would be reasonable to preprocess t to generate something that is easy to search for if a character of s is in t. Sounds like a HashMap, which is super suitable for search for existing stuff. </td></table><ol><li><p>Build a map, key is the char in String t, value is a list contianing the index of the char in t.</p></li><li><p>Use binary search to find if each char in String s exists in t.</p></li></ol><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">Map&lt;Character, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">map.putIfAbsent(t.charAt(i), <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">map.get(t.charAt(i)).add(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> prev = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray()) &#123;</span><br><span class="line">prev = binarySearch(map, ch, prev);</span><br><span class="line"><span class="keyword">if</span> (index == -<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">prev++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(Map&lt;Character, List&lt;Integer&gt;&gt; map, <span class="keyword">char</span> ch, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!map.containsKey(ch)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">List&lt;Integer&gt; list = map.get(ch);</span><br><span class="line"><span class="keyword">int</span> lo = <span class="number">0</span>, hi = list.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (list.get(mid) &lt; index)</span><br><span class="line">lo = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">hi = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lo == list.size() ? -<span class="number">1</span> : list.get(lo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-392-is-subsequence&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-392-is-subsequence&quot;&gt;&lt;/a&gt; LeetCode Q 392 - Is Subsequence&lt;/h1&gt;
&lt;p&gt;Given a string s and a string t, check if s is subsequence of t.&lt;br&gt;
You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length is about  500,000) string, and s is a short string (&amp;lt;=100).&lt;br&gt;
&lt;strong&gt;Follow up:&lt;/strong&gt;&lt;br&gt;
If there are lots of incoming S, say S1, S2, … , Sk where k &amp;gt;= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Kth Smallest Element in a Sorted Matrix</title>
    <link href="http://yoursite.com/2019/04/16/leetcodeQ378/"/>
    <id>http://yoursite.com/2019/04/16/leetcodeQ378/</id>
    <published>2019-04-16T16:13:03.000Z</published>
    <updated>2019-04-16T17:09:30.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-378-kth-smallest-element-in-a-sorted-matrix"><a class="markdownIt-Anchor" href="#leetcode-q-378-kth-smallest-element-in-a-sorted-matrix"></a> LeetCode Q 378 - Kth Smallest Element in a Sorted Matrix</h1><p>Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.<br><strong>Note</strong> that it is the kth smallest element in the sorted order, not the kth distinct element.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><h3 id="solution-1-heap"><a class="markdownIt-Anchor" href="#solution-1-heap"></a> Solution 1: Heap</h3><ol><li>we offer the numbers in the first row to the que.</li><li>we do the following k - 1 times: Poll a number and offer the number below it to the que if it has.</li><li>the value of the first item in the queue is the answer</li></ol><p><strong><font color="#06bcf9">Time Complexity: O(klogn)</font></strong><br><strong><font color="#06bcf9">Space Complexity: O(n)</font></strong><br><strong>k</strong>: how many times we do the loop.   <strong>n</strong>: matrix row no.</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="comment">// int[] arr = &#123;val, row, col&#125;;</span></span><br><span class="line">Queue&lt;\<span class="keyword">int</span>[]&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a,b) -&gt; (a[<span class="number">0</span>] - b[<span class="number">0</span>]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix[<span class="number">0</span>].length; i++) </span><br><span class="line">pq.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;matrix[<span class="number">0</span>]\[i], <span class="number">0</span>, i&#125;);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (k != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span>[] temp = pq.poll();</span><br><span class="line"><span class="keyword">if</span> (temp[<span class="number">1</span>] + <span class="number">1</span> &lt; matrix.length)</span><br><span class="line">pq.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;matrix[temp[<span class="number">1</span>] + <span class="number">1</span>][temp[<span class="number">2</span>]], temp[<span class="number">1</span>] + <span class="number">1</span>, temp[<span class="number">2</span>]&#125;);</span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> pq.peek()[<span class="number">0</span>]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="solution-2-binary-search"><a class="markdownIt-Anchor" href="#solution-2-binary-search"></a> Solution 2: Binary Search</h3><ol><li>choose matrix[0][0] as left and matrix[n-1][n-1] as right, and get the mid.</li><li>count the number of numbers less or equal to mid.</li></ol><ul><li><code>if (number &lt; k)</code>: this mid is smaller than the target, so we let <code>left = mid + 1</code>;</li><li><code>if (number &gt; k)</code>: this mid is larget than the target, so we let <code>right = mid - 1</code>;</li><li><strong><code>if (number == k)</code></strong>: there exists two cases. 1) this mid may be the target 2) this mid is not in the matrix and larger than the target<br><strong>Then we keep shrinking the range, let <code>right = mid - 1</code>, this guarantees left is the kthSmallest</strong></li></ul><p><strong><font color="#06bcf9">Time Complexity: O(logRange*nlogn)</font></strong><br>Every time we call the count method, it costs <strong>O(nlogn)</strong> time.<br>The maximum range is Integer.MAX_VALUE - Integer.MIN_VALUE = 2^23 - 1. So logRange is no more than 32, which can be regarded as a constant.<br>So the <strong>time complexity if O(nlogn)</strong>.<br><strong><font color="#06bcf9">Space Complexity: O(1)</font></strong><br><strong>k</strong>: how many times we do the loop.   <strong>n</strong>: matrix row no.</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = matrix.length, left = matrix[<span class="number">0</span>]\[<span class="number">0</span>], right = matrix[n-<span class="number">1</span>]\[n-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> count = countLessEqual(matrix, mid, n);</span><br><span class="line"><span class="keyword">if</span> (count &lt; k)</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// mid &gt;= k</span></span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">countLessEqual</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] numbers: matris) &#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (numbers[mid] &gt; target) right = mid - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">res += left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="solution-3-optimized-solution-based-on-solution-2"><a class="markdownIt-Anchor" href="#solution-3-optimized-solution-based-on-solution-2"></a> Solution 3: Optimized Solution based on Solution 2</h3><p>We <strong>optimize</strong> the countLessEqual Method. This method is similar to <a href="/2019/04/14/leetcodeQ240/" title="Search a 2D Matrix II">Search a 2D Matrix II</a>.</p><p><strong><font color="#06bcf9">Time Complexity: O(n)</font></strong><br><strong><font color="#06bcf9">Space Complexity: O(1)</font></strong><br><strong>k</strong>: how many times we do the loop.   <strong>n</strong>: matrix row no.</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = matrix.length, left = matrix[<span class="number">0</span>]\[<span class="number">0</span>], right = matrix[n-<span class="number">1</span>]\[n-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> count = countLessEqual(matrix, mid, n);</span><br><span class="line"><span class="keyword">if</span> (count &lt; k)</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// mid &gt;= k</span></span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">countLessEqual</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> row = <span class="number">0</span>, col = n - <span class="number">1</span>;</span><br><span class="line">whiel (left &lt; n &amp;&amp; col &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (matrix[row]\[col] &lt;= target) &#123;</span><br><span class="line">res += col + <span class="number">1</span>; row++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">col--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="#06bcf9">Comparison of time complexities of Solution 1 and Solution3:</font></strong></p><table bgcolor="#ccf2ff" "><tr style="font-weight: bold;"><th>k</th><th>O(1)</th><th>O(n)</th><th>O(n^2)</th></tr><tr><td style="font-weight: bold;">Solution 1:</td><td>logn</td><td>nlogn</td><td>n^2*logn</td></tr><tr><td style="font-weight: bold;">Solution 3:</td><td>n</td><td>n</td><td>n</td></tr></table><p><strong><font color="tomato">When k is constant, Solution 1 is better. Otherwise Solution 2 is better.</font></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-378-kth-smallest-element-in-a-sorted-matrix&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-378-kth-smallest-element-in-a-sorted-matrix&quot;&gt;&lt;/a&gt; LeetCode Q 378 - Kth Smallest Element in a Sorted Matrix&lt;/h1&gt;
&lt;p&gt;Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt; that it is the kth smallest element in the sorted order, not the kth distinct element.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>Guess Number Higher or Lower</title>
    <link href="http://yoursite.com/2019/04/16/leetcodeQ374/"/>
    <id>http://yoursite.com/2019/04/16/leetcodeQ374/</id>
    <published>2019-04-16T16:01:31.000Z</published>
    <updated>2019-04-16T16:12:23.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-374-guess-number-higher-or-lower"><a class="markdownIt-Anchor" href="#leetcode-q-374-guess-number-higher-or-lower"></a> LeetCode Q 374 - Guess Number Higher or Lower</h1><p>We are playing the Guess Game. The game is as follows:<br>I pick a number from 1 to n. You have to guess which number I picked.<br>Every time you guess wrong, I’ll tell you whether the number is higher or lower.<br>You call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):<br><code>-1 : My number is lower 1 : My number is higher 0 : Congrats! You got it!</code></p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The guess API is defined in the parent class GuessGame.</span></span><br><span class="line"><span class="comment">@param num, your guess</span></span><br><span class="line"><span class="comment">@return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span></span><br><span class="line"><span class="comment">int guess(int num); \*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">guessNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">1</span>, right = n;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (guess(mid) == <span class="number">0</span>) <span class="keyword">return</span> mid;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (guess(mid) == -<span class="number">1</span>) right = mid - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-374-guess-number-higher-or-lower&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-374-guess-number-higher-or-lower&quot;&gt;&lt;/a&gt; LeetCode Q 374 - Guess Number Higher or Lower&lt;/h1&gt;
&lt;p&gt;We are playing the Guess Game. The game is as follows:&lt;br&gt;
I pick a number from 1 to n. You have to guess which number I picked.&lt;br&gt;
Every time you guess wrong, I’ll tell you whether the number is higher or lower.&lt;br&gt;
You call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):&lt;br&gt;
&lt;code&gt;-1 : My number is lower 1 : My number is higher 0 : Congrats! You got it!&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Length of Repeated Subarray</title>
    <link href="http://yoursite.com/2019/04/15/leetcodeQ718/"/>
    <id>http://yoursite.com/2019/04/15/leetcodeQ718/</id>
    <published>2019-04-15T20:40:57.000Z</published>
    <updated>2019-04-15T20:56:55.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-718-maximum-length-of-repeated-subarray"><a class="markdownIt-Anchor" href="#leetcode-q-718-maximum-length-of-repeated-subarray"></a> LeetCode Q 718 - Maximum Length of Repeated Subarray</h1><p>Given two integer arrays A and B, return the maximum length of an subarray that appears in both arrays.<br><strong>Note:</strong></p><ol><li>&lt;= len(A), len(B) &lt;= 1000</li><li>&lt;= A[i], B[i] &lt; 100</li></ol><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p>Since a common subarray of A and B must start at some A[i] and B[j], let <code>dp[i][j]</code> be the longest common prefix of A[i:] and B[j:]. Whenever A[i] == B[j], we know <code>dp[i][j] = dp[i-1][j-1] + 1</code>. Also, the answer is <code>maxLen(dp[i][j]</code>) over all i, j.</p><p><strong>Time Complexity:</strong> O(M * N);</p><p><strong>Space Complexity:</strong> O(M * N);</p><p><strong>M, N</strong>: length of A, B</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLength</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[A.length + <span class="number">1</span>][B.length + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i &lt; dp[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (A[i - <span class="number">1</span>] == B[j - <span class="number">1</span>]) </span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">res = Math.max(res, dp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="an-optimized-solution"><a class="markdownIt-Anchor" href="#an-optimized-solution"></a> An Optimized Solution</h3><p>We can <strong>optimize the space complexity.</strong><br><code>dp[i][j] = dp[i-1][j-1] + 1</code> --&gt; <code>maxLen[i][j]</code> only depends on <code>maxLen[i-1][j-1]</code>, so you only need to keep <code>maxLen[i-1][j-1]</code> which is one element.<br>Therefore, we use maxLenTemp to keep <code>maxLen[i-1][j-1]</code> and traverse the matrix diagonally.</p><p><strong>Time Complexity:</strong> O(M * N);</p><p><strong>Space Complexity:</strong> O(1);</p><p><strong>M, N</strong>: length of A, B</p><p><strong>Code: Optimzed Solution</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLength</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; B.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> maxLenTemp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>, n = i; m &lt; A.length &amp;&amp; n &lt; B.length; m++, n++) &#123;</span><br><span class="line"><span class="keyword">if</span> (A[m] == B[n]) &#123;</span><br><span class="line">maxLenTemp++;</span><br><span class="line">res = Math.max(res, maxLenTemp);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">maxLenTemp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> maxLenTemp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = i, n = <span class="number">0</span>; m &lt; A.length &amp;&amp; n &lt; B.length; m++, n++) &#123;</span><br><span class="line"><span class="keyword">if</span> (A[m] == B[n]) &#123;</span><br><span class="line">maxLenTemp++;</span><br><span class="line">res = Math.max(res, maxLenTemp);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">maxLenTemp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-718-maximum-length-of-repeated-subarray&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-718-maximum-length-of-repeated-subarray&quot;&gt;&lt;/a&gt; LeetCode Q 718 - Maximum Length of Repeated Subarray&lt;/h1&gt;
&lt;p&gt;Given two integer arrays A and B, return the maximum length of an subarray that appears in both arrays.&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;lt;= len(A), len(B) &amp;lt;= 1000&lt;/li&gt;
&lt;li&gt;&amp;lt;= A[i], B[i] &amp;lt; 100&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
</feed>
