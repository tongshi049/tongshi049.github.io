<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TongTong Shi&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-24T21:09:16.278Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tong Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Observer Design Pattern = Publishers + Subscribers</title>
    <link href="http://yoursite.com/2019/09/24/observer-design-pattern/"/>
    <id>http://yoursite.com/2019/09/24/observer-design-pattern/</id>
    <published>2019-09-24T18:16:39.000Z</published>
    <updated>2019-09-24T21:09:16.278Z</updated>
    
    <content type="html"><![CDATA[<h4 id="font-colordodgerblue1-what-observer-pattern-definedfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue1-what-observer-pattern-definedfont"></a> <font color="dodgerblue">1. What Observer Pattern defined</font></h4><div style="background-color: LAVENDERBLUSH; padding: 10px">The <b>Observer Pattern</b> defines a <b><i>one-to-many</i></b> <b>dependency</b> between objects so that when one object changes state, all of its dependents are <b>notified and updated automatically</b>.</div><a id="more"></a><p>The following image is from book <strong>Head First Design Patterns</strong>.<br><img src="observer1.png" width="60%" height="60%"></p><p><font color="TURQUOISE"><strong>Points:</strong></font></p><ul><li><font color="MEDIUMSLATEBLUE">What does this have to do with <em>one-to-many</em> relationship</font><br>With the observer pattern, the <strong>Subject</strong> is the object that contains the state and controls it. So, there is <strong>ONE subject with state</strong>. The <strong>observers</strong>, on the other hand use the state, even if they don’t own it. There are many observers and they rely on the Subject to tell them when its state changes. So there is a relationship between the <strong>ONE Subject</strong> to the <strong>MANY Observers</strong>.</li><li><font color="MEDIUMSLATEBLUE">How does dependence come into this?</font><br>Because the subject is the <strong>sole owner of the data</strong>, the observers are dependent on teh subject to update them when the data changes. This leads to a cleaner OO design than allowing many objects to control the same data.</li></ul><h4 id="font-colordodgerblue2-structurefont"><a class="markdownIt-Anchor" href="#font-colordodgerblue2-structurefont"></a> <font color="dodgerblue">2. Structure</font></h4><p>The UML is shown as follows.<br><img src="UML.png" width="60%" height="60%"></p><p><font color="TURQUOISE"><strong>Points:</strong></font></p><ol><li>Objects use this <code>ISubject</code> interface to register as observers and also to remove themselves from being observers.</li><li>Each subject can have many observers.</li><li>The <code>IObserver</code> interface just has one method <code>update()</code> that gets called when the subject’s state changes.</li><li>A concrete subject implements the <code>ISubject</code> interface. Besides the register and remove method, the concrete subject implements a <code>notify()</code> method which is used to update all the current observers.</li><li>The concrete subject may also have methods for setting and getting its state.</li><li>Concrete observers can be any class that implements the <code>IObserver</code> interface. Each observer registers with a concrete subject to receive updates.</li></ol><h4 id="font-colordodgerblue3-advantagesfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue3-advantagesfont"></a> <font color="dodgerblue">3. Advantages</font></h4><p><font color="deepskyblue"><strong>The Observer Pattern provides an object design where subjects and observers are loosely coupled. Why?</strong></font></p><ul><li><font color="royalblue">The only thing the subject knows about an observer is that <strong>it implements a certain interface (the <code>Observer</code> interface)</strong>.</font> It doesn’t need to know the concrete class of the observer, what is does, or anything else about it.</li><li><font color="royalblue">We can add new observers at any time.</font></li><li><font color="royalblue">We never need to modify the subject to add new types of observers.</font></li><li><font color="royalblue">We can reuse subjects or observers independently of each other</font></li><li><font color="royalblue">Changes to either the subject or an observer will not affect the other (power of loosly coupled).</font></li></ul><p><font color="tomato"><strong>Tip about <em>Loosely coupled</em></strong></font></p><ul><li><font color="tomato"><strong>What</strong></font>: when two objects are loosely coupled, they can interact, but have very little knowledge of each other.</li><li><font color="tomato"><strong>Advantage</strong></font>: allow us to build flexible OO systems that can handle change because they minimize the interdependency between objects.</li></ul><img src="taji.png" width="30%" height="30%"><h4 id="font-colordodgerblue4-examplefont"><a class="markdownIt-Anchor" href="#font-colordodgerblue4-examplefont"></a> <font color="dodgerblue">4. Example</font></h4><p>In this example, a weather station example will introduced. Through subscribing Weather stations in different states, the local residents can get the latest weather condition.</p><p><font color="deepskyblue"><strong>Step 1: Create interfaces</strong></font></p><ul><li><code>WeatherStation</code> : the Subject interface</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeatherStation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">registerObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Observer</code>: the Observer interface</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humi, <span class="keyword">float</span> pres)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Display</code> : used to show the weather data</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Display</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">displayWeatherData</span> <span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="deepskyblue"><strong>Step 2: Concrete Subject</strong></font></p><ul><li><code>DemaciaWeatherStation</code> : the weather station in Demacia, reports data includes temperature, humidity, pressure.</li></ul><details><summary>CODE</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemaciaWeatherStation</span> <span class="keyword">implements</span> <span class="title">WeatherStation</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// some states reflecting the weather in Demacia</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// observers</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * constructor</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemaciaWeatherStation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * set weather data</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeatherData</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">registerObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (observer <span class="keyword">instanceof</span> DemaciaObserver) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.observers.contains(observer))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"This observer has already been registered."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.observers.add(observer);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Success!"</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"You have registered a wrong channel."</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (observer <span class="keyword">instanceof</span> DemaciaObserver) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.observers.contains(observer))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"This observer does not exist"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.observers.remove(observer);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Success!"</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unexpected observer type."</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer: <span class="keyword">this</span>.observers) &#123;</span><br><span class="line">            DemaciaObserver demaciaObserver = (DemaciaObserver) observer;</span><br><span class="line">            demaciaObserver.update(<span class="keyword">this</span>.temperature, <span class="keyword">this</span>.humidity, <span class="keyword">this</span>.pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li><code>IoniaWeatherStation</code> : the weather station in Ionia, reports data includes temperature, wind, visibility.</li></ul><details><summary>CODE</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.designpatterns.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoniaWeatherStation</span> <span class="keyword">implements</span> <span class="title">WeatherStation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// some states reflecting the weather in Ionia</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> wind;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> visibility;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// observers</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * constructor</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IoniaWeatherStation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * set weather data</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeatherData</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> wind, <span class="keyword">float</span> visibility)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.wind = wind;</span><br><span class="line">        <span class="keyword">this</span>.visibility = visibility;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">registerObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (observer <span class="keyword">instanceof</span> IoniaObserver) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.observers.contains(observer))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"This observer has already been registered."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.observers.add(observer);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Success!"</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"You have registered a wrong channel."</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (observer <span class="keyword">instanceof</span> IoniaObserver) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.observers.contains(observer))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"This observer does not exist"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.observers.remove(observer);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Success!"</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unexpected observer type."</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer: <span class="keyword">this</span>.observers) &#123;</span><br><span class="line">            IoniaObserver ioniaObserver = (IoniaObserver) observer;</span><br><span class="line">            ioniaObserver.update(<span class="keyword">this</span>.temperature, <span class="keyword">this</span>.wind, <span class="keyword">this</span>.visibility);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><font color="deepskyblue"><strong>Step 3: Concrete Observer</strong></font></p><ul><li><code>DemaciaObserver</code> : the observer in Demacia.</li></ul><details><summary>CODE</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemaciaObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">Display</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humi, <span class="keyword">float</span> pres)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temp;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humi;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pres;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayWeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Current weather in Demacis is:"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Temperature: "</span> + <span class="keyword">this</span>.temperature);</span><br><span class="line">        System.out.println(<span class="string">"Humidity: "</span> + <span class="keyword">this</span>.humidity);</span><br><span class="line">        System.out.println(<span class="string">"Pressure: "</span> + <span class="keyword">this</span>.pressure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li><code>IoniaObserver</code> : the observer in Ionia.</li></ul><details><summary>CODE</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoniaObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">Display</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> wind;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> visibility;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> wind, <span class="keyword">float</span> visibility)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temp;</span><br><span class="line">        <span class="keyword">this</span>.wind = wind;</span><br><span class="line">        <span class="keyword">this</span>.visibility = visibility;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayWeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Current weather in Ionia is:"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Temperature: "</span> + <span class="keyword">this</span>.temperature);</span><br><span class="line">        System.out.println(<span class="string">"Wind: "</span> + <span class="keyword">this</span>.wind);</span><br><span class="line">        System.out.println(<span class="string">"Visibility: "</span> + <span class="keyword">this</span>.visibility);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><font color="deepskyblue"><strong>Final Setp: Let’s test it!</strong></font></p><details><summary>CODE</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        WeatherStation dWeatherStation = <span class="keyword">new</span> DemaciaWeatherStation();</span><br><span class="line">        ((DemaciaWeatherStation) dWeatherStation).setWeatherData(<span class="number">35</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Observer Garen = <span class="keyword">new</span> DemaciaObserver();</span><br><span class="line">        Observer Lux = <span class="keyword">new</span> DemaciaObserver();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====Garen subscribed====="</span>);</span><br><span class="line">        dWeatherStation.registerObserver(Garen);</span><br><span class="line">        System.out.println(<span class="string">"=====Lux subscribed====="</span>);</span><br><span class="line">        dWeatherStation.registerObserver(Lux);</span><br><span class="line"></span><br><span class="line">        dWeatherStation.notifyObservers();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====Garen gets the weather information====="</span>);</span><br><span class="line">        ((DemaciaObserver) Garen).displayWeatherData();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====Lux gets the weather information====="</span>);</span><br><span class="line">        ((DemaciaObserver) Lux).displayWeatherData();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====Weather changes====="</span>);</span><br><span class="line">        ((DemaciaWeatherStation) dWeatherStation).setWeatherData(<span class="number">39</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"=====Lux subscribed====="</span>);</span><br><span class="line">        dWeatherStation.removeObserver(Lux);</span><br><span class="line">        dWeatherStation.notifyObservers();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====Garen gets the weather information====="</span>);</span><br><span class="line">        ((DemaciaObserver) Garen).displayWeatherData();</span><br><span class="line">        System.out.println(<span class="string">"=====Lux gets the weather information====="</span>);</span><br><span class="line">        ((DemaciaObserver) Lux).displayWeatherData();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></details><p>The output is<br><img src="result.png" width="30%" height="30%"></p><p>From the above result we can see if the local subscribed the weather station, after the weather station notified them, then they could get the latest information.</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;font-colordodgerblue1-what-observer-pattern-definedfont&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-colordodgerblue1-what-observer-pattern-definedfont&quot;&gt;&lt;/a&gt; &lt;font color=&quot;dodgerblue&quot;&gt;1. What Observer Pattern defined&lt;/font&gt;&lt;/h4&gt;
&lt;div style=&quot;background-color: LAVENDERBLUSH; padding: 10px&quot;&gt;The &lt;b&gt;Observer Pattern&lt;/b&gt; defines a &lt;b&gt;&lt;i&gt;one-to-many&lt;/i&gt;&lt;/b&gt; &lt;b&gt;dependency&lt;/b&gt; between objects so that when one object changes state, all of its dependents are &lt;b&gt;notified and updated automatically&lt;/b&gt;.&lt;/div&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yoursite.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Builder Design Pattern</title>
    <link href="http://yoursite.com/2019/09/24/builder-design-pattern/"/>
    <id>http://yoursite.com/2019/09/24/builder-design-pattern/</id>
    <published>2019-09-24T17:46:26.000Z</published>
    <updated>2019-09-24T18:06:17.048Z</updated>
    
    <content type="html"><![CDATA[<h4 id="font-colordodgerblue1-definitionfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue1-definitionfont"></a> <font color="dodgerblue">1. Definition</font></h4><p>The following is the definition of Builder Patter from <a href="https://en.wikipedia.org/wiki/Builder_pattern#Java" target="_blank" rel="noopener">wikipedia</a>.</p><p><font color="mediumslateblue">The <strong>Builder</strong> is a design pattern designed to provide a flexible solution to various object creation problems in <strong>OOP</strong>. The intent of it is to <strong>separate</strong> the construction of a complex object from its representation.</font></p><a id="more"></a><h4 id="font-colordodgerblue2-what-problem-the-builder-sloves-font"><a class="markdownIt-Anchor" href="#font-colordodgerblue2-what-problem-the-builder-sloves-font"></a> <font color="dodgerblue">2. What problem the Builder sloves ?</font></h4><p>The <strong>Builder</strong> design pattern describes how to solve such problem.</p><ul><li><strong>Encapsulate</strong> creating and assembling the parts of a complex object in a seperate <strong>Builder</strong> object.</li><li>A class delegates object creation to a <strong>Builder</strong> object instead of creating objects directly.<br>A class can delegate to different <strong>Builder</strong> objects to create different representations of a complex object.</li></ul><h4 id="font-colordodgerblue3-advantagesfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue3-advantagesfont"></a> <font color="dodgerblue">3. Advantages</font></h4><ul><li>Provide very readable, betterthan infinite number of constructors with boolean or numeric arguments, or setters.</li><li>Eliminates ‘telescoping’ constructors without sacrificing immutability.</li><li>Allows you to vary a product’s internal representation.</li><li>Encapsulates code for construction and representation.</li><li>Provides control over steps of construction process.</li></ul><h4 id="font-colordodgerblue4-examplefont"><a class="markdownIt-Anchor" href="#font-colordodgerblue4-examplefont"></a> <font color="dodgerblue">4. Example</font></h4><details><summary>Example</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// account id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> accountNumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// owner name</span></span><br><span class="line">    <span class="keyword">private</span> String owner;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// balance amount</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// branch name</span></span><br><span class="line">    <span class="keyword">private</span> String branch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// interest rate</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> interestRate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * private constructor</span></span><br><span class="line"><span class="comment">    * so users cannot instantiate a new account by calling the constructor directly</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BankAccount</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountNumber = builder.accountNumber;</span><br><span class="line">        <span class="keyword">this</span>.owner = builder.owner;</span><br><span class="line">        <span class="keyword">this</span>.balance = builder.balance;</span><br><span class="line">        <span class="keyword">this</span>.branch = builder.branch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BankAccount&#123;"</span> +</span><br><span class="line">                <span class="string">"accountNumber="</span> + accountNumber +</span><br><span class="line">                <span class="string">", owner='"</span> + owner + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", balance="</span> + balance +</span><br><span class="line">                <span class="string">", branch='"</span> + branch + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", interestRate="</span> + interestRate +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * The inner static Builder class</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fields we want to use to create a new bank account</span></span><br><span class="line">        <span class="comment">// account id, required</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> accountNumber;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// owner name</span></span><br><span class="line">        <span class="keyword">private</span> String owner;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// balance amount</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// branch name</span></span><br><span class="line">        <span class="keyword">private</span> String branch;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * constructor</span></span><br><span class="line"><span class="comment">        * construct the Builder with account id</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">long</span> accountNumber)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.accountNumber = accountNumber;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">withOwner</span><span class="params">(String owner)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.owner = owner;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">openingBalance</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.balance = balance;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">atBranch</span><span class="params">(String branch)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.branch = branch;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BankAccount <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BankAccount(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure></details><p>Note that in the inner class <code>Builder</code>, <code>this</code> refers to the inner class object and <code>build()</code> methods returns a bankAccount instance.</p><p>By using the <strong>Builder</strong> pattern, new we can create a bank account like this.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BankAccount bankAccount = <span class="keyword">new</span> BankAccount.Builder(<span class="number">10L</span>)</span><br><span class="line">            .withOwner(<span class="string">"TongTongShi"</span>)</span><br><span class="line">            .atBranch(<span class="string">"AB, CA"</span>)</span><br><span class="line">            .openingBalance(<span class="number">123.456</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;font-colordodgerblue1-definitionfont&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-colordodgerblue1-definitionfont&quot;&gt;&lt;/a&gt; &lt;font color=&quot;dodgerblue&quot;&gt;1. Definition&lt;/font&gt;&lt;/h4&gt;
&lt;p&gt;The following is the definition of Builder Patter from &lt;a href=&quot;https://en.wikipedia.org/wiki/Builder_pattern#Java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;mediumslateblue&quot;&gt;The &lt;strong&gt;Builder&lt;/strong&gt; is a design pattern designed to provide a flexible solution to various object creation problems in &lt;strong&gt;OOP&lt;/strong&gt;. The intent of it is to &lt;strong&gt;separate&lt;/strong&gt; the construction of a complex object from its representation.&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yoursite.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>PHP Study Notes - Ajax</title>
    <link href="http://yoursite.com/2019/09/11/php-ajax/"/>
    <id>http://yoursite.com/2019/09/11/php-ajax/</id>
    <published>2019-09-11T16:53:21.000Z</published>
    <updated>2019-09-11T17:07:48.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ajax-and-php"><a class="markdownIt-Anchor" href="#ajax-and-php"></a> Ajax and PHP</h3><h4 id="font-colordodgerblue1-what-is-an-ajax-request-font"><a class="markdownIt-Anchor" href="#font-colordodgerblue1-what-is-an-ajax-request-font"></a> <font color="dodgerblue">1. What is an Ajax request ?</font></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ajax-and-php&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ajax-and-php&quot;&gt;&lt;/a&gt; Ajax and PHP&lt;/h3&gt;
&lt;h4 id=&quot;font-colordodgerblue1-what-is-an-ajax
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="JQuery" scheme="http://yoursite.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>PHP Study Notes - Session</title>
    <link href="http://yoursite.com/2019/09/10/php-session/"/>
    <id>http://yoursite.com/2019/09/10/php-session/</id>
    <published>2019-09-10T21:37:08.000Z</published>
    <updated>2019-09-11T16:56:01.241Z</updated>
    
    <content type="html"><![CDATA[<h3 id="session-in-php"><a class="markdownIt-Anchor" href="#session-in-php"></a> Session in PHP</h3><a href="https://www.php.net/manual/en/intro.session.php" target="_blank" rel="noopener">official documentation</a><h4 id="font-colordodgerblue1-sessions-cookiesfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue1-sessions-cookiesfont"></a> <font color="dodgerblue">1. Sessions &amp; Cookies</font></h4><ul><li><font color="slateblue"><strong>Session</strong>: a chunk of data maintained at the server that maintains state between HTTP requests. Features: </font><ul><li><font color="DARKTURQUOISE">No storage limit.</font></li><li><font color="DARKTURQUOISE">Not easily accessible.</font></li><li><font color="DARKTURQUOISE">Type of values can store in a session? <strong>Any type (number, string, array,…)</strong></font></li></ul></li></ul><a id="more"></a><ul><li><font color="slateblue"><strong>Cookie</strong>: a bit of data stored by the browser and sent to the server with every request. It is often used to facilitate sessions since it tells the server which client handles which session.</font><ul><li><font color="MEDIUMSEAGREEN">Store limited amount of data.</font></li><li><font color="MEDIUMSEAGREEN">Easily sccessible so less secure.</font></li><li><font color="MEDIUMSEAGREEN">Type of values can store in a session? <strong>String</strong> </font></li></ul></li></ul><img src="session1.png" width="40%" height="50%">Since HTTP is stateless, session is always used to remember state. <img src="session2.png" width="60%" height="80%">And cookies are used to identify sessions.<img src="session3.png" width="40%" height="50%"><h4 id="font-colordodgerblue2-sessions-in-phpfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue2-sessions-in-phpfont"></a> <font color="dodgerblue">2. Sessions in PHP</font></h4><p>Session support in PHP consists of a way to preserve certain data across subsequent accesses. The session support allows us to store data between requests in the <font color="LIMEGREEN"><strong><code>$_SESSION</code></strong></font> superglobal array. When a visitor access a site, PHP will check automatically or on your request (explicitly through <code>session_start()</code>) whether a specific session id has been sent with the request. If this is the case, the prior saved environment is recreated.</p><p><font color="dodgerblue"><strong>Basic usage:</strong></font></p><p>Sessions can be started manully using the <code>session_start()</code> function. If the <code>session.auto_start</code> directive is set to 1, a sessio will automatically start on request startup.</p><p>Sessions shutdown automatically when PHP is finished executing a script, but can be manully shutdown using the <code>session_write_close()</code> function.</p><p><strong>Example:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// store a variable count, record the visiting times to a page</span></span><br><span class="line">    sesseion_start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'count'</span>])) &#123;</span><br><span class="line">        $_SESSION[<span class="string">'count'</span>]++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $_SESSION[<span class="string">'count'</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><font color="tomato"><strong>Note:</strong><br>When working with sessions that a record of a session is not created until a variable has been registered using the <code>session_register()</code> function or by adding a new key to the <code>$_SESSION</code> superglobal array. This holds true regardless of if a session has been started using the <code>session_start()</code> function.</font></p><p><font color="dodgerblue"><strong>Passing the Session ID:</strong></font></p><p>There are two ways to propagate a sessio id: Cookies and URL parameter.</p><p><font color="dodgerblue"><strong>Session Functions:</strong></font></p><ul><li><code>session_regenerate_id</code> : replace the current session id with a new one, and keep the current session information.</li><li><code>session_destroy</code> : destroy all of the data associated with the current session. It does <strong>not</strong> unset any of the global variables associated with the session, or <strong>unset</strong> the session cookie. To use the session variables again, session_start() has to be called.</li><li><code>setcookie</code> : define a cookie to be sent along with the rest of the HTTP headers. Once the cookies have been set, they can be accessed on the next page load with the <code>$_COOKIE</code> array. Cookie values may also exist in <code>$_REQUEST</code>.</li><li><code>session_get_cookie_params</code> : get the session cookie parameters.</li></ul><p><font color="dodgerblue"><strong>How to destroy global variables associated with the session?</strong></font></p><ol><li>Unset all the session variables.</li><li>Delete the session cookie.</li><li>Destroy the session.</li></ol><details><summary>CODE</summary><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Unset all of the session variables.</span></span><br><span class="line">    $_SESSION = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If it's desired to kill the session, also delete the session cookie.</span></span><br><span class="line">    <span class="comment">// <span class="doctag">Note:</span> This will destroy the session, and not just the session data!</span></span><br><span class="line">    <span class="keyword">if</span> (ini_get(<span class="string">"session.use_cookies"</span>)) &#123;</span><br><span class="line">        $params = session_get_cookie_params();</span><br><span class="line">        setcookie(session_name(), <span class="string">''</span>, time() - <span class="number">42000</span>,</span><br><span class="line">            $params[<span class="string">"path"</span>], $params[<span class="string">"domain"</span>],</span><br><span class="line">            $params[<span class="string">"secure"</span>], $params[<span class="string">"httponly"</span>]</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Finally, destroy the session.</span></span><br><span class="line">    session_destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;session-in-php&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#session-in-php&quot;&gt;&lt;/a&gt; Session in PHP&lt;/h3&gt;
&lt;a href=&quot;https://www.php.net/manual/en/intro.session.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;official documentation&lt;/a&gt;
&lt;h4 id=&quot;font-colordodgerblue1-sessions-cookiesfont&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-colordodgerblue1-sessions-cookiesfont&quot;&gt;&lt;/a&gt; &lt;font color=&quot;dodgerblue&quot;&gt;1. Sessions &amp;amp; Cookies&lt;/font&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&quot;slateblue&quot;&gt;&lt;strong&gt;Session&lt;/strong&gt;: a chunk of data maintained at the server that maintains state between HTTP requests. Features: &lt;/font&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&quot;DARKTURQUOISE&quot;&gt;No storage limit.&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;DARKTURQUOISE&quot;&gt;Not easily accessible.&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;DARKTURQUOISE&quot;&gt;Type of values can store in a session? &lt;strong&gt;Any type (number, string, array,…)&lt;/strong&gt;&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP Study Notes - PDO</title>
    <link href="http://yoursite.com/2019/09/10/php-pdo/"/>
    <id>http://yoursite.com/2019/09/10/php-pdo/</id>
    <published>2019-09-10T15:12:44.000Z</published>
    <updated>2019-09-10T21:25:39.532Z</updated>
    
    <content type="html"><![CDATA[<h3 id="php-data-objects-pdo-interface"><a class="markdownIt-Anchor" href="#php-data-objects-pdo-interface"></a> PHP Data Objects (PDO) Interface</h3><a href="https://www.php.net/manual/en/book.pdo.php" target="_blank" rel="noopener">official documentation</a><p><font color="slateblue">The <strong>PDO</strong> extension defines a lightweight, consistent interface for accessing databases in PHP. Each database driver that implements the PDO interface can expose database-specific features as regular extension functions. It provides a <em>data-access</em> abstracton layer, regardless of which database you’re using, you use the same functions to issue queries and fetch data.</font></p><a id="more"></a><h4 id="font-colordodgerblue1-connection-to-databasefont"><a class="markdownIt-Anchor" href="#font-colordodgerblue1-connection-to-databasefont"></a> <font color="dodgerblue">1. Connection to database</font></h4><p><font color="dodgerblue"><strong>MySql PDO Driver</strong></font><br>Since we cannot perform any database functions using the PDO extention by itself; a <font color="mediumaquamarine"><strong>database-specific PDO driver</strong></font> is required to access a database. In php configuration file <code>php.ini</code>, we can do the following settings to let the driver extension loaded automatically.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extension</span>=mysqli</span><br><span class="line"><span class="attr">extension</span>=pdo_mysql</span><br><span class="line"><span class="attr">extension</span>=pdo_sqlite</span><br></pre></td></tr></table></figure><p><font color="dodgerblue"><strong>Connections</strong></font></p><p>By creating instances of the PDO base class, connections can be established. It doesn’t matter which driver is used; the <strong>PDO class name</strong> is always used. The <strong>constructor</strong> accepts parameters for specifying the <font color="mediumslateblue">database source (DSN), username, password</font>. For example,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dsn = <span class="string">'mysql:host='</span> . $db_host . <span class="string">';dbname='</span> . $db_name . <span class="string">';charset=utf8'</span>;</span><br><span class="line"></span><br><span class="line">$db = <span class="keyword">new</span> PDO($dsn, $db_user, $db_pass);</span><br></pre></td></tr></table></figure><p>If the connection errors occur, a <font color="tomato"><em>PDOException</em></font> object will be thrown. To handle the error condition, a <em>try-catch</em> block can be used. For example,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dsn = <span class="string">'mysql:localhost='</span> . $db_host . <span class="string">'; dbname='</span> . $db_name . <span class="string">'; charset=utf8'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    $db = <span class="keyword">new</span> PDO($dsn, $db_user, $db_pass);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue2-prepared-statements-and-stored-proceduresfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue2-prepared-statements-and-stored-proceduresfont"></a> <font color="dodgerblue">2. Prepared statements and stored procedures</font></h4><p>To avoid <font color="tomato"><em>SQL injection</em></font>occurs, the <strong>prepared statements</strong> need to be used. They can be thought of as kind of complied template for the SQL that an applicaion wants to run, that can be customized using variable parameters.</p><p>The <strong>prepared statements</strong> bring two major benefits:</p><ul><li>The query only needs to be prepared once, but can be executed multiple times with the same or different parameters.</li><li>No SQL injection will occur.</li></ul><p>When using the <strong>prepared statments</strong>, it follows <code>prepare -&gt; bindValue -&gt; execute</code> procedure. For example,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT * </span></span><br><span class="line"><span class="string">        FROM user</span></span><br><span class="line"><span class="string">        WHERE username = :username"</span></span><br><span class="line"></span><br><span class="line">$stmt = $conn-&gt;prepare($sql);</span><br><span class="line"></span><br><span class="line">$stmt-&gt;bindValue(<span class="string">':username'</span>, $username, PDO::PARAM_STR);</span><br><span class="line"></span><br><span class="line">$stmt-&gt;execute();</span><br></pre></td></tr></table></figure><p><font color="dodgerblue"><strong>Repeated inserts using prepared statements</strong></font><br>The following example shows how to repeat inserts using prepared statements. The <code>?</code> can be used as the placeholder.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCategories</span> <span class="params">($conn, $ids)</span> </span>&#123;</span><br><span class="line">    $sql = <span class="string">"INSERT IGNORE INTO article_category (article_id, category_id VALUES "</span>; <span class="comment">// be attention to the space in the end</span></span><br><span class="line"></span><br><span class="line">    $values = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($ids <span class="keyword">as</span> $ad) &#123;</span><br><span class="line">    $values[] = <span class="string">"(&#123;$this-&gt;id&#125;, ?&#125;)"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $sql .= implode(<span class="string">", "</span>, $values); <span class="comment">// implode - join array elements with a gluestring. Syntax: implode(string $glue, array $pieces): string</span></span><br><span class="line"></span><br><span class="line">    $stmt = $conn-&gt;prepare($sql);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($ids <span class="keyword">as</span> $i =&gt; $id) &#123;</span><br><span class="line">    $stmt-&gt;bindValue($i + <span class="number">1</span>, $id, PDO::PARAM_INT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="dodgerblue"><strong>Fetch data using prepared statements</strong></font><br>The following example shows how to fetch data using prepared statements. The user input has automatically quoted, so there is no risk of a SQL injection attack.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT * FROM article where id = ?"</span>;</span><br><span class="line"></span><br><span class="line">$stmt = $db-&gt;prepare($sql);</span><br><span class="line"></span><br><span class="line">$stmt-&gt;bindValue(<span class="number">1</span>, $id, PDO::PARAM_INT);</span><br><span class="line"></span><br><span class="line">$stmt-&gt;setFetchMode(PDO::FETCH_CLASS, <span class="string">'Article'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($stmt-&gt;execute()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $stmt-&gt;fetch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we need to get data from user input, we can also add validations like <code>isset($_GET['id'])</code> and <code>is_numeric($_GET['id'])</code></p><p><font color="dodgerblue"><strong>Call a stored procedure with an output parameter</strong></font></p><h4 id="font-colordodgerblue3-pdo-classfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue3-pdo-classfont"></a> <font color="dodgerblue">3. PDO class</font></h4><p>Represents a connection between PHP and a database server.</p><p>Commonly used methods:</p><ul><li><font color="MEDIUMSEAGREEN"><code>PDO::__construct ( string $dsn [, string $username [, string $passwd [, array $options ]]] )</code></font> : Creates a PDO instance to represent a connection to the requested database.</li><li><font color="MEDIUMSEAGREEN"><code>PDO::prepare ( string $statement [, array $driver_options = array() ] ) : PDOStatement</code></font></li><li><font color="MEDIUMSEAGREEN"><code>PDO::query ( string $statement ) : PDOStatement</code></font>. E.g.</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"SELECT *</span></span><br><span class="line"><span class="string">        FROM category</span></span><br><span class="line"><span class="string">        ORDER BY name"</span>;</span><br><span class="line"></span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $result-&gt;fetchAll(PDO::FETCH_ASSOC);</span><br></pre></td></tr></table></figure><ul><li><font color="MEDIUMSEAGREEN"><code>PDO::query ( string $statement , int $fetch_style = PDO::FETCH_COLUMN , int $colno ) : PDOStatement</code></font>. E.g.</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $conn-&gt;query(<span class="string">"SELECT COUNT(*) FROM article"</span>)-&gt;fetchColumn();</span><br></pre></td></tr></table></figure><ul><li><font color="MEDIUMSEAGREEN"><code>PDO::lastInsertId ([ string $name = NULL ] ) : string</code></font> : returns the ID of the last inserted row or sequence value.<ul><li>If a sequence name was not specified for the name parameter, <code>PDO::lastInsertId()</code> returns a string representing the <em>row ID of the last row that was inserted into the database</em>.</li><li>If a sequence name was specified for the name parameter, <code>PDO::lastInsertId()</code> returns a string representing the <em>last value retrieved from the specified sequence object</em>. E.g.</li></ul></li></ul><details><summary>EXAMPLE</summary><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">($conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;validate()) &#123;</span><br><span class="line"></span><br><span class="line">        $sql = <span class="string">"INSERT INTO article (title, content, published_at)</span></span><br><span class="line"><span class="string">                VALUES (:title, :content, :published_at)"</span>;</span><br><span class="line"></span><br><span class="line">        $stmt = $conn-&gt;prepare($sql);</span><br><span class="line"></span><br><span class="line">        $stmt-&gt;bindValue(<span class="string">':title'</span>, <span class="keyword">$this</span>-&gt;title, PDO::PARAM_STR);</span><br><span class="line">        $stmt-&gt;bindValue(<span class="string">':content'</span>, <span class="keyword">$this</span>-&gt;content, PDO::PARAM_STR);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;published_at == <span class="string">''</span>) &#123;</span><br><span class="line">            $stmt-&gt;bindValue(<span class="string">':published_at'</span>, <span class="keyword">null</span>, PDO::PARAM_NULL);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $stmt-&gt;bindValue(<span class="string">':published_at'</span>, <span class="keyword">$this</span>-&gt;published_at, PDO::PARAM_STR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($stmt-&gt;execute()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = $conn-&gt;lastInsertId();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h4 id="font-colordodgerblue4-pdostatementfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue4-pdostatementfont"></a> <font color="dodgerblue">4. PDOStatement</font></h4><p>Represents a prepared statement and, after the statement is executed, an associated result set.</p><p>Commonly used methods:</p><ul><li><font color="MEDIUMSEAGREEN"><code>PDOStatement::bindColumn ( mixed $column , mixed &amp;$param [, int $type [, int $maxlen [, mixed $driverdata ]]] ) : bool</code></font> : bind a column to a PHP available. E.g.</li></ul><details><summary>EXAMPLE</summary><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readData</span><span class="params">($conn)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $sql = <span class="string">'SELECT name, colour, calories FROM fruit'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        $stmt = $conn-&gt;prepare($sql);</span><br><span class="line">        $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Bind by column number */</span></span><br><span class="line">        $stmt-&gt;bindColumn(<span class="number">1</span>, $name);</span><br><span class="line">        $stmt-&gt;bindColumn(<span class="number">2</span>, $color);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Bind by column name */</span></span><br><span class="line">        $stmt-&gt;bindColumn(<span class="string">'calories'</span>, $cals);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ($row = $stmt-&gt;fetch(PDO::FETCH_BOUND)) &#123;</span><br><span class="line">            $data = $name . <span class="string">" "</span> . $color . <span class="string">" "</span> . $cals . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">            <span class="keyword">echo</span> $data;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li><font color="MEDIUMSEAGREEN"><code>PDOStatement::bindParam ( mixed $parameter , mixed &amp;$variable [, int $data_type = PDO::PARAM_STR [, int $length [, mixed $driver_options ]]] ) : bool</code></font> : bind a parameter to the specified variable name. E.g.</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$calories = <span class="number">150</span>;</span><br><span class="line">$colour = <span class="string">'red'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Execute a prepared statement with named placeholder */</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">'SELECT name, colour, calories</span></span><br><span class="line"><span class="string">        FROM fruit</span></span><br><span class="line"><span class="string">        WHERE calories &lt; :calories AND colour = :colour'</span>;</span><br><span class="line">$stmt = $conn-&gt;prepare($sql);</span><br><span class="line">$stmt-&gt;bindParam(<span class="string">':calories'</span>, $calories, PDO::PARAM_INT);</span><br><span class="line">$stmt-&gt;bindParam(<span class="string">':colour'</span>, $colour, PDO::PARAM_STR, <span class="number">12</span>);</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Execute a prepared statement with question mark placeholders */</span></span><br><span class="line">$stmt = $dbh-&gt;prepare(<span class="string">'SELECT name, colour, calories</span></span><br><span class="line"><span class="string">    FROM fruit</span></span><br><span class="line"><span class="string">    WHERE calories &lt; ? AND colour = ?'</span>);</span><br><span class="line">$stmt-&gt;bindParam(<span class="number">1</span>, $calories, PDO::PARAM_INT);</span><br><span class="line">$stmt-&gt;bindParam(<span class="number">2</span>, $colour, PDO::PARAM_STR, <span class="number">12</span>);</span><br><span class="line">$stmt-&gt;execute();</span><br></pre></td></tr></table></figure><ul><li><font color="MEDIUMSEAGREEN"><code>PDOStatement::bindValue ( mixed $parameter , mixed $value [, int $data_type = PDO::PARAM_STR ] ) : bool</code></font> : bind a value to a parameter</li></ul><p><font color="tomato"><strong>Difference between <code>bindParam</code> and <code>bindValue</code></strong></font></p><ol><li><font color="tomato"><code>bindParam</code>: only <em>variables</em> can be passed in; <code>bindValue</code>: both <em>variables</em> and <em>values</em> can be passed in.</font></li><li><font color="tomato"><code>bindParam</code>: the variable is bound as a reference and will only be evaluated at the time that <code>PDOStatement:: execute()</code> is called.</font></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$value = <span class="string">'foo'</span>;</span><br><span class="line">$stmt = $conn-&gt;prepare(<span class="string">'SELECT name FROM bar WHERE baz = :baz'</span>);</span><br><span class="line">$stmt-&gt;bindParam(<span class="string">':baz'</span>, $value); <span class="comment">// use bindParam to bind the variable</span></span><br><span class="line">$value = <span class="string">'foobarbaz'</span>;</span><br><span class="line">$s-&gt;execute(); <span class="comment">// executed with WHERE baz = 'foobarbaz'</span></span><br><span class="line"></span><br><span class="line">$value = <span class="string">'foo'</span>;</span><br><span class="line">$stmt = $conn-&gt;prepare(<span class="string">'SELECT name FROM bar WHERE baz = :baz'</span>);</span><br><span class="line">$stmt-&gt;bindValue(<span class="string">':baz'</span>, $value); <span class="comment">// use bindValue to bind the variable's value</span></span><br><span class="line">$value = <span class="string">'foobarbaz'</span>;</span><br><span class="line">$s-&gt;execute(); <span class="comment">// executed with WHERE baz = 'foo'</span></span><br></pre></td></tr></table></figure><ul><li><font color="MEDIUMSEAGREEN"><code>PDOStatement::fetch ([ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0 ]]] ) : mixed</code></font> : fetch the next row from a result set. <code>fetch_style</code> includes:<ul><li><code>PDO::FETCH_ASSOC</code>: returns an array indexed by column name as returned in result set.</li><li><code>PDO::FETCH_BOUND</code>: returns <strong>TRUE</strong> and assigns the values of the columns in result set to the PHP variables to which they were bound with the <code>PDOStatement::bindColumn()</code> method.</li><li><code>PDO::FETCH_CLASS</code>: returns a new instance of the requested class, mapping the columns of the result set to named properties in the class, and calling the constructor afterwards.</li></ul>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$stmt-&gt;setFetchMode(PDO::FETCH_CLASS, <span class="string">'Article'</span>);</span><br><span class="line">$stmt-&gt;fetch();</span><br></pre></td></tr></table></figure></li></ul><details><summary>Examples</summary><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"SELECT name, color FROM fruit"</span>;</span><br><span class="line">$stmt = $conn-&gt;prepare($sql);</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. PDO::FETCH_ASSOC */</span></span><br><span class="line">$result = $stmt-&gt;fetch(PDO::FETCH_ASSOC);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [name] =&gt; apple</span></span><br><span class="line"><span class="comment">    [color] =&gt; red</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. PDO::FETCH_BOTH */</span></span><br><span class="line">$result = $stmt-&gt;fetch(PDO::FETCH_BOTH);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [name] =&gt; banana</span></span><br><span class="line"><span class="comment">    [0] =&gt; banana</span></span><br><span class="line"><span class="comment">    [color] =&gt; yellow</span></span><br><span class="line"><span class="comment">    [1] =&gt; yellow</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><ul><li><font color="MEDIUMSEAGREEN"><code>PDOStatement::fetchAll ([ int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array() ]]] ) : array</code></font> : return an array containing all of the result set rows.</li></ul><details><summary>Examples</summary><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"SELECT name, color FROM fruit"</span>;</span><br><span class="line">$stmt = $conn-&gt;prepare($sql);</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. Fetch all remaining rows in a result set*/</span></span><br><span class="line"></span><br><span class="line">$result = $stmt-&gt;fetchAll();</span><br><span class="line"><span class="comment">/* $result: </span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [0] =&gt; Array </span></span><br><span class="line"><span class="comment">        (</span></span><br><span class="line"><span class="comment">            [name] =&gt; apple</span></span><br><span class="line"><span class="comment">            [0] =&gt; apple</span></span><br><span class="line"><span class="comment">            [color] =&gt; red</span></span><br><span class="line"><span class="comment">            [1] =&gt; red</span></span><br><span class="line"><span class="comment">        )</span></span><br><span class="line"><span class="comment">    [1] =&gt; ....</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. Fetch all values of a single column from a result set*/</span></span><br><span class="line"></span><br><span class="line">$result = $stmt-&gt;fetchAll(PDO::FETCH_COLUMN, <span class="number">0</span>);</span><br><span class="line">var_dump($result);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* $result: </span></span><br><span class="line"><span class="comment">Array(3)</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [0] =&gt; string(5) =&gt; apple</span></span><br><span class="line"><span class="comment">    [1] =&gt; string(4) =&gt; pear</span></span><br><span class="line"><span class="comment">    [2] =&gt; string(5) =&gt; grape</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. Group all values by a single column */</span></span><br><span class="line">$insert = $conn-&gt;prepare(<span class="string">"INSERT INTO fruit(name, colour) VALUES (?, ?)"</span>);</span><br><span class="line">$insert-&gt;execute(<span class="keyword">array</span>(<span class="string">'apple'</span>, <span class="string">'green'</span>));</span><br><span class="line">$insert-&gt;execute(<span class="keyword">array</span>(<span class="string">'pear'</span>, <span class="string">'yellow'</span>));</span><br><span class="line"></span><br><span class="line">$stmt = $conn-&gt;prepare(<span class="string">"SELECT name, colour FROM fruit"</span>);</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Group values by the first column */</span></span><br><span class="line">$result = $stmt-&gt;fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* $result:</span></span><br><span class="line"><span class="comment">array(3) &#123;</span></span><br><span class="line"><span class="comment">  ["apple"]=&gt;</span></span><br><span class="line"><span class="comment">  array(2) &#123;</span></span><br><span class="line"><span class="comment">    [0] =&gt; string(5) "green"</span></span><br><span class="line"><span class="comment">    [1] =&gt; string(3) "red"</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  ["pear"]=&gt;</span></span><br><span class="line"><span class="comment">  array(2) &#123;</span></span><br><span class="line"><span class="comment">    [0] =&gt; string(5) "green"</span></span><br><span class="line"><span class="comment">    [1] =&gt; string(6) "yellow"</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  ["watermelon"]=&gt;</span></span><br><span class="line"><span class="comment">  array(1) &#123;</span></span><br><span class="line"><span class="comment">    [0] =&gt; string(5) "pink"</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. Instantiating a class for each result */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fruit</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$stmt = $conn-&gt;prepare(<span class="string">"SELECT name, color FROM fruit"</span>);</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">$result = $stmt-&gt;fetchAll(PDO::FETCH_CLASS, <span class="string">"fruit"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* $result</span></span><br><span class="line"><span class="comment">array(3) &#123;</span></span><br><span class="line"><span class="comment">  [0]=&gt;</span></span><br><span class="line"><span class="comment">  object(fruit)#1 (2) &#123;</span></span><br><span class="line"><span class="comment">    ["name"]=&gt;string(5) "apple"</span></span><br><span class="line"><span class="comment">    ["colour"]=&gt;string(5) "green"</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  [1]=&gt;</span></span><br><span class="line"><span class="comment">  object(fruit)#2 (2) &#123;</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><ul><li><font color="MEDIUMSEAGREEN"><code>PDOStatement::fetchColumn ([ int $column_number = 0 ] ) : mixed</code></font> : return a single column from the next row of a result set or <font color="red"><strong>FALSE</strong></font> if there are no more rows. <font color="red"><strong>Note:</strong></font><br><code>PDOStatement::fetchColumn()</code> should not be used to retrieve <strong>boolean columns</strong>, as it is impossible to distinguish a value of FALSE from there being no more rows to retrieve. Use <code>PDOStatement::fetch()</code> instead.</li></ul><details><summary>Examples</summary><figure class="highlight elixir"><figcaption><span>lang: php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">"SELECT name, color FROM fruit"</span>;</span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$conn</span>-&gt;prepare(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;execute();</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$stmt</span>-&gt;fetchColumn(); <span class="regexp">/* first col of first row : name = lemon * /</span></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$stmt</span>-&gt;fetchColumn(<span class="number">1</span>); <span class="regexp">/\* second col of second row : color = red \*/</span></span><br></pre></td></tr></table></figure></details><ul><li><code>PDOStatement::setFetchMode ( int $mode ) : bool</code> : set the default fetch mode for this statement.</li><li><code>PDOStatement::rowCount ( void ) : int</code> : return the number of rows affected by the last SQL statement.</li></ul><details><summary>Examples</summary><figure class="highlight elixir"><figcaption><span>lang: php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$del</span> = <span class="variable">$dbh</span>-&gt;prepare(<span class="string">'DELETE FROM fruit'</span>);</span><br><span class="line"><span class="variable">$del</span>-&gt;execute();</span><br><span class="line"></span><br><span class="line">/* Return number of rows that were deleted \*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">$count = $del-&gt;rowCount(); /</span>\* <span class="number">9</span> \*<span class="regexp">/</span></span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;php-data-objects-pdo-interface&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#php-data-objects-pdo-interface&quot;&gt;&lt;/a&gt; PHP Data Objects (PDO) Interface&lt;/h3&gt;
&lt;a href=&quot;https://www.php.net/manual/en/book.pdo.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;official documentation&lt;/a&gt;
&lt;p&gt;&lt;font color=&quot;slateblue&quot;&gt;The &lt;strong&gt;PDO&lt;/strong&gt; extension defines a lightweight, consistent interface for accessing databases in PHP. Each database driver that implements the PDO interface can expose database-specific features as regular extension functions. It provides a &lt;em&gt;data-access&lt;/em&gt; abstracton layer, regardless of which database you’re using, you use the same functions to issue queries and fetch data.&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>PHP Study Notes - Overview</title>
    <link href="http://yoursite.com/2019/09/10/php-study-notes/"/>
    <id>http://yoursite.com/2019/09/10/php-study-notes/</id>
    <published>2019-09-10T15:11:06.000Z</published>
    <updated>2019-09-11T16:55:39.197Z</updated>
    
    <content type="html"><![CDATA[<p>In this series of PHP study notes, the following contents will be covered:</p><ol><li></li><li></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this series of PHP study notes, the following contents will be covered:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Flip Columns For Maximum Number of Equal Rows</title>
    <link href="http://yoursite.com/2019/08/15/leetcodeQ1072/"/>
    <id>http://yoursite.com/2019/08/15/leetcodeQ1072/</id>
    <published>2019-08-15T16:14:10.000Z</published>
    <updated>2019-08-15T16:45:27.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1072-flip-columns-for-maximum-number-of-equal-rows"><a class="markdownIt-Anchor" href="#leetcode-q-1072-flip-columns-for-maximum-number-of-equal-rows"></a> LeetCode Q 1072 - Flip Columns For Maximum Number of Equal Rows</h1><p>Given a matrix consisting of <code>0s</code> and <code>1s</code>, we may choose any number of columns in the matrix and flip every cell in that column.  Flipping a cell changes the value of that cell from <code>0</code> to <code>1</code> or from <code>1</code> to <code>0</code>.<br>Return the maximum number of rows that have all values equal after some number of flips.</p><p><strong>Example 1:</strong> <code>Input: [[0,1],[1,1]] ; Output: 1</code><br>Explanation: After flipping no values, 1 row has all values equal.<br><strong>Example 2:</strong> <code>Input: [[0,1],[1,0]] ; Output: 2</code><br>Explanation: After flipping values in the first column, both rows have equal values.<br><strong>Example 3:</strong> <code>Input: [[0,0,0],[0,0,1],[1,1,0]] ; Output: 2</code><br>Explanation: After flipping values in the first two columns, the last two rows have equal values.</p><p><strong>Note:</strong></p><ul><li><code>1 &lt;= matrix.length &lt;= 300</code></li><li><code>1 &lt;= matrix[i].length &lt;= 300</code></li><li>All <code>matrix[i]</code>.length’s are equal</li><li><code>matrix[i][j]</code> is <code>0</code> or <code>1</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p>This problem is essentially wanting us to find rows with <em><strong>same</strong></em> or <em><strong>contrary</strong></em> patterns. For example,<br><img src="explanation.png" width="80%" height="80%"></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxEqualRowsAfterFlips</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// key: pattern; value: number of rows have that pattern</span></span><br><span class="line">  Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span>[] row: matrix) &#123;</span><br><span class="line">    StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    StringBuilder sb2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n: row) &#123;</span><br><span class="line">      sb1.append(n);</span><br><span class="line">      sb2.append(<span class="number">1</span> - n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String s1 = sb1.toString();</span><br><span class="line">    String s2 = sb2.toString();</span><br><span class="line"></span><br><span class="line">    map.put(s1, map.getOrDefault(s1, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    map.put(s2, map.getOrDefault(s2, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> v: map.values()) res = Math.max(res, v);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1072-flip-columns-for-maximum-number-of-equal-rows&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1072-flip-columns-for-maximum-number-of-equal-rows&quot;&gt;&lt;/a&gt; LeetCode Q 1072 - Flip Columns For Maximum Number of Equal Rows&lt;/h1&gt;
&lt;p&gt;Given a matrix consisting of &lt;code&gt;0s&lt;/code&gt; and &lt;code&gt;1s&lt;/code&gt;, we may choose any number of columns in the matrix and flip every cell in that column.  Flipping a cell changes the value of that cell from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; or from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.&lt;br&gt;
Return the maximum number of rows that have all values equal after some number of flips.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: [[0,1],[1,1]] ; Output: 1&lt;/code&gt;&lt;br&gt;
Explanation: After flipping no values, 1 row has all values equal.&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: [[0,1],[1,0]] ; Output: 2&lt;/code&gt;&lt;br&gt;
Explanation: After flipping values in the first column, both rows have equal values.&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: [[0,0,0],[0,0,1],[1,1,0]] ; Output: 2&lt;/code&gt;&lt;br&gt;
Explanation: After flipping values in the first two columns, the last two rows have equal values.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= matrix.length &amp;lt;= 300&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= matrix[i].length &amp;lt;= 300&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All &lt;code&gt;matrix[i]&lt;/code&gt;.length’s are equal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matrix[i][j]&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Insufficient Nodes in Root to Leaf Paths</title>
    <link href="http://yoursite.com/2019/08/15/leetcodeQ1080/"/>
    <id>http://yoursite.com/2019/08/15/leetcodeQ1080/</id>
    <published>2019-08-15T15:54:13.000Z</published>
    <updated>2019-08-15T16:06:42.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1080-insufficient-nodes-in-root-to-leaf-paths"><a class="markdownIt-Anchor" href="#leetcode-q-1080-insufficient-nodes-in-root-to-leaf-paths"></a> LeetCode Q 1080 - Insufficient Nodes in Root to Leaf Paths</h1><p>Given the root of a binary tree, consider all root to leaf paths: paths from the root to any leaf.  (A leaf is a node with no children.)<br>A node is <strong>insufficient</strong> if every such root to leaf path intersecting this node has sum strictly less than limit.<br>Delete all insufficient nodes simultaneously, and return the root of the resulting binary tree.</p><p><strong>Example 1:</strong><br>Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1<br>Output: [1,2,3,4,null,null,7,8,9,null,14]<br><strong>Example 2:</strong><br>Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22<br>Output: [5,4,8,11,null,17,4,7,null,null,null,5]<br><strong>Example 3:</strong><br>Input: root = [1,2,-3,-5,null,4,null], limit = -1<br>Output: [1,null,-3,4]</p><p><strong>Note:</strong></p><ul><li>The given tree will have between 1 and 5000 nodes.</li><li><code>-10^5 &lt;= node.val &lt;= 10^5</code></li><li><code>-10^9 &lt;= limit &lt;= 10^9</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">sufficientSubset</span><span class="params">(TreeNode root, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dfs(root, limit, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bottom-up dfs</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> TreeNode <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> limit, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// boundary case</span></span><br><span class="line">  <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// encounter a leaf</span></span><br><span class="line">  <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> root.val + sum &lt; limit ? <span class="keyword">null</span> : root;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  root.left = dfs(root.left, limit, sum + root.val);</span><br><span class="line">  root.right = dfs(root.right, limit, sum + root.val);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">return</span> root; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1080-insufficient-nodes-in-root-to-leaf-paths&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1080-insufficient-nodes-in-root-to-leaf-paths&quot;&gt;&lt;/a&gt; LeetCode Q 1080 - Insufficient Nodes in Root to Leaf Paths&lt;/h1&gt;
&lt;p&gt;Given the root of a binary tree, consider all root to leaf paths: paths from the root to any leaf.  (A leaf is a node with no children.)&lt;br&gt;
A node is &lt;strong&gt;insufficient&lt;/strong&gt; if every such root to leaf path intersecting this node has sum strictly less than limit.&lt;br&gt;
Delete all insufficient nodes simultaneously, and return the root of the resulting binary tree.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1&lt;br&gt;
Output: [1,2,3,4,null,null,7,8,9,null,14]&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;
Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22&lt;br&gt;
Output: [5,4,8,11,null,17,4,7,null,null,null,5]&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;br&gt;
Input: root = [1,2,-3,-5,null,4,null], limit = -1&lt;br&gt;
Output: [1,null,-3,4]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The given tree will have between 1 and 5000 nodes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^5 &amp;lt;= node.val &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^9 &amp;lt;= limit &amp;lt;= 10^9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lexicographical Numbers</title>
    <link href="http://yoursite.com/2019/08/15/leetcodeQ386/"/>
    <id>http://yoursite.com/2019/08/15/leetcodeQ386/</id>
    <published>2019-08-15T15:42:16.000Z</published>
    <updated>2019-08-15T15:54:23.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-386-lexicographical-numbers"><a class="markdownIt-Anchor" href="#leetcode-q-386-lexicographical-numbers"></a> LeetCode Q 386 - Lexicographical Numbers</h1><p>Given an integer <code>n</code>, return <code>1 - n</code> in lexicographical order.<br>For example, given <code>13</code>, return: <code>[1,10,11,12,13,2,3,4,5,6,7,8,9]</code>.<br>Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><h3 id="solution-1-sort-onlogn"><a class="markdownIt-Anchor" href="#solution-1-sort-onlogn"></a> Solution 1: Sort O(nlogn)</h3><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">lexicalOrder</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) list.add(i);</span><br><span class="line"></span><br><span class="line">  Collections.sort(list, (a, b) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(a).compareTo(String.valueOf(b));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="solution-2-dfs-on"><a class="markdownIt-Anchor" href="#solution-2-dfs-on"></a> Solution 2: DFS O(n)</h3><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">lexicalOrder</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; n) <span class="keyword">break</span>;</span><br><span class="line">    dfs(n, i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> currNum)</span> </span>&#123;</span><br><span class="line">  res.add(current);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currNum * <span class="number">10</span> + i &gt; n) <span class="keyword">break</span>;</span><br><span class="line">    dfs(n, currNum * <span class="number">10</span> + i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-386-lexicographical-numbers&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-386-lexicographical-numbers&quot;&gt;&lt;/a&gt; LeetCode Q 386 - Lexicographical Numbers&lt;/h1&gt;
&lt;p&gt;Given an integer &lt;code&gt;n&lt;/code&gt;, return &lt;code&gt;1 - n&lt;/code&gt; in lexicographical order.&lt;br&gt;
For example, given &lt;code&gt;13&lt;/code&gt;, return: &lt;code&gt;[1,10,11,12,13,2,3,4,5,6,7,8,9]&lt;/code&gt;.&lt;br&gt;
Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Shifting Letters</title>
    <link href="http://yoursite.com/2019/08/15/leetcodeQ848/"/>
    <id>http://yoursite.com/2019/08/15/leetcodeQ848/</id>
    <published>2019-08-15T15:32:24.000Z</published>
    <updated>2019-08-15T15:40:58.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-848-shifting-letters"><a class="markdownIt-Anchor" href="#leetcode-q-848-shifting-letters"></a> LeetCode Q 848 - Shifting Letters</h1><p>We have a string <code>S</code> of lowercase letters, and an integer array shifts.<br>Call the shift of a letter, the next letter in the alphabet, (wrapping around so that <code>'z'</code> becomes <code>'a'</code>).<br>For example, <code>shift('a') = 'b'</code>, <code>shift('t') = 'u'</code>, and <code>shift('z') = 'a'</code>.<br>Now for each <code>shifts[i] = x</code>, we want to shift the first <em>i+1</em> letters of <code>S</code>, <code>x</code> times.<br>Return the final string after all such shifts to <code>S</code> are applied.</p><p><strong>Example 1:</strong> <code>Input: S = &quot;abc&quot;, shifts = [3,5,9]</code> ; <code>Output: &quot;rpl&quot;</code><br>Explanation:<br>We start with “abc”.<br>After shifting the first 1 letters of S by 3, we have “dbc”.<br>After shifting the first 2 letters of S by 5, we have “igc”.<br>After shifting the first 3 letters of S by 9, we have “rpl”, the answer.</p><p><strong>Note:</strong></p><ul><li><code>1 &lt;= S.length = shifts.length &lt;= 20000</code></li><li><code>0 &lt;= shifts[i] &lt;= 10 ^ 9</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p><strong><font color="tomato">Key Point:</font></strong><br>When accumulating the shift numbers, to avoid <strong>Integer Overflow</strong>, we store mod value in <code>shifts</code>.</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">shiftingLetters</span><span class="params">(String S, <span class="keyword">int</span>[] shifts)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = shifts.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    shifts[i] += shifts[i + <span class="number">1</span>];</span><br><span class="line">    shifts[i] %= <span class="number">26</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">char</span>[] chs = S.toCharArray();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    chs[i] = (<span class="keyword">char</span>)((chs[i] - <span class="string">'a'</span> + shifts[i]) % <span class="number">26</span> + <span class="string">'a'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> String(chs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-848-shifting-letters&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-848-shifting-letters&quot;&gt;&lt;/a&gt; LeetCode Q 848 - Shifting Letters&lt;/h1&gt;
&lt;p&gt;We have a string &lt;code&gt;S&lt;/code&gt; of lowercase letters, and an integer array shifts.&lt;br&gt;
Call the shift of a letter, the next letter in the alphabet, (wrapping around so that &lt;code&gt;&#39;z&#39;&lt;/code&gt; becomes &lt;code&gt;&#39;a&#39;&lt;/code&gt;).&lt;br&gt;
For example, &lt;code&gt;shift(&#39;a&#39;) = &#39;b&#39;&lt;/code&gt;, &lt;code&gt;shift(&#39;t&#39;) = &#39;u&#39;&lt;/code&gt;, and &lt;code&gt;shift(&#39;z&#39;) = &#39;a&#39;&lt;/code&gt;.&lt;br&gt;
Now for each &lt;code&gt;shifts[i] = x&lt;/code&gt;, we want to shift the first &lt;em&gt;i+1&lt;/em&gt; letters of &lt;code&gt;S&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; times.&lt;br&gt;
Return the final string after all such shifts to &lt;code&gt;S&lt;/code&gt; are applied.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: S = &amp;quot;abc&amp;quot;, shifts = [3,5,9]&lt;/code&gt; ; &lt;code&gt;Output: &amp;quot;rpl&amp;quot;&lt;/code&gt;&lt;br&gt;
Explanation:&lt;br&gt;
We start with “abc”.&lt;br&gt;
After shifting the first 1 letters of S by 3, we have “dbc”.&lt;br&gt;
After shifting the first 2 letters of S by 5, we have “igc”.&lt;br&gt;
After shifting the first 3 letters of S by 9, we have “rpl”, the answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= S.length = shifts.length &amp;lt;= 20000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= shifts[i] &amp;lt;= 10 ^ 9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Distant Barcodes</title>
    <link href="http://yoursite.com/2019/08/15/leetcodeq1054/"/>
    <id>http://yoursite.com/2019/08/15/leetcodeq1054/</id>
    <published>2019-08-15T14:53:35.000Z</published>
    <updated>2019-08-15T15:32:28.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1054-distant-barcodes"><a class="markdownIt-Anchor" href="#leetcode-q-1054-distant-barcodes"></a> LeetCode Q 1054 - Distant Barcodes</h1><p>In a warehouse, there is a row of barcodes, where the <em>i-th</em> barcode is <code>barcodes[i]</code>.<br>Rearrange the barcodes so that <strong>no two adjacent barcodes are equal</strong>.  You may return any answer, and it is guaranteed an answer exists.</p><p><strong>Example 1:</strong> <code>Input: [1,1,1,2,2,2] ; Output: [2,1,2,1,2,1]</code><br><strong>Example 2:</strong> <code>Input: [1,1,1,1,2,2,3,3] ; Output: [1,3,1,3,2,1,2,1]</code></p><p><strong>Note:</strong></p><ul><li><code>1 &lt;= barcodes.length &lt;= 10000</code></li><li><code>1 &lt;= barcodes[i] &lt;= 10000</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><ul><li>Use a <em>map</em> to count the times of different barcodes appear.</li><li>Use a <em>priority queue</em> which stores pairs of barcode and its appearance times, and the <em>priority queue</em> is sorted according to appearance times in an DESC order.</li><li>While the <em>pq</em> is not empty, do the iteration. Each time we pull two elements from the pq, add these two barcode to the result array, then update their appearance times by minus one. If the appearance time is still bigger than zero, we offer this barcode pair to the <em>pq</em> again.</li></ul><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] rearrangeBarcodes(<span class="keyword">int</span>[] barcodes) &#123;</span><br><span class="line">  Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> bc: barcodes) </span><br><span class="line">    map.put(bc, map.getOrDefault(bc, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  Queue&lt;<span class="keyword">int</span>[]&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; (b[<span class="number">1</span>] - a[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> key: map.keySet())</span><br><span class="line">    pq.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;key, map.get(key)&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[barcodes.length]; <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">    </span><br><span class="line">    List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span> &amp;&amp; !pq.isEmpty(); k++) &#123;</span><br><span class="line">      <span class="keyword">int</span>[] curr = pq.poll();</span><br><span class="line">      res[index++] = curr[<span class="number">0</span>];</span><br><span class="line">      map.put(curr[<span class="number">0</span>], map.get(curr[<span class="number">0</span>]) - <span class="number">1</span>);</span><br><span class="line">      temp.add(curr[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n: temp) &#123;</span><br><span class="line">      <span class="keyword">if</span> (map.get(n) &gt; <span class="number">0</span>) </span><br><span class="line">        pq.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;n, map.get(n)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pq.isEmpty()) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1054-distant-barcodes&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1054-distant-barcodes&quot;&gt;&lt;/a&gt; LeetCode Q 1054 - Distant Barcodes&lt;/h1&gt;
&lt;p&gt;In a warehouse, there is a row of barcodes, where the &lt;em&gt;i-th&lt;/em&gt; barcode is &lt;code&gt;barcodes[i]&lt;/code&gt;.&lt;br&gt;
Rearrange the barcodes so that &lt;strong&gt;no two adjacent barcodes are equal&lt;/strong&gt;.  You may return any answer, and it is guaranteed an answer exists.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: [1,1,1,2,2,2] ; Output: [2,1,2,1,2,1]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: [1,1,1,1,2,2,3,3] ; Output: [1,3,1,3,2,1,2,1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= barcodes.length &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= barcodes[i] &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Study Notes - SQL &amp; MySQL &amp; MyBatis (2)</title>
    <link href="http://yoursite.com/2019/08/14/sql-notes-3/"/>
    <id>http://yoursite.com/2019/08/14/sql-notes-3/</id>
    <published>2019-08-14T16:17:35.000Z</published>
    <updated>2019-08-14T20:13:49.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> MySQL</h3><p><font color="mediumspringgreen"><strong><a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL</a></strong></font> is an open-source relational database management system (RDBMS). It is popular used in many websites. <strong>Java JDBC</strong> provides a standard interface to interact with any relational databases. In this post, I will introduce how to use <strong>JDBC</strong> to interact with <strong>MySQL</strong> databases.</p><a id="more"></a><h4 id="font-colordodgerblue1-what-is-jdbcfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue1-what-is-jdbcfont"></a> <font color="dodgerblue">1. What is JDBC?</font></h4><p><strong>JDBC</strong> API provides a standard interface for interacting with any relational database management systems (RDBMS). It consists of the following main components:</p><ul><li><strong><font color="MEDIUMSLATEBLUE">JDBC Driver</font></strong>: a set of Java classes that implement JDBC interfaces for interacting with database. It translates JDBC calls into MySQL specificcalss and sends the calls directly to a specific database. Almost all database vendors provide JDBC drivers. E.g. <code>com.mysql.cj.jdbc.Driver</code>.</li><li><strong><font color="MEDIUMSLATEBLUE">Connection</font></strong>: the most important component of JDBC. In a Java application, we first <em>load a <strong>JDBC Driver</strong></em> and then <em>establist a connection to the database</em>. Through the <strong>Connection object</strong>, we can interact with the database e.g., <em>creating a <strong>Statement</strong> to execute <strong>SQL queries</strong> against tables.</em> More than one connection can be opened to a database at a time.</li><li><strong><font color="MEDIUMSLATEBLUE">Statement</font></strong>: to <em>execute a SQL query, e.g. SELECT, INSERT, UPDATE, DELETE</em>, we need a <strong>Statement object</strong>. <strong>Statement ojbect</strong> is created through the <strong>Connection object</strong>. JDBC provides several types of statements for different purposes such as <strong>PreparedStatement, CallableStatement</strong>.</li><li><strong><font color="MEDIUMSLATEBLUE">ResultSet</font></strong>: After querying data from the database, we get a <strong>ResultSet object</strong>. The <strong>ResultSet object</strong> provides a set of API allowing us to traverse result of the query.</li></ul><p><font color="MEDIUMTURQUOISE">The typical flow of using JDBC is as follows:</font></p><ul><li>Load the <strong>JDBC Driver</strong> and create a <strong>connection</strong> to the database;</li><li>Create a <strong>Statement</strong> and execute the <strong>query</strong> to get a <strong>ResultSet</strong>;</li><li>Traverse and process the <strong>ResultSet</strong>;</li><li>Close the <strong>ResultSet</strong>, <strong>Statement</strong> and <strong>Connection</strong>.</li></ul><img src="jdbc_conn_flow.png" width="70%" height="70%">This image is from <a href="http://www.mysqltutorial.org/jdbc-overview/" target="_blank" rel="noopener">source</a><h4 id="font-colordodgerblue2-use-mysql-workbench-to-create-rdbmsfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue2-use-mysql-workbench-to-create-rdbmsfont"></a> <font color="dodgerblue">2. Use MySQL WorkBench to create RDBMS</font></h4><h4 id="font-colordodgerblue3-connect-to-mysql-using-jdbc-driverfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue3-connect-to-mysql-using-jdbc-driverfont"></a> <font color="dodgerblue">3. Connect to MySQL Using JDBC Driver</font></h4><ul><li>To avoid hard coding database parameters in the code, use a Java properties file to store them.</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL DB parameters</span></span><br><span class="line"><span class="attr">user</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">pw</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3306/db_name?useUnicode=true&amp;characterEncoding=utf8</span></span><br></pre></td></tr></table></figure><ul><li><p>Import three classes, <strong>SQLException</strong>, <strong>DriverManager</strong>, and <strong>Connection</strong> from <code>java.sql.*</code> package.</p></li><li><p>Create a class for handling connection creation. Call the <code>getConnection()</code> method of the <code>DriverManager</code> class and get the Connection object.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (conn != <span class="keyword">null</span>) conn.close();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">  System.out.println(ex.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue4-query-data-from-mysql-using-jdbcfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue4-query-data-from-mysql-using-jdbcfont"></a> <font color="dodgerblue">4. Query data from MySQL using JDBC</font></h4><ul><li>To query data from MySQL, first need to establish a connection to MySQL using Connection object.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure><ul><li>Or we can develop a utility class to handle the connection.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = MySQLJDBCUtil.getConnection();</span><br></pre></td></tr></table></figure><ul><li>Then, create a Statement object. For querying data, we just need to use the Statement object as follows:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = conn.getStatement();</span><br></pre></td></tr></table></figure><ul><li>Next, we can use the created Statement object to execute MySQL queries like the following:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"SELECT * FROM `tb_product`"</span>;</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br></pre></td></tr></table></figure><ul><li>Use the methods provided by ResultSet object to traverse and process data.<ul><li><code>next()</code> method returns true and move ot the next row in the ResultSet if there are rows available, otherwist it returns false.</li><li><code>getDataType()</code>method: get column data of the current row. Pass the column name or column index.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">  System.out.println(rs.getString(<span class="string">"product_name"</span>) + <span class="string">"\t"</span> + rs.getString(<span class="string">"product_desc"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Last, close the ResultSet and Statement objects when completing traversing the data by calling <code>close()</code> method.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  rs.close();</span><br><span class="line">  stmt.close();</span><br><span class="line">&#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>From Java 7, there is another nice statement called <code>try-catch-resources</code>. It is automatically calls the <code>close()</code> method of Connection object once program finishes. So we don’t have to explicitly do it.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String sql = String sql = <span class="string">"SELECT * FROM `tb_product`"</span>;</span><br><span class="line"><span class="keyword">try</span> (Connection conn = MySQLJDBCUtil.getConnection();</span><br><span class="line"> Statement stmt = conn.getStatement();</span><br><span class="line"> ResultSet rs = stmt.executeQuery(sql)) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// loop through the result set</span></span><br><span class="line">  <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">  System.out.println(rs.getString(<span class="string">"product_name"</span>) + <span class="string">"\t"</span> + rs.getString(<span class="string">"product_desc"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue5-update-data-into-table-using-jdbc-preparedstatementfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue5-update-data-into-table-using-jdbc-preparedstatementfont"></a> <font color="dodgerblue">5. Update data into table using JDBC PreparedStatement</font></h4><p><strong><font color="MEDIUMTURQUOISE">PreparedStatement</font> interface</strong></p><p>This interface extends the <strong>Statement</strong> interface. We can use any statement such as <code>SELECT</code>, <code>INSERT</code>, <code>DELETE</code>, <code>UPDATE</code> with this interface. It provides some more advaced features as follows:</p><ul><li>Add parameters into SQL statement using placeholders in the form of <strong>question marks(?)</strong>. This helps avoid SQL injection.</li><li>Reuse the PreparedStatement with new parameters in case you need to execute the SQL statement multiple times with different parameters.</li><li>Help increase performance of executed statement by precompiling the SQL statment.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String sqlUpdate = <span class="string">"UPDATE tb_product SET product_name = ?"</span> + </span><br><span class="line">                   <span class="string">"WHERE product_id = ?"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> (<span class="comment">// Step 1: get Connection Object</span></span><br><span class="line">       Connection conn = MySQLJDBCUtil.getConnection();</span><br><span class="line">       <span class="comment">// Step 2: get PreparedStatement Object</span></span><br><span class="line">       PreparedStatement pstmt = conn.getPreparedStatement(sqlUpdate)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 3: supply values for placeholders one-by-one using setYYY() method where YYY is the datatype of the placeholder.</span></span><br><span class="line">    String product_name = <span class="string">"phone"</span>;</span><br><span class="line">    <span class="keyword">int</span> product_id = <span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line">    pstmt.setString(<span class="number">1</span>, product_name);</span><br><span class="line">    pstmt.setInt(<span class="number">2</span>, product_id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 4: execute update</span></span><br><span class="line">    <span class="keyword">int</span> rowAffected = pstmt.executeUpdate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reuse pstmt</span></span><br><span class="line">    String product_name = <span class="string">"laptop"</span>;</span><br><span class="line">    <span class="keyword">int</span> product_id = <span class="number">10002</span>;</span><br><span class="line"></span><br><span class="line">    pstmt.setString(<span class="number">1</span>, product_name);</span><br><span class="line">    pstmt.setInt(<span class="number">2</span>, product_id);</span><br><span class="line">    <span class="keyword">int</span> rowAffected = pstmt.executeUpdate();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue6-insert-data-into-table-using-jdbc-preparedstatementfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue6-insert-data-into-table-using-jdbc-preparedstatementfont"></a> <font color="dodgerblue">6. Insert data into table using JDBC PreparedStatement</font></h4><p><strong>Example</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span> <span class="params">(String productName, String productDesc)</span> </span>&#123;</span><br><span class="line">  ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">int</span> productId = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  String sql = <span class="string">"INSERT INTO tb_product (product_name, product_desc)"</span> + </span><br><span class="line">               <span class="string">"VALUES (?, ?)"</span>;</span><br><span class="line">  <span class="keyword">try</span> ( <span class="comment">// get Connection Object</span></span><br><span class="line">      Connection conn = MySQLJDBCUtil.getConnection();</span><br><span class="line">      <span class="comment">// get PreparedStatement Object</span></span><br><span class="line">      PreparedStatement pstmt = conn.getPreparedStatement(sql, Statement.RETURN_GENERATED_KEYS);) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// set parameters</span></span><br><span class="line">    pstmt.setStirng(<span class="number">1</span>, <span class="string">"Computer"</span>);</span><br><span class="line">    pstmt.setStirng(<span class="number">2</span>, <span class="string">"Lenovo"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// execute sql</span></span><br><span class="line">    <span class="keyword">int</span> rowAffected = pstmt.executeUpdate();</span><br><span class="line">    <span class="keyword">if</span> (rowAffected == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// get product id</span></span><br><span class="line">      rs = pstmt.getGeneratedKeys();</span><br><span class="line">      <span class="keyword">if</span> (rs.next()) productId = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">      System.out.println(ex.getMessage());</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(rs != <span class="keyword">null</span>)  rs.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> productId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue6-jdbc-transactionfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue6-jdbc-transactionfont"></a> <font color="dodgerblue">6. JDBC Transaction</font></h4><p><strong><font color="MEDIUMSLATEBLUE">What is transaction &amp; Why Transaction</font></strong></p><p>A <strong>Transaction</strong> is a unit of work that you want to treat as <em>“a whole”</em>. It has to either happen in full or not at all. A classical example is transfering money from one bank account to another. First withdraw the amount from the source account, and then deposit it to the destination account. The operation has to succeed in full. If get failed in one step, the monry will be lost!</p><p><strong>Transaction</strong> in db has two main purposes:</p><ul><li>To provide <strong>reliable</strong> units of work that <em>allow correct recovery from failures</em> and keep a database consistent even in cases of system failure, when execution stops (completely or partially) and many operations upon a database remain uncompleted, with unclear status.</li><li>To provide <strong>isolation</strong> between programs accessing a database <strong>concurrently</strong>. If this isolation is not provided, the programs’ outcomes are possibly erroneous.</li></ul><p>A <strong>transaction</strong> in a db must maintain <strong>A</strong>tomicity, <strong>C</strong>onsistency, <strong>I</strong>solation, and <strong>D</strong>urability (<strong>ACID</strong>).</p><p><strong><font color="MEDIUMSLATEBLUE">How to commit and rollback a transaction in JDBC</font></strong></p><ul><li>Setting auto-commit mode: by default it is set to <em>true</em>. So the changes will be applied to the database once the statement successfully executed. In case, we want to control when to commit the transaction, we need to do first set auto-commit to be <em>false</em>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ul><li>Committing and rolling back a transaction: once the auto-commit mode is set to false, we can commit or rollback the transaction.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Connection conn = DriverManager.getConnection(url, user, password);) &#123;</span><br><span class="line">  conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">  <span class="comment">//operations e.g insert, update, delete</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// commit the transaction</span></span><br><span class="line">  conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">  conn.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mysql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mysql&quot;&gt;&lt;/a&gt; MySQL&lt;/h3&gt;
&lt;p&gt;&lt;font color=&quot;mediumspringgreen&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.mysql.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL&lt;/a&gt;&lt;/strong&gt;&lt;/font&gt; is an open-source relational database management system (RDBMS). It is popular used in many websites. &lt;strong&gt;Java JDBC&lt;/strong&gt; provides a standard interface to interact with any relational databases. In this post, I will introduce how to use &lt;strong&gt;JDBC&lt;/strong&gt; to interact with &lt;strong&gt;MySQL&lt;/strong&gt; databases.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Study Notes - SQL &amp; MySQL &amp; MyBatis (1)</title>
    <link href="http://yoursite.com/2019/08/12/sql-nodes-2/"/>
    <id>http://yoursite.com/2019/08/12/sql-nodes-2/</id>
    <published>2019-08-12T17:58:03.000Z</published>
    <updated>2019-08-14T16:17:59.388Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sql"><a class="markdownIt-Anchor" href="#sql"></a> SQL</h3><p><font color="STEELBLUE"><strong>Structured Query Language (SQL)</strong></font> is a standard Database language which is used to create, maintain and retrieve the <strong>ralational database</strong>. It is very useful in handling <strong>structured data</strong> where there are <strong>relations</strong> between different entities/variables of the data.</p><h4 id="font-colordodgerblue1-what-is-relational-databasefont"><a class="markdownIt-Anchor" href="#font-colordodgerblue1-what-is-relational-databasefont"></a> <font color="dodgerblue">1. What is Relational Database</font></h4><p style="background-color: cornsilk"><b>Definition of <font color="MEDIUMSLATEBLUE">RDB</font> from Wikipedia:</b> A <b>relational database</b> is a digital database based on <b>relational model</b> of data. A software system used to maintain relational databases is a relational database management system (RDBMS). Virtually all relational database systems use SQL (Structured Query Language) for querying and maintaining the database.</p><a id="more"></a><p style="background-color: cornsilk"><b>Definition of <font color="MEDIUMSLATEBLUE">Relational Model</font> from Wikipedia:</b> This model organizes data into one or more <b>tables</b> of columns and rows, with a <b>unique key</b> identifying each row. Rows are also called <b>recodes (tuples)</b>. Columns are also called attributes. Generally, each table/relation represents one "entity type". The rows represent instances of that type of entity and the columns representing values attributed to that instance.</p><p>Therefore, <strong><font color="royalblue">relational database means the data is stored as well as retrieved in the form of relations (tables).</font></strong></p><h4 id="font-colordodgerblue2-important-terminologiesfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue2-important-terminologiesfont"></a> <font color="dodgerblue">2. Important terminologies</font></h4><ul><li><strong><font color="MEDIUMSLATEBLUE">Keys</font></strong>: Each row in a table has its own <em>unique key</em>. Rows in a table can be linked to rows in other tables by adding a column for the <em>unique key</em> of the linked row (known as <em>foreign key</em>). Most physical implementations have a unique <em>primary key (PK)</em> for each row in a table. It is the key that the system is uses primarily for accessing the table.<ul><li><em><font color="MEDIUMSLATEBLUE">superkey</font></em>: a set of attributes of a relation schema upon which all attributes of the schema are functionally dependent. No two rows can have the same value of super key attributes.</li><li><em><font color="MEDIUMSLATEBLUE">candidate key</font></em>: minimal superkey.</li><li><em><font color="MEDIUMSLATEBLUE">primary key</font></em>: one of the candidate keys. One of the candidate keys is selected as most important and becomes the primary key. There cannot be more than one pk in a table.</li><li><em><font color="MEDIUMSLATEBLUE">foreign key</font></em>: a field (or collectiosn of fields) in one table that uniquely identifies a row of another table.</li></ul></li><li><strong><font color="MEDIUMSLATEBLUE">Attributes</font></strong>: properties that define a relation.</li><li><strong><font color="MEDIUMSLATEBLUE">Tuple</font></strong>: each row in the relation.</li><li><strong><font color="MEDIUMSLATEBLUE">Degree</font></strong>: the number of attributes in the relation.</li><li><strong><font color="MEDIUMSLATEBLUE">Cardinality</font></strong>: the number of tuples in a relation.</li><li><strong><font color="MEDIUMSLATEBLUE">Column</font></strong>: the set of values for a particular attribute.</li></ul><h4 id="font-colordodgerblue3-queries-of-rdbfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue3-queries-of-rdbfont"></a> <font color="dodgerblue">3. Queries of RDB</font></h4><ul><li><strong><font color="MEDIUMSLATEBLUE">Data Definition Langurage (DDL)</font></strong>: It is used to <strong>define</strong> the structure of the database. E.g. <strong><font>CREATE, ALTER, DROP and RENAME</font></strong><ul><li><strong>CREATE</strong>: create databases or its objects (like table).</li><li><strong>DROP</strong>: delete objects from the database.</li><li><strong>ALTER</strong>: alter the structure of the database.</li><li><strong>RENAME</strong>: rename an object existing in the database.</li></ul></li><li><strong><font color="MEDIUMSLATEBLUE">Data Manipulation Langurage (DML)</font></strong>: It is used to <strong>manipulate</strong> data in the relations. E.g. <strong><font>INSERT, UPDATE, DELETE</font></strong></li><li><strong><font color="MEDIUMSLATEBLUE">Data Query Langurage (DQL)</font></strong>: It is used to <strong>extract</strong> the data from the relations. E.g. <strong><font>INSERT, UPDATE, DELETE</font></strong></li><li><strong><font color="MEDIUMSLATEBLUE">Data Control Langurage (DCL)</font></strong>: includs commands such as <strong><font>GRANT, REVOKE</font></strong> which mainly deals with the rights and other controls of the database system.<ul><li><strong>GRANT</strong>: gives user’s access privileges to database.</li><li><strong>REVOKE</strong>: withdraw use’s access privileges give by using the <strong>GRANT</strong> command.</li></ul></li><li><strong><font color="MEDIUMSLATEBLUE">Transctional Control Language (TCL)</font></strong>: TCL commands deals with the transction within the database.<ul><li><strong>COMMIT</strong>: commits a transaction.</li><li><strong>ROLLBACK</strong>: rollbacks a transaction in case of any error occurs.</li></ul></li></ul><h4 id="font-colordodgerblue4-select-statements-some-clausesfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue4-select-statements-some-clausesfont"></a> <font color="dodgerblue">4. SELECT Statements &amp; Some clauses</font></h4><h5 id="font-colormediumslateblue41-select-statementfont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue41-select-statementfont"></a> <font color="MEDIUMSLATEBLUE">4.1 SELECT Statement</font></h5><p>A generic query to retrieve from a RDB is:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] attribute_List <span class="keyword">FROM</span> R1, R2,...RM</span><br><span class="line">[<span class="keyword">WHERE</span> condition]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> (<span class="keyword">attributes</span>)][<span class="keyword">HAVING</span> condition]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> (<span class="keyword">attributes</span>)][<span class="keyword">DESC</span>]</span><br><span class="line">[<span class="keyword">LIMIT</span>] limit_number;</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue42-aggregation-functionsfont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue42-aggregation-functionsfont"></a> <font color="MEDIUMSLATEBLUE">4.2 Aggregation functions</font></h5><p><strong>Aggregation functions</strong>: used to perform mathematical operations on data values of a relation. Some of the commonly used ones in SQL are:</p><ul><li><strong><font color="MEDIUMTURQUOISE">COUNT</font></strong>: count the number of rows in a relation. e.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span> (stu_phone) <span class="keyword">FROM</span> tb_student;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">SUM</font></strong>: add the values of an attribute in a relation. e.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span> (stu_age) <span class="keyword">FROM</span> tb_student;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">MAX, MIN, AVG</font></strong></li></ul><h5 id="font-colormediumslateblue43-group-by-clausefont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue43-group-by-clausefont"></a> <font color="MEDIUMSLATEBLUE">4.3 GROUP BY clause</font></h5><p><strong><font color="MEDIUMTURQUOISE">GROUP BY clause</font></strong>: arrange identical data into groups with the help of some functions. <strong>Key points</strong>:</p><ul><li><strong>GROUP BY</strong> is used with the <strong>SELECT</strong> statement;</li><li>Placed after the <strong>WHERE</strong> clause;</li><li>Placed before <strong>ORDER BY</strong> clause if used any.</li></ul><p><strong>Syntax</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, function_name(column2)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> condition</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column1, column2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1, column2;</span><br><span class="line"></span><br><span class="line">fuction_name: Name of the function used, e.g. SUM(), AVG().</span><br></pre></td></tr></table></figure><p><strong>Example</strong>:</p><ul><li><strong>GROUP BY single column</strong>: place all the rows with the same value of only a particular column in one group. E.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_name, <span class="keyword">SUM</span>(SALARY) <span class="keyword">FROM</span> tb_employee</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> employee_name;</span><br></pre></td></tr></table></figure><ul><li><strong>GROUP BY multiple columns</strong>: place all the rows with the same values of all columns in one group. E.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> stu_subject, stu_year, <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> stu_subject, stu_year;</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue44-having-clausefont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue44-having-clausefont"></a> <font color="MEDIUMSLATEBLUE">4.4 HAVING clause</font></h5><p><strong><font color="MEDIUMTURQUOISE">HAVING clause</font></strong>: place conditions to decide which group will be the part of final result-set.</p><p><strong><font color="tomato">Difference between HAVING and WHERE clause</font></strong><br><strong>HAVING</strong> is used to specify a condition for a group or an aggregate function used in <strong>SELELCT</strong> statement. The <strong>WHERE</strong> clause selects before grouping. The <strong>HAVING</strong> clause selects rows after grouping. Unlike <strong>HAVING</strong> clause, the <strong>WHERE</strong> clause cannot contain aggregate functions. E.g.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_name, <span class="keyword">SUM</span>(employee_salary) <span class="keyword">FROM</span> tb_employee</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> employee_name</span><br><span class="line"><span class="keyword">HAVING</span> employee_salary &gt;= <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> stu_subject, stu_year, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> c <span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> stu_subject, stu_year</span><br><span class="line"><span class="keyword">HAVING</span> c <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue45-limit-clausefont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue45-limit-clausefont"></a> <font color="MEDIUMSLATEBLUE">4.5 LIMIT clause</font></h5><p>If there are a large number of tuples satisfying the query conditions, it might be resourceful to view only a handful of them at a time. <strong>Key Point</strong> of <strong>LIMIT</strong> clause:</p><ul><li><strong>LIMIT</strong> clause is used to set an upper bound limit on the number of tuples returned by SQL.</li><li><font color="tomato">Not supported by all SQL versions</font></li><li>Can be specified using the SQL 2008 <font color="royalblue">OFFSET/FETCH/FIRST</font> clauses.</li></ul><p><strong>Example</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ALL</span> <span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> stu_id</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue46-order-by-clausefont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue46-order-by-clausefont"></a> <font color="MEDIUMSLATEBLUE">4.6 ORDER BY clause</font></h5><p>The <strong>ORDER BY</strong> in SQL is used to sort the fetched data in either ascending or descending according to one or more columns.</p><ul><li>By default <strong>ORDER BY</strong> sorts the data in <strong>ascending order</strong>.</li><li>User keyword <strong>DESC</strong> to sort the data in <strong>descending order</strong>.</li><li>Can sort according to either <strong>one column</strong> or <strong>multiple columns</strong>.</li></ul><p><strong>Example</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name <span class="keyword">ASC</span>|<span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1 <span class="keyword">ASC</span>|<span class="keyword">DESC</span>, column2 <span class="keyword">ASC</span>|<span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue46-distinct-clausefont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue46-distinct-clausefont"></a> <font color="MEDIUMSLATEBLUE">4.6 DISTINCT clause</font></h5><p><strong>DISTINCT</strong> clause is used in conjunction with <strong>SELECT</strong> keyword. It is helpful when there is need of <strong>avoiding the duplicate values</strong> in any specific columns/table. When using it, only the <strong>unique values</strong> are fetched.</p><p><strong>Example</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> stu_name <span class="keyword">FROM</span> tb_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* To fetch unique combination of rows from the whole table */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> * <span class="keyword">FROM</span> tb_student;</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue47-where-clausefont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue47-where-clausefont"></a> <font color="MEDIUMSLATEBLUE">4.7 WHERE clause</font></h5><p><strong>WHERE</strong> is used for fetching <strong>filtered data</strong> in a result set. E.g.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2 <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">operator</span> <span class="keyword">value</span>;</span><br></pre></td></tr></table></figure><p><strong>Operator</strong> includes: <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>=</code>, <code>&lt;&gt;</code>, <code>BETWEEN</code> (in an inclusive range), <code>LIKE</code> (search for a pattern), <code>IN</code> (specify multiple possible values for a column). E.g.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stu_age=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stu_id <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">% : Used to match zero or more characters. (Variable Length)</span></span><br><span class="line"><span class="comment">_ : Used to match exactly one character. (Fixed Length)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* fetch records of students where NAME starts with letter S */</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stu_name <span class="keyword">LIKE</span> <span class="string">'S%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* fetch records of students where NAME contains the patter ‘AM’</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stu_name <span class="keyword">LIKE</span> <span class="string">'%AM%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stu_age <span class="keyword">IN</span> (<span class="number">18</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stu_id <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue47-exists-keywordfont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue47-exists-keywordfont"></a> <font color="MEDIUMSLATEBLUE">4.7 EXISTS keyword</font></h5><p><strong>EXISTS</strong> contition in SQL is used to check whether the result of a correlated nested query is empty (contains no tuples) or not. The result of <strong>EXIST</strong> is a boolean value True or False. It can be used in a <strong>SELECT, UPDATE, DELETE or INSERT</strong> statment.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">  (<span class="keyword">SELECT</span> column_name(s)</span><br><span class="line">   <span class="keyword">FROM</span> table_name</span><br><span class="line">   <span class="keyword">WHERE</span> condition);</span><br></pre></td></tr></table></figure><p><strong>Example</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*with SELECT statment*/</span></span><br><span class="line"><span class="keyword">SELECT</span> fname, lname</span><br><span class="line"><span class="keyword">FROM</span> tb_customers</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_orders</span><br><span class="line">   <span class="keyword">WHERE</span> tb_customers.customer_id = tb_orders.c_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Using NOT with EXISTS*/</span></span><br><span class="line"><span class="keyword">SELECT</span> lname, fname</span><br><span class="line"><span class="keyword">FROM</span> tb_customers</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_orders</span><br><span class="line">   <span class="keyword">WHERE</span> tb_customers.customer_id = tb_orders.c_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*with DELETE statment*/</span></span><br><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span> tb_orders</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_customers</span><br><span class="line">   <span class="keyword">WHERE</span> tb_customers.customer_id = tb_orders.c_id</span><br><span class="line">   <span class="keyword">AND</span> Customers.lname = <span class="string">'EZReal'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*with UPDATE statment*/</span></span><br><span class="line"><span class="keyword">UPDATE</span> tb_customers</span><br><span class="line"><span class="keyword">SET</span> lname = <span class="string">'Lux'</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_customers <span class="keyword">WHERE</span> customer_id = <span class="number">401</span>);</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue48-with-keywordfont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue48-with-keywordfont"></a> <font color="MEDIUMSLATEBLUE">4.8 WITH keyword</font></h5><p><strong>WITH</strong> clause allows you to give a sub-query block a name, which can be referenced in several places within the main SQL query.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> tb_temp (ave_val) <span class="keyword">as</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(attr1) <span class="keyword">FROM</span> <span class="keyword">table</span>),</span><br><span class="line">  <span class="keyword">SELECT</span> attr1 <span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line">  <span class="keyword">WHERE</span> table.attr1 &gt; tb_temp.ave_val;</span><br></pre></td></tr></table></figure><p>For example, the tables are shown as follows. Find all the student whose score is more than the average score of all employees.<br><img src="tb_student.png" width="80%" height="80%"></p><p><strong>SQL Query</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> tb_temp (ave_score) <span class="keyword">AS</span></span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(stu_score) <span class="keyword">FROM</span> tb_student)</span><br><span class="line">  <span class="keyword">SELECT</span> stu_name, stu_score <span class="keyword">FROM</span> tb_student</span><br><span class="line">  <span class="keyword">WHERE</span> tb_student.stu_score &gt; tb_temp.ave_score;</span><br></pre></td></tr></table></figure><p><strong>Result</strong> will be:<br><img src="result_1.png" width="60%" height="60%"></p><h5 id="font-colormediumslateblue49-join-statementfont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue49-join-statementfont"></a> <font color="MEDIUMSLATEBLUE">4.9 JOIN statement</font></h5><p><strong>JOIN</strong> statement is used to combine rows from two or more tables based on a common field between them. Different types of Joins are:</p><ul><li><strong><font color="MEDIUMTURQUOISE">INNER JOIN</font></strong>: selects all rows from the tables as long as the condition satisfies.<br><img src="inner_join.png" width="30%" height="30%"><br><strong>Syntax</strong>:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tb1.col1, tb1.col2, tb2.col1,...</span><br><span class="line"><span class="keyword">FROM</span> tb1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> tb2</span><br><span class="line"><span class="keyword">ON</span> tb1.matching_col = tb2.matching_col;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">LEFT JOIN (LEFT OUTER JOIN)</font></strong>: returns all the rows of the table on the left side of the JOIN and matching rows for the tables on the right side of JOIN. The rows for which there is no matching row on right side, the result-set will contain NULL.<br><img src="left_join.png" width="30%" height="30%"><br><strong>Syntax</strong>:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tb1.col1, tb1.col2, tb2.col1,...</span><br><span class="line"><span class="keyword">FROM</span> tb1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb2</span><br><span class="line"><span class="keyword">ON</span> tb1.matching_col = tb2.matching_col;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">RIGHT JOIN (RIGHT OUTER JOIN)</font></strong>: returns all the rows of the table on the right side of the JOIN and matching rows for the table on the left side of JOIN. The rows for which there is no matching row on the left, the result-set will contain NULL.<br><img src="right_join.png" width="30%" height="30%"><br><strong>Syntax</strong>:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tb1.col1, tb1.col2, tb2.col1,...</span><br><span class="line"><span class="keyword">FROM</span> tb1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> tb2</span><br><span class="line"><span class="keyword">ON</span> tb1.matching_col = tb2.matching_col;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">FULL JOIN</font></strong>: creates the result-set by combining result of both LEFT JOIN and RIGHT JOIN. The result-set will contain all the rows from both the tables. The rows for which there is no matching, the result-set will contain NULL values<br><img src="full_join.png" width="30%" height="30%"><br><strong>Syntax</strong>:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tb1.col1, tb1.col2, tb2.col1,...</span><br><span class="line"><span class="keyword">FROM</span> tb1</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> tb2</span><br><span class="line"><span class="keyword">ON</span> tb1.matching_col = tb2.matching_col;</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue5-ddl-statementsfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue5-ddl-statementsfont"></a> <font color="dodgerblue">5. DDL Statements</font></h4><ul><li><strong><font color="MEDIUMTURQUOISE">Crate DB</font></strong>: <code>CREATE DATABASE dbname;</code></li><li><strong><font color="MEDIUMTURQUOISE">Drop DB</font></strong>: <code>DROP DTABASE dbname</code>;</li><li><strong><font color="MEDIUMTURQUOISE">Create Table</font></strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">  column1 datatype,</span><br><span class="line">  column2 datatype,</span><br><span class="line">  ...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*create table using another table*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> new_table_name <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">SELECT</span> column1, column2,...</span><br><span class="line">  <span class="keyword">FROM</span> existing_table_name</span><br><span class="line">  <span class="keyword">WHERE</span> condition;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">DROP Table</font></strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">ALTER Table</font></strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*add column*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> (column_name_1 datatype,</span><br><span class="line"> column_name_2 datatype);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*drop column*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*modify column*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> column_name datatype;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*rename table name*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TO</span> new_table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*rename column name*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">RENAME</span>|<span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> old_name <span class="keyword">TO</span> new_name;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">Constraints</font></strong>: includes <strong>NOT NULL</strong>, <strong>UNIQUE</strong>, <strong>PRIMARY KEY</strong>, <strong>FOREIGN KEY</strong>, <strong>CHECK</strong>, <strong>DEFAULT</strong>, <strong>INDEX</strong>. E.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_product`</span> (</span><br><span class="line">  <span class="comment">/*NOT NULL, auto increment*/</span></span><br><span class="line">  <span class="string">`product_id`</span> <span class="built_in">int</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`product_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Default*/</span></span><br><span class="line">  <span class="string">`product_desc`</span> <span class="built_in">varchar</span>(<span class="number">2000</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`shop_id`</span> <span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*Unique in MySQL*/</span></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`uc_id_name`</span> <span class="keyword">UNIQUE</span> (<span class="string">`product_id`</span>, <span class="string">`product_name`</span>),</span><br><span class="line">  <span class="comment">/*or we can write it as*/</span></span><br><span class="line">  <span class="keyword">UNIQUE</span> (<span class="string">`product_name`</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*primary key*/</span></span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`product_id`</span>),</span><br><span class="line">  <span class="comment">/*PK in MySQL*/</span></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`pk_product`</span> PRIMARY <span class="keyword">KEY</span> (<span class="string">`product_id`</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*FK in MySQL*/</span></span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(<span class="string">`shop_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`tb_shop`</span>(<span class="string">`shop_id`</span>),</span><br><span class="line">  <span class="comment">/*or */</span></span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fk_product_shop`</span> (<span class="string">`shop_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_product_shop`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="string">`shop_id`</span> <span class="keyword">REFERENCES</span> <span class="string">`tb_shop`</span>(<span class="string">`shop_id`</span>)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Add PK constraint*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`tb_shop`</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`pk_shop`</span> PRIMARY <span class="keyword">KEY</span> (<span class="string">`shop_id`</span>);</span><br><span class="line"><span class="comment">/*or*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`tb_shop`</span></span><br><span class="line"><span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (<span class="string">`shop_id`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Add Unique constraint*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`tb_shop`</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`product_shop_unique`</span> (<span class="string">`shop_id`</span> <span class="keyword">ASC</span>);</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue6-dml-statementsfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue6-dml-statementsfont"></a> <font color="dodgerblue">6. DML Statements</font></h4><p><strong><font color="MEDIUMTURQUOISE">6.1 UPDATE</font></strong></p><p><strong>Syntax</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tb_name <span class="keyword">SET</span> column1 = value1, column2 = value2,...</span><br><span class="line"><span class="keyword">WHERE</span> condition;</span><br></pre></td></tr></table></figure><p><strong><font color="MEDIUMTURQUOISE">6.2 DELETE</font></strong></p><p><strong>Syntax</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_name <span class="keyword">WHERE</span> condition;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*delete all*/</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_name;</span><br><span class="line"><span class="comment">/*or*/</span></span><br><span class="line"><span class="keyword">DELETE</span> * <span class="keyword">FROM</span> tb_name;</span><br></pre></td></tr></table></figure><p><strong><font color="MEDIUMTURQUOISE">6.3 INSERT</font></strong></p><p><strong>Syntax</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_name <span class="keyword">VALUES</span> (value1, value2, value3, ...);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_name (column1, column2, column3,...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3,...);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* using SELECT in INSERT INTO Statement*/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_1 <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_2 <span class="keyword">WHERE</span> condition;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_1 (t1_column1) <span class="keyword">SELECT</span> t2_column1 <span class="keyword">FROM</span> table_2;</span><br></pre></td></tr></table></figure><a href="/2019/08/14/sql-notes-3/" title="next">next</a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sql&quot;&gt;&lt;/a&gt; SQL&lt;/h3&gt;
&lt;p&gt;&lt;font color=&quot;STEELBLUE&quot;&gt;&lt;strong&gt;Structured Query Language (SQL)&lt;/strong&gt;&lt;/font&gt; is a standard Database language which is used to create, maintain and retrieve the &lt;strong&gt;ralational database&lt;/strong&gt;. It is very useful in handling &lt;strong&gt;structured data&lt;/strong&gt; where there are &lt;strong&gt;relations&lt;/strong&gt; between different entities/variables of the data.&lt;/p&gt;
&lt;h4 id=&quot;font-colordodgerblue1-what-is-relational-databasefont&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-colordodgerblue1-what-is-relational-databasefont&quot;&gt;&lt;/a&gt; &lt;font color=&quot;dodgerblue&quot;&gt;1. What is Relational Database&lt;/font&gt;&lt;/h4&gt;
&lt;p style=&quot;background-color: cornsilk&quot;&gt;&lt;b&gt;Definition of &lt;font color=&quot;MEDIUMSLATEBLUE&quot;&gt;RDB&lt;/font&gt; from Wikipedia:&lt;/b&gt; A &lt;b&gt;relational database&lt;/b&gt; is a digital database based on &lt;b&gt;relational model&lt;/b&gt; of data. A software system used to maintain relational databases is a relational database management system (RDBMS). Virtually all relational database systems use SQL (Structured Query Language) for querying and maintaining the database.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Study Notes - SQL &amp; MySQL &amp; MyBatis</title>
    <link href="http://yoursite.com/2019/08/12/sql-notes-1/"/>
    <id>http://yoursite.com/2019/08/12/sql-notes-1/</id>
    <published>2019-08-12T17:29:21.000Z</published>
    <updated>2019-08-14T16:18:55.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p><font color="STEELBLUE"><strong>Structured Query Language (SQL)</strong></font> is a standard Database language which is used to create, maintain and retrieve the <strong>ralational database</strong>. It is very useful in handling <strong>structured data</strong> where there are <strong>relations</strong> between different entities/variables of the data. <font color="mediumspringgreen"><strong><a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL</a></strong></font> is an open-source relational database management system (RDBMS). It is popular used in many websites. <font color="mediumspringgreen"><strong><a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis</a></strong></font> is a first class <strong>persistence framework</strong> with support for the custom SQL, stored procedures and advanced mappings. MyBatis eliminates almost all of the JDBC code and manual setting of parameters and retireval of results. MyBatis can use <strong>simple XML</strong> or <strong>Annotations</strong> for configuration and map primitives, Map interfaces and Java POJOs (Plain Old Java Objects) to database records.</p><p>In this series of stuy notes, we will introduct basic knowlege of <strong>SQL</strong>, <strong>MySQL</strong>, <strong>MyBatis</strong> and how to use them.</p><ul><li><a href="/2019/08/12/sql-nodes-2/" title="SQL">SQL</a></li><li><a href="/2019/08/14/sql-notes-3/" title="MySQL">MySQL</a></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h3&gt;
&lt;p&gt;&lt;font color=&quot;STEELBLUE&quot;&gt;&lt;strong&gt;Structured
      
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Maximum of Absolute Value Expression</title>
    <link href="http://yoursite.com/2019/08/09/leetcodeQ1131/"/>
    <id>http://yoursite.com/2019/08/09/leetcodeQ1131/</id>
    <published>2019-08-09T21:30:01.000Z</published>
    <updated>2019-08-09T21:42:38.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1131-maximum-of-absolute-value-expression"><a class="markdownIt-Anchor" href="#leetcode-q-1131-maximum-of-absolute-value-expression"></a> LeetCode Q 1131 - Maximum of Absolute Value Expression</h1><p>Given two arrays of integers with equal lengths, return the maximum value of: <code>|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|</code><br>where the maximum is taken over all <code>0 &lt;= i, j &lt; arr1.length</code>.</p><p><strong>Example 1:</strong> <code>Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6] ; Output: 13</code><br><strong>Example 2:</strong> <code>Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4] ; Output: 20</code></p><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= arr1.length == arr2.length &lt;= 40000</code></li><li><code>-10^6 &lt;= arr1[i], arr2[i] &lt;= 10^6</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p>For equation <code>|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|</code>, if we remove the absolute value signal, then it has four cases regarding <code>i&gt;j</code>. They are,</p><ul><li><code>(arr1[i] + arr2[i] + i) - (arr1[j] + arr2[j] + j)</code>;</li><li><code>(arr1[i] - arr2[i] + i) - (arr1[j] - arr2[j] + j)</code>;</li><li><code>(-arr1[i] + arr2[i] + i) - (-arr1[j] + arr2[j] + j)</code>;</li><li><code>(-arr1[i] - arr2[i] + i) - (-arr1[i] - arr2[i] + j)</code>;</li></ul><p>So, we can define four arrays,</p><ul><li><code>a</code>: <code>arr1[i] + arr2[i] + i</code>;</li><li><code>b</code>: <code>arr1[i] - arr2[i] + i</code>;</li><li><code>c</code>: <code>-arr1[i] + arr2[i] + i</code>;</li><li><code>d</code>: <code>-arr1[i] - arr2[i] + i</code>;</li></ul><p>Find the maximum and minimum value in each array, get 4 candidates, and choose the largest one as the result.</p><p><strong>Code:</strong></p><figure class="highlight reasonml"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public <span class="built_in">int</span> max<span class="constructor">AbsValExpr(<span class="params">int</span>[] <span class="params">arr1</span>, <span class="params">int</span>[] <span class="params">arr2</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">int</span> n = arr1.length;</span><br><span class="line">  <span class="built_in">int</span><span class="literal">[]</span> a = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="identifier">n</span>]</span>, b = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="identifier">n</span>]</span>, c = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="identifier">n</span>]</span>, d = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="identifier">n</span>]</span>;</span><br><span class="line">  </span><br><span class="line">  for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    a<span class="literal">[<span class="identifier">i</span>]</span> = arr1<span class="literal">[<span class="identifier">i</span>]</span> + arr2<span class="literal">[<span class="identifier">i</span>]</span> + i;</span><br><span class="line">    b<span class="literal">[<span class="identifier">i</span>]</span> = arr1<span class="literal">[<span class="identifier">i</span>]</span> - arr2<span class="literal">[<span class="identifier">i</span>]</span> + i;</span><br><span class="line">    c<span class="literal">[<span class="identifier">i</span>]</span> = -arr1<span class="literal">[<span class="identifier">i</span>]</span> + arr2<span class="literal">[<span class="identifier">i</span>]</span> + i;</span><br><span class="line">    d<span class="literal">[<span class="identifier">i</span>]</span> = -arr1<span class="literal">[<span class="identifier">i</span>]</span> - arr2<span class="literal">[<span class="identifier">i</span>]</span> + i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> res = get<span class="constructor">Max(<span class="params">a</span>)</span> - get<span class="constructor">Min(<span class="params">a</span>)</span>;</span><br><span class="line">  res = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(get<span class="constructor">Max(<span class="params">b</span>)</span> - get<span class="constructor">Min(<span class="params">b</span>)</span>, res);</span><br><span class="line">  res = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(get<span class="constructor">Max(<span class="params">c</span>)</span> - get<span class="constructor">Min(<span class="params">c</span>)</span>, res);</span><br><span class="line">  res = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(get<span class="constructor">Max(<span class="params">d</span>)</span> - get<span class="constructor">Min(<span class="params">d</span>)</span>, res);</span><br><span class="line">  </span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> get<span class="constructor">Max(<span class="params">int</span>[] <span class="params">arr</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">int</span> res = arr<span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line">  for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) res = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(arr<span class="literal">[<span class="identifier">i</span>]</span>, res);</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> get<span class="constructor">Min(<span class="params">int</span>[] <span class="params">arr</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">int</span> res = arr<span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line">  for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) res = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>min(arr<span class="literal">[<span class="identifier">i</span>]</span>, res);</span><br><span class="line">  return res;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1131-maximum-of-absolute-value-expression&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1131-maximum-of-absolute-value-expression&quot;&gt;&lt;/a&gt; LeetCode Q 1131 - Maximum of Absolute Value Expression&lt;/h1&gt;
&lt;p&gt;Given two arrays of integers with equal lengths, return the maximum value of: &lt;code&gt;|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|&lt;/code&gt;&lt;br&gt;
where the maximum is taken over all &lt;code&gt;0 &amp;lt;= i, j &amp;lt; arr1.length&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6] ; Output: 13&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4] ; Output: 20&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= arr1.length == arr2.length &amp;lt;= 40000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^6 &amp;lt;= arr1[i], arr2[i] &amp;lt;= 10^6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Convert Sorted Array to Binary Search Tree</title>
    <link href="http://yoursite.com/2019/08/09/leetcodeQ108/"/>
    <id>http://yoursite.com/2019/08/09/leetcodeQ108/</id>
    <published>2019-08-09T20:46:15.000Z</published>
    <updated>2019-08-09T21:06:23.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-108-convert-sorted-array-to-binary-search-tree"><a class="markdownIt-Anchor" href="#leetcode-q-108-convert-sorted-array-to-binary-search-tree"></a> LeetCode Q 108 - Convert Sorted Array to Binary Search Tree</h1><p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.<br>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p><p><strong>Example:</strong> <code>Given the sorted array: [-10,-3,0,5,9]</code><br><code>One possible answer is: [0,-3,9,-10,null,5]</code></p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight vbscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode sortedArrayToBST(<span class="built_in">int</span>[] nums) &#123;</span><br><span class="line">  return dfs(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode dfs(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> <span class="built_in">left</span>, <span class="built_in">int</span> <span class="built_in">right</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">left</span> &gt; <span class="built_in">right</span>) return <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">left</span> == <span class="built_in">right</span>) return <span class="keyword">new</span> TreeNode(nums[<span class="built_in">left</span>]);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">int</span> <span class="built_in">mid</span> = <span class="built_in">left</span> + (<span class="built_in">right</span> - <span class="built_in">left</span>) / <span class="number">2</span>;</span><br><span class="line">  TreeNode n = <span class="keyword">new</span> TreeNode(nums[<span class="built_in">mid</span>]);</span><br><span class="line">  n.<span class="built_in">left</span> = dfs(nums, <span class="built_in">left</span>, <span class="built_in">mid</span> - <span class="number">1</span>);</span><br><span class="line">  n.<span class="built_in">right</span> = dfs(nums, <span class="built_in">mid</span> + <span class="number">1</span>, <span class="built_in">right</span>);</span><br><span class="line">  </span><br><span class="line">  return n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-108-convert-sorted-array-to-binary-search-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-108-convert-sorted-array-to-binary-search-tree&quot;&gt;&lt;/a&gt; LeetCode Q 108 - Convert Sorted Array to Binary Search Tree&lt;/h1&gt;
&lt;p&gt;Given an array where elements are sorted in ascending order, convert it to a height balanced BST.&lt;br&gt;
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Given the sorted array: [-10,-3,0,5,9]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;One possible answer is: [0,-3,9,-10,null,5]&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Stone Game II</title>
    <link href="http://yoursite.com/2019/08/09/leetcodeQ1140/"/>
    <id>http://yoursite.com/2019/08/09/leetcodeQ1140/</id>
    <published>2019-08-09T20:15:05.000Z</published>
    <updated>2019-08-09T20:45:07.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1140-stone-game-ii"><a class="markdownIt-Anchor" href="#leetcode-q-1140-stone-game-ii"></a> LeetCode Q 1140 - Stone Game II</h1><p>Alex and Lee continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones.<br>Alex and Lee take turns, with Alex starting first.  Initially, <code>M = 1</code>.<br>On each player’s turn, that player can take all the stones in the first X remaining piles, where <code>1 &lt;= X &lt;= 2M</code>.  Then, we set <code>M = max(M, X</code>.<br>The game continues until all the stones have been taken.<br>Assuming Alex and Lee play optimally, return the maximum number of stones Alex can get.</p><p><strong>Example 1:</strong> <code>Input: piles = [2,7,9,4,4] ; Output: 10</code><br>Explanation:  If Alex takes one pile at the beginning, Lee takes two piles, then Alex takes <code>2</code> piles again. Alex can get <code>2 + 4 + 4 = 10</code> piles in total. If Alex takes two piles at the beginning, then Lee can take all three piles left. In this case, Alex get <code>2 + 7 = 9</code> piles in total. So we return <code>10</code> since it’s larger.</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= piles.length &lt;= 100</code></li><li><code>1 &lt;= piles[i] &lt;= 10 ^ 4</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight glsl"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] memo;</span><br><span class="line"><span class="type">int</span>[] sums;</span><br><span class="line">public <span class="type">int</span> stoneGameII(<span class="type">int</span>[] piles) &#123;</span><br><span class="line">  <span class="type">int</span> len = piles.<span class="built_in">length</span>;</span><br><span class="line">  memo = new <span class="type">int</span>[len][len];</span><br><span class="line">  sums = new <span class="type">int</span>[len];</span><br><span class="line">  </span><br><span class="line">  sums[len - <span class="number">1</span>] = piles[len - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    sums[i] = sums[i + <span class="number">1</span>] + piles[i];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> backtrack(piles, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private <span class="type">int</span> backtrack(<span class="type">int</span>[] piles, <span class="type">int</span> <span class="keyword">index</span>, <span class="type">int</span> M) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">index</span> &gt;= piles.<span class="built_in">length</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// the nex person can get all left stones</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="number">2</span> * M &gt;= piles.<span class="built_in">length</span> - <span class="keyword">index</span>) <span class="keyword">return</span> sums[<span class="keyword">index</span>]; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (memo[<span class="keyword">index</span>][M] != <span class="number">0</span>) <span class="keyword">return</span> memo[<span class="keyword">index</span>][M];</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> <span class="built_in">min</span> = Integer.MAX_VALUE; <span class="comment">//the min value the next player can get</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * M; i++) &#123;</span><br><span class="line">      <span class="built_in">min</span> = Math.<span class="built_in">min</span>(<span class="built_in">min</span>, backtrack(piles, <span class="keyword">index</span> + i, Math.<span class="built_in">max</span>(i, M)));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//max stones = all the left stones - the min stones next player can get</span></span><br><span class="line">  memo[<span class="keyword">index</span>][M] = sums[<span class="keyword">index</span>] - <span class="built_in">min</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> memo[<span class="keyword">index</span>][M];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1140-stone-game-ii&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1140-stone-game-ii&quot;&gt;&lt;/a&gt; LeetCode Q 1140 - Stone Game II&lt;/h1&gt;
&lt;p&gt;Alex and Lee continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones.&lt;br&gt;
Alex and Lee take turns, with Alex starting first.  Initially, &lt;code&gt;M = 1&lt;/code&gt;.&lt;br&gt;
On each player’s turn, that player can take all the stones in the first X remaining piles, where &lt;code&gt;1 &amp;lt;= X &amp;lt;= 2M&lt;/code&gt;.  Then, we set &lt;code&gt;M = max(M, X&lt;/code&gt;.&lt;br&gt;
The game continues until all the stones have been taken.&lt;br&gt;
Assuming Alex and Lee play optimally, return the maximum number of stones Alex can get.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: piles = [2,7,9,4,4] ; Output: 10&lt;/code&gt;&lt;br&gt;
Explanation:  If Alex takes one pile at the beginning, Lee takes two piles, then Alex takes &lt;code&gt;2&lt;/code&gt; piles again. Alex can get &lt;code&gt;2 + 4 + 4 = 10&lt;/code&gt; piles in total. If Alex takes two piles at the beginning, then Lee can take all three piles left. In this case, Alex get &lt;code&gt;2 + 7 = 9&lt;/code&gt; piles in total. So we return &lt;code&gt;10&lt;/code&gt; since it’s larger.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= piles.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= piles[i] &amp;lt;= 10 ^ 4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Memorization" scheme="http://yoursite.com/tags/Memorization/"/>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>Largest 1-Bordered Square</title>
    <link href="http://yoursite.com/2019/08/09/leetcodeQ1139/"/>
    <id>http://yoursite.com/2019/08/09/leetcodeQ1139/</id>
    <published>2019-08-09T20:01:36.000Z</published>
    <updated>2019-08-09T20:15:22.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1139-largest-1-bordered-square"><a class="markdownIt-Anchor" href="#leetcode-q-1139-largest-1-bordered-square"></a> LeetCode Q 1139 - Largest 1-Bordered Square</h1><p>Given a 2D grid of <code>0</code>s and <code>1</code>s, return the number of elements in the largest square subgrid that has all <code>1</code>s on its border, or <code>0</code> if such a subgrid doesn’t exist in the grid.</p><p><strong>Example 1:</strong> <code>Input: grid = [[1,1,1],[1,0,1],[1,1,1]] ; Output: 9</code><br><strong>Example 2:</strong> <code>Input: grid = [[1,1,0,0]] ; Output: 1</code></p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><code>hor[i][j]</code>: means the length of the longest line of <code>'1</code>'s starting from <code>(i, j)</code> and going left.<br><code>ver[i][j]</code>: means the length of the longest line of <code>'1'</code>s starting from <code>(i, j)</code> and going up.</p><p><strong>Code:</strong></p><figure class="highlight angelscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> largest1BorderedSquare(<span class="built_in">int</span>[][] grid) &#123;</span><br><span class="line">  <span class="built_in">int</span> R = grid.length, C = grid[<span class="number">0</span>].length;</span><br><span class="line">  <span class="built_in">int</span>[][] hor = new <span class="built_in">int</span>[R][C], ver = new <span class="built_in">int</span>[R][C]; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> r = <span class="number">0</span>; r &lt; R; r++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> c = <span class="number">0</span>; c &lt; C; c++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (grid[r][c] == <span class="number">1</span>) &#123;</span><br><span class="line">      hor[r][c] = c == <span class="number">0</span> ? <span class="number">1</span> : hor[r][c - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        ver[r][c] = r == <span class="number">0</span> ? <span class="number">1</span> : ver[r - <span class="number">1</span>][c] + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> r = R - <span class="number">1</span>; r &gt;=<span class="number">0</span> ; r--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> c = C - <span class="number">1</span>; c &gt;= <span class="number">0</span>; c--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (grid[r][c] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="built_in">int</span> edge = Math.min(hor[r][c], ver[r][c]);</span><br><span class="line">      <span class="keyword">while</span> (edge &gt; max) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hor[r-edge+<span class="number">1</span>][c] &gt;= edge &amp;&amp; ver[r][c-edge+<span class="number">1</span>] &gt;= edge) &#123;</span><br><span class="line">          max = edge;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        edge--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> max * max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1139-largest-1-bordered-square&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1139-largest-1-bordered-square&quot;&gt;&lt;/a&gt; LeetCode Q 1139 - Largest 1-Bordered Square&lt;/h1&gt;
&lt;p&gt;Given a 2D grid of &lt;code&gt;0&lt;/code&gt;s and &lt;code&gt;1&lt;/code&gt;s, return the number of elements in the largest square subgrid that has all &lt;code&gt;1&lt;/code&gt;s on its border, or &lt;code&gt;0&lt;/code&gt; if such a subgrid doesn’t exist in the grid.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: grid = [[1,1,1],[1,0,1],[1,1,1]] ; Output: 9&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: grid = [[1,1,0,0]] ; Output: 1&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Greedy" scheme="http://yoursite.com/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>Alphabet Board Path</title>
    <link href="http://yoursite.com/2019/08/09/leetcode1138/"/>
    <id>http://yoursite.com/2019/08/09/leetcode1138/</id>
    <published>2019-08-09T18:36:19.000Z</published>
    <updated>2019-08-09T20:01:25.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1138-alphabet-board-path"><a class="markdownIt-Anchor" href="#leetcode-q-1138-alphabet-board-path"></a> LeetCode Q 1138 - Alphabet Board Path</h1><p>On an alphabet board, we start at position <code>(0, 0)</code>, corresponding to character <code>board[0][0]</code>.<br>Here, <code>board = [&quot;abcde&quot;, &quot;fghij&quot;, &quot;klmno&quot;, &quot;pqrst&quot;, &quot;uvwxy&quot;, &quot;z&quot;]</code>, as shown in the diagram below.</p><p>We may make the following moves:</p><ul><li><code>'U'</code> moves our position up one row, if the position exists on the board;</li><li><code>'D'</code> moves our position down one row, if the position exists on the board;</li><li><code>'L'</code> moves our position left one column, if the position exists on the board;</li><li><code>'R'</code> moves our position right one column, if the position exists on the board;</li><li><code>'!'</code> adds the character <code>board[r][c]</code> at our current position <code>(r, c)</code> to the answer.<br>(Here, the only positions that exist on the board are positions with letters on them.)</li></ul><p>Return a sequence of moves that makes our answer equal to target in the minimum number of moves.  You may return any path that does so.</p><p><strong>Example 1:</strong> <code>Input: target = &quot;leet&quot; ; Output: &quot;DDR!UURRR!!DDD!&quot;</code><br><strong>Example 2:</strong> <code>Input: target = &quot;code&quot; ; Output: &quot;RR!DDRR!UUL!R!&quot;</code></p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= target.length &lt;= 100</code></li><li>target consists only of English lowercase letters.</li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p>Be careful about the move sequence. <code>'U'</code> should appear before <code>R</code>, and <code>L</code> should appear before <code>D</code>.</p><p><strong>Code:</strong></p><figure class="highlight processing"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> alphabetBoardPath(<span class="keyword">String</span> target) &#123;</span><br><span class="line">  Map&lt;Character, <span class="built_in">int</span>[]&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;(); </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">map</span>.put((<span class="built_in">char</span>)(<span class="string">'a'</span> + i), <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;i / <span class="number">5</span>, i % <span class="number">5</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">  <span class="built_in">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">char</span> ch: target.toCharArray()) &#123;</span><br><span class="line">    <span class="built_in">int</span> nr = <span class="built_in">map</span>.<span class="built_in">get</span>(ch)[<span class="number">0</span>], nc = <span class="built_in">map</span>.<span class="built_in">get</span>(ch)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (r &gt; nr) &#123; r--; sb.<span class="built_in">append</span>(<span class="string">'U'</span>)&#125;;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; nc) &#123; c++; sb.<span class="built_in">append</span>(<span class="string">'R'</span>)&#125;;</span><br><span class="line">    <span class="keyword">while</span> (c &gt; nc) &#123; c--; sb.<span class="built_in">append</span>(<span class="string">'L'</span>)&#125;;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; nr) &#123; r++; sb.<span class="built_in">append</span>(<span class="string">'D'</span>)&#125;;</span><br><span class="line">    sb.<span class="built_in">append</span>(<span class="string">'!'</span>);</span><br><span class="line">    r = nr; c = nc;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1138-alphabet-board-path&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1138-alphabet-board-path&quot;&gt;&lt;/a&gt; LeetCode Q 1138 - Alphabet Board Path&lt;/h1&gt;
&lt;p&gt;On an alphabet board, we start at position &lt;code&gt;(0, 0)&lt;/code&gt;, corresponding to character &lt;code&gt;board[0][0]&lt;/code&gt;.&lt;br&gt;
Here, &lt;code&gt;board = [&amp;quot;abcde&amp;quot;, &amp;quot;fghij&amp;quot;, &amp;quot;klmno&amp;quot;, &amp;quot;pqrst&amp;quot;, &amp;quot;uvwxy&amp;quot;, &amp;quot;z&amp;quot;]&lt;/code&gt;, as shown in the diagram below.&lt;/p&gt;
&lt;p&gt;We may make the following moves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;U&#39;&lt;/code&gt; moves our position up one row, if the position exists on the board;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;D&#39;&lt;/code&gt; moves our position down one row, if the position exists on the board;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;L&#39;&lt;/code&gt; moves our position left one column, if the position exists on the board;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;R&#39;&lt;/code&gt; moves our position right one column, if the position exists on the board;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;!&#39;&lt;/code&gt; adds the character &lt;code&gt;board[r][c]&lt;/code&gt; at our current position &lt;code&gt;(r, c)&lt;/code&gt; to the answer.&lt;br&gt;
(Here, the only positions that exist on the board are positions with letters on them.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Return a sequence of moves that makes our answer equal to target in the minimum number of moves.  You may return any path that does so.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: target = &amp;quot;leet&amp;quot; ; Output: &amp;quot;DDR!UURRR!!DDD!&amp;quot;&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: target = &amp;quot;code&amp;quot; ; Output: &amp;quot;RR!DDRR!UUL!R!&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;target consists only of English lowercase letters.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Greedy" scheme="http://yoursite.com/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>Valid Parenthesis String</title>
    <link href="http://yoursite.com/2019/08/09/leetcodeQ678/"/>
    <id>http://yoursite.com/2019/08/09/leetcodeQ678/</id>
    <published>2019-08-09T17:54:17.000Z</published>
    <updated>2019-08-09T19:39:38.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-678-valid-parenthesis-string"><a class="markdownIt-Anchor" href="#leetcode-q-678-valid-parenthesis-string"></a> LeetCode Q 678 - Valid Parenthesis String</h1><p>Given a string containing only three types of characters: <code>'('</code>, <code>')'</code> and <code>'*'</code>, write a function to check whether this string is valid. We define the validity of a string by these rules:</p><ul><li>Any left parenthesis <code>'('</code> must have a corresponding right parenthesis <code>')'</code>.</li><li>Any right parenthesis <code>')'</code> must have a corresponding left parenthesis <code>'('</code>.</li><li>Left parenthesis <code>'('</code> must go before the corresponding right parenthesis <code>')'</code>.</li><li><code>'*'</code> could be treated as a single right parenthesis <code>')'</code> or a single left parenthesis <code>'('</code> or an empty string.</li><li>An empty string is also valid.</li></ul><p><strong>Example 1:</strong> <code>Input: &quot;()&quot; ; Output: True</code><br><strong>Example 2:</strong> <code>Input: &quot;(*)&quot; ; Output: True</code><br><strong>Example 3:</strong> <code>Input: &quot;(*))&quot; ; Output: True</code></p><p><strong>Note:</strong> The string size will be in the range [1, 100].</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><h3 id="solution-1-brute-force"><a class="markdownIt-Anchor" href="#solution-1-brute-force"></a> Solution 1: Brute-Force</h3><p><strong>Code:</strong></p><figure class="highlight axapta"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> checkValidString(String s) &#123;</span><br><span class="line">  <span class="keyword">return</span> helper(s.toCharArray(), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> helper(<span class="keyword">char</span>[] chs, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="keyword">count</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">count</span> &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; chs.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (chs[i] == <span class="string">'('</span>) &#123;</span><br><span class="line">      <span class="keyword">count</span>++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chs[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">count</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">count</span>--;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> helper(chs, start + <span class="number">1</span>, <span class="keyword">count</span> + <span class="number">1</span>) || helper(chs, start  <span class="number">1</span>, <span class="keyword">count</span> - <span class="number">1</span>) || helper(chs, start + <span class="number">1</span>, <span class="keyword">count</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">count</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="solution-2-greedy"><a class="markdownIt-Anchor" href="#solution-2-greedy"></a> Solution 2: Greedy</h2><p>If we don’t have <code>'*'</code> in the string, we just need to count <code>'('</code>s and <code>')'</code>s. Whenever meeting a <code>'('</code> do <code>count++</code> and meeting a <code>')'</code> do <code>count--</code>. When finish traversing the string, check if <code>count==0</code>.</p><p>Now, the key point is how to deal with <code>'*'</code>, we can regard it as a <code>'('</code> or as a <code>')'</code> or just leave it alone. This impacts the <code>count</code>. So when we are at a specific index, the <code>count</code> is not fixed.</p><p>We use two constants, one is <code>low</code>, lower bound of <code>count</code>, another is <code>high</code>, upper bound of <code>count</code>.</p><ul><li>For <code>low</code>, we take <code>'*'</code> as <code>')'</code> if there are more <code>'('</code>s.</li><li>For <code>high</code>, we take <code>'*'</code> as <code>'('</code>.</li></ul><p>So,</p><ul><li>if <code>high &lt; 0</code> means too much <code>')'</code>s</li><li>if <code>low &gt; 0</code> , after the count finished, means too much <code>'('</code>s.</li></ul><p><strong>Code:</strong></p><figure class="highlight angelscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span>ean checkValidString(String s) &#123;</span><br><span class="line">  <span class="built_in">int</span> low = <span class="number">0</span>, high = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (char ch: s.toCharArray()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'('</span>) &#123;</span><br><span class="line">      low++; high++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">')'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (low &gt; <span class="number">0</span>) low--;</span><br><span class="line">      high--;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (low &gt; <span class="number">0</span>) low--;</span><br><span class="line">      high++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (high &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> low == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-678-valid-parenthesis-string&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-678-valid-parenthesis-string&quot;&gt;&lt;/a&gt; LeetCode Q 678 - Valid Parenthesis String&lt;/h1&gt;
&lt;p&gt;Given a string containing only three types of characters: &lt;code&gt;&#39;(&#39;&lt;/code&gt;, &lt;code&gt;&#39;)&#39;&lt;/code&gt; and &lt;code&gt;&#39;*&#39;&lt;/code&gt;, write a function to check whether this string is valid. We define the validity of a string by these rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any left parenthesis &lt;code&gt;&#39;(&#39;&lt;/code&gt; must have a corresponding right parenthesis &lt;code&gt;&#39;)&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Any right parenthesis &lt;code&gt;&#39;)&#39;&lt;/code&gt; must have a corresponding left parenthesis &lt;code&gt;&#39;(&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Left parenthesis &lt;code&gt;&#39;(&#39;&lt;/code&gt; must go before the corresponding right parenthesis &lt;code&gt;&#39;)&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;*&#39;&lt;/code&gt; could be treated as a single right parenthesis &lt;code&gt;&#39;)&#39;&lt;/code&gt; or a single left parenthesis &lt;code&gt;&#39;(&#39;&lt;/code&gt; or an empty string.&lt;/li&gt;
&lt;li&gt;An empty string is also valid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: &amp;quot;()&amp;quot; ; Output: True&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: &amp;quot;(*)&amp;quot; ; Output: True&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: &amp;quot;(*))&amp;quot; ; Output: True&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The string size will be in the range [1, 100].&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Greedy" scheme="http://yoursite.com/tags/Greedy/"/>
    
  </entry>
  
</feed>
