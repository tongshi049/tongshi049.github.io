<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TongTong Shi&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-14T20:13:49.918Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tong Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Study Notes - SQL &amp; MySQL &amp; MyBatis (2)</title>
    <link href="http://yoursite.com/2019/08/14/sql-notes-3/"/>
    <id>http://yoursite.com/2019/08/14/sql-notes-3/</id>
    <published>2019-08-14T16:17:35.000Z</published>
    <updated>2019-08-14T20:13:49.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> MySQL</h3><p><font color="mediumspringgreen"><strong><a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL</a></strong></font> is an open-source relational database management system (RDBMS). It is popular used in many websites. <strong>Java JDBC</strong> provides a standard interface to interact with any relational databases. In this post, I will introduce how to use <strong>JDBC</strong> to interact with <strong>MySQL</strong> databases.</p><a id="more"></a><h4 id="font-colordodgerblue1-what-is-jdbcfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue1-what-is-jdbcfont"></a> <font color="dodgerblue">1. What is JDBC?</font></h4><p><strong>JDBC</strong> API provides a standard interface for interacting with any relational database management systems (RDBMS). It consists of the following main components:</p><ul><li><strong><font color="MEDIUMSLATEBLUE">JDBC Driver</font></strong>: a set of Java classes that implement JDBC interfaces for interacting with database. It translates JDBC calls into MySQL specificcalss and sends the calls directly to a specific database. Almost all database vendors provide JDBC drivers. E.g. <code>com.mysql.cj.jdbc.Driver</code>.</li><li><strong><font color="MEDIUMSLATEBLUE">Connection</font></strong>: the most important component of JDBC. In a Java application, we first <em>load a <strong>JDBC Driver</strong></em> and then <em>establist a connection to the database</em>. Through the <strong>Connection object</strong>, we can interact with the database e.g., <em>creating a <strong>Statement</strong> to execute <strong>SQL queries</strong> against tables.</em> More than one connection can be opened to a database at a time.</li><li><strong><font color="MEDIUMSLATEBLUE">Statement</font></strong>: to <em>execute a SQL query, e.g. SELECT, INSERT, UPDATE, DELETE</em>, we need a <strong>Statement object</strong>. <strong>Statement ojbect</strong> is created through the <strong>Connection object</strong>. JDBC provides several types of statements for different purposes such as <strong>PreparedStatement, CallableStatement</strong>.</li><li><strong><font color="MEDIUMSLATEBLUE">ResultSet</font></strong>: After querying data from the database, we get a <strong>ResultSet object</strong>. The <strong>ResultSet object</strong> provides a set of API allowing us to traverse result of the query.</li></ul><p><font color="MEDIUMTURQUOISE">The typical flow of using JDBC is as follows:</font></p><ul><li>Load the <strong>JDBC Driver</strong> and create a <strong>connection</strong> to the database;</li><li>Create a <strong>Statement</strong> and execute the <strong>query</strong> to get a <strong>ResultSet</strong>;</li><li>Traverse and process the <strong>ResultSet</strong>;</li><li>Close the <strong>ResultSet</strong>, <strong>Statement</strong> and <strong>Connection</strong>.</li></ul><img src="jdbc_conn_flow.png" width="70%" height="70%">This image is from <a href="http://www.mysqltutorial.org/jdbc-overview/" target="_blank" rel="noopener">source</a><h4 id="font-colordodgerblue2-use-mysql-workbench-to-create-rdbmsfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue2-use-mysql-workbench-to-create-rdbmsfont"></a> <font color="dodgerblue">2. Use MySQL WorkBench to create RDBMS</font></h4><h4 id="font-colordodgerblue3-connect-to-mysql-using-jdbc-driverfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue3-connect-to-mysql-using-jdbc-driverfont"></a> <font color="dodgerblue">3. Connect to MySQL Using JDBC Driver</font></h4><ul><li>To avoid hard coding database parameters in the code, use a Java properties file to store them.</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL DB parameters</span></span><br><span class="line"><span class="attr">user</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">pw</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3306/db_name?useUnicode=true&amp;characterEncoding=utf8</span></span><br></pre></td></tr></table></figure><ul><li><p>Import three classes, <strong>SQLException</strong>, <strong>DriverManager</strong>, and <strong>Connection</strong> from <code>java.sql.*</code> package.</p></li><li><p>Create a class for handling connection creation. Call the <code>getConnection()</code> method of the <code>DriverManager</code> class and get the Connection object.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (conn != <span class="keyword">null</span>) conn.close();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">  System.out.println(ex.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue4-query-data-from-mysql-using-jdbcfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue4-query-data-from-mysql-using-jdbcfont"></a> <font color="dodgerblue">4. Query data from MySQL using JDBC</font></h4><ul><li>To query data from MySQL, first need to establish a connection to MySQL using Connection object.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure><ul><li>Or we can develop a utility class to handle the connection.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = MySQLJDBCUtil.getConnection();</span><br></pre></td></tr></table></figure><ul><li>Then, create a Statement object. For querying data, we just need to use the Statement object as follows:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = conn.getStatement();</span><br></pre></td></tr></table></figure><ul><li>Next, we can use the created Statement object to execute MySQL queries like the following:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"SELECT * FROM `tb_product`"</span>;</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br></pre></td></tr></table></figure><ul><li>Use the methods provided by ResultSet object to traverse and process data.<ul><li><code>next()</code> method returns true and move ot the next row in the ResultSet if there are rows available, otherwist it returns false.</li><li><code>getDataType()</code>method: get column data of the current row. Pass the column name or column index.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">  System.out.println(rs.getString(<span class="string">"product_name"</span>) + <span class="string">"\t"</span> + rs.getString(<span class="string">"product_desc"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Last, close the ResultSet and Statement objects when completing traversing the data by calling <code>close()</code> method.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  rs.close();</span><br><span class="line">  stmt.close();</span><br><span class="line">&#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>From Java 7, there is another nice statement called <code>try-catch-resources</code>. It is automatically calls the <code>close()</code> method of Connection object once program finishes. So we don’t have to explicitly do it.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String sql = String sql = <span class="string">"SELECT * FROM `tb_product`"</span>;</span><br><span class="line"><span class="keyword">try</span> (Connection conn = MySQLJDBCUtil.getConnection();</span><br><span class="line"> Statement stmt = conn.getStatement();</span><br><span class="line"> ResultSet rs = stmt.executeQuery(sql)) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// loop through the result set</span></span><br><span class="line">  <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">  System.out.println(rs.getString(<span class="string">"product_name"</span>) + <span class="string">"\t"</span> + rs.getString(<span class="string">"product_desc"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue5-update-data-into-table-using-jdbc-preparedstatementfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue5-update-data-into-table-using-jdbc-preparedstatementfont"></a> <font color="dodgerblue">5. Update data into table using JDBC PreparedStatement</font></h4><p><strong><font color="MEDIUMTURQUOISE">PreparedStatement</font> interface</strong></p><p>This interface extends the <strong>Statement</strong> interface. We can use any statement such as <code>SELECT</code>, <code>INSERT</code>, <code>DELETE</code>, <code>UPDATE</code> with this interface. It provides some more advaced features as follows:</p><ul><li>Add parameters into SQL statement using placeholders in the form of <strong>question marks(?)</strong>. This helps avoid SQL injection.</li><li>Reuse the PreparedStatement with new parameters in case you need to execute the SQL statement multiple times with different parameters.</li><li>Help increase performance of executed statement by precompiling the SQL statment.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String sqlUpdate = <span class="string">"UPDATE tb_product SET product_name = ?"</span> + </span><br><span class="line">                   <span class="string">"WHERE product_id = ?"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> (<span class="comment">// Step 1: get Connection Object</span></span><br><span class="line">       Connection conn = MySQLJDBCUtil.getConnection();</span><br><span class="line">       <span class="comment">// Step 2: get PreparedStatement Object</span></span><br><span class="line">       PreparedStatement pstmt = conn.getPreparedStatement(sqlUpdate)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 3: supply values for placeholders one-by-one using setYYY() method where YYY is the datatype of the placeholder.</span></span><br><span class="line">    String product_name = <span class="string">"phone"</span>;</span><br><span class="line">    <span class="keyword">int</span> product_id = <span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line">    pstmt.setString(<span class="number">1</span>, product_name);</span><br><span class="line">    pstmt.setInt(<span class="number">2</span>, product_id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 4: execute update</span></span><br><span class="line">    <span class="keyword">int</span> rowAffected = pstmt.executeUpdate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reuse pstmt</span></span><br><span class="line">    String product_name = <span class="string">"laptop"</span>;</span><br><span class="line">    <span class="keyword">int</span> product_id = <span class="number">10002</span>;</span><br><span class="line"></span><br><span class="line">    pstmt.setString(<span class="number">1</span>, product_name);</span><br><span class="line">    pstmt.setInt(<span class="number">2</span>, product_id);</span><br><span class="line">    <span class="keyword">int</span> rowAffected = pstmt.executeUpdate();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue6-insert-data-into-table-using-jdbc-preparedstatementfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue6-insert-data-into-table-using-jdbc-preparedstatementfont"></a> <font color="dodgerblue">6. Insert data into table using JDBC PreparedStatement</font></h4><p><strong>Example</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span> <span class="params">(String productName, String productDesc)</span> </span>&#123;</span><br><span class="line">  ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">int</span> productId = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  String sql = <span class="string">"INSERT INTO tb_product (product_name, product_desc)"</span> + </span><br><span class="line">               <span class="string">"VALUES (?, ?)"</span>;</span><br><span class="line">  <span class="keyword">try</span> ( <span class="comment">// get Connection Object</span></span><br><span class="line">      Connection conn = MySQLJDBCUtil.getConnection();</span><br><span class="line">      <span class="comment">// get PreparedStatement Object</span></span><br><span class="line">      PreparedStatement pstmt = conn.getPreparedStatement(sql, Statement.RETURN_GENERATED_KEYS);) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// set parameters</span></span><br><span class="line">    pstmt.setStirng(<span class="number">1</span>, <span class="string">"Computer"</span>);</span><br><span class="line">    pstmt.setStirng(<span class="number">2</span>, <span class="string">"Lenovo"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// execute sql</span></span><br><span class="line">    <span class="keyword">int</span> rowAffected = pstmt.executeUpdate();</span><br><span class="line">    <span class="keyword">if</span> (rowAffected == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// get product id</span></span><br><span class="line">      rs = pstmt.getGeneratedKeys();</span><br><span class="line">      <span class="keyword">if</span> (rs.next()) productId = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">      System.out.println(ex.getMessage());</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(rs != <span class="keyword">null</span>)  rs.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> productId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue6-jdbc-transactionfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue6-jdbc-transactionfont"></a> <font color="dodgerblue">6. JDBC Transaction</font></h4><p><strong><font color="MEDIUMSLATEBLUE">What is transaction &amp; Why Transaction</font></strong></p><p>A <strong>Transaction</strong> is a unit of work that you want to treat as <em>“a whole”</em>. It has to either happen in full or not at all. A classical example is transfering money from one bank account to another. First withdraw the amount from the source account, and then deposit it to the destination account. The operation has to succeed in full. If get failed in one step, the monry will be lost!</p><p><strong>Transaction</strong> in db has two main purposes:</p><ul><li>To provide <strong>reliable</strong> units of work that <em>allow correct recovery from failures</em> and keep a database consistent even in cases of system failure, when execution stops (completely or partially) and many operations upon a database remain uncompleted, with unclear status.</li><li>To provide <strong>isolation</strong> between programs accessing a database <strong>concurrently</strong>. If this isolation is not provided, the programs’ outcomes are possibly erroneous.</li></ul><p>A <strong>transaction</strong> in a db must maintain <strong>A</strong>tomicity, <strong>C</strong>onsistency, <strong>I</strong>solation, and <strong>D</strong>urability (<strong>ACID</strong>).</p><p><strong><font color="MEDIUMSLATEBLUE">How to commit and rollback a transaction in JDBC</font></strong></p><ul><li>Setting auto-commit mode: by default it is set to <em>true</em>. So the changes will be applied to the database once the statement successfully executed. In case, we want to control when to commit the transaction, we need to do first set auto-commit to be <em>false</em>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ul><li>Committing and rolling back a transaction: once the auto-commit mode is set to false, we can commit or rollback the transaction.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Connection conn = DriverManager.getConnection(url, user, password);) &#123;</span><br><span class="line">  conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">  <span class="comment">//operations e.g insert, update, delete</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// commit the transaction</span></span><br><span class="line">  conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">  conn.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mysql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mysql&quot;&gt;&lt;/a&gt; MySQL&lt;/h3&gt;
&lt;p&gt;&lt;font color=&quot;mediumspringgreen&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://www.mysql.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL&lt;/a&gt;&lt;/strong&gt;&lt;/font&gt; is an open-source relational database management system (RDBMS). It is popular used in many websites. &lt;strong&gt;Java JDBC&lt;/strong&gt; provides a standard interface to interact with any relational databases. In this post, I will introduce how to use &lt;strong&gt;JDBC&lt;/strong&gt; to interact with &lt;strong&gt;MySQL&lt;/strong&gt; databases.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Study Notes - SQL &amp; MySQL &amp; MyBatis (1)</title>
    <link href="http://yoursite.com/2019/08/12/sql-nodes-2/"/>
    <id>http://yoursite.com/2019/08/12/sql-nodes-2/</id>
    <published>2019-08-12T17:58:03.000Z</published>
    <updated>2019-08-14T16:17:59.388Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sql"><a class="markdownIt-Anchor" href="#sql"></a> SQL</h3><p><font color="STEELBLUE"><strong>Structured Query Language (SQL)</strong></font> is a standard Database language which is used to create, maintain and retrieve the <strong>ralational database</strong>. It is very useful in handling <strong>structured data</strong> where there are <strong>relations</strong> between different entities/variables of the data.</p><h4 id="font-colordodgerblue1-what-is-relational-databasefont"><a class="markdownIt-Anchor" href="#font-colordodgerblue1-what-is-relational-databasefont"></a> <font color="dodgerblue">1. What is Relational Database</font></h4><p style="background-color: cornsilk"><b>Definition of <font color="MEDIUMSLATEBLUE">RDB</font> from Wikipedia:</b> A <b>relational database</b> is a digital database based on <b>relational model</b> of data. A software system used to maintain relational databases is a relational database management system (RDBMS). Virtually all relational database systems use SQL (Structured Query Language) for querying and maintaining the database.</p><a id="more"></a><p style="background-color: cornsilk"><b>Definition of <font color="MEDIUMSLATEBLUE">Relational Model</font> from Wikipedia:</b> This model organizes data into one or more <b>tables</b> of columns and rows, with a <b>unique key</b> identifying each row. Rows are also called <b>recodes (tuples)</b>. Columns are also called attributes. Generally, each table/relation represents one "entity type". The rows represent instances of that type of entity and the columns representing values attributed to that instance.</p><p>Therefore, <strong><font color="royalblue">relational database means the data is stored as well as retrieved in the form of relations (tables).</font></strong></p><h4 id="font-colordodgerblue2-important-terminologiesfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue2-important-terminologiesfont"></a> <font color="dodgerblue">2. Important terminologies</font></h4><ul><li><strong><font color="MEDIUMSLATEBLUE">Keys</font></strong>: Each row in a table has its own <em>unique key</em>. Rows in a table can be linked to rows in other tables by adding a column for the <em>unique key</em> of the linked row (known as <em>foreign key</em>). Most physical implementations have a unique <em>primary key (PK)</em> for each row in a table. It is the key that the system is uses primarily for accessing the table.<ul><li><em><font color="MEDIUMSLATEBLUE">superkey</font></em>: a set of attributes of a relation schema upon which all attributes of the schema are functionally dependent. No two rows can have the same value of super key attributes.</li><li><em><font color="MEDIUMSLATEBLUE">candidate key</font></em>: minimal superkey.</li><li><em><font color="MEDIUMSLATEBLUE">primary key</font></em>: one of the candidate keys. One of the candidate keys is selected as most important and becomes the primary key. There cannot be more than one pk in a table.</li><li><em><font color="MEDIUMSLATEBLUE">foreign key</font></em>: a field (or collectiosn of fields) in one table that uniquely identifies a row of another table.</li></ul></li><li><strong><font color="MEDIUMSLATEBLUE">Attributes</font></strong>: properties that define a relation.</li><li><strong><font color="MEDIUMSLATEBLUE">Tuple</font></strong>: each row in the relation.</li><li><strong><font color="MEDIUMSLATEBLUE">Degree</font></strong>: the number of attributes in the relation.</li><li><strong><font color="MEDIUMSLATEBLUE">Cardinality</font></strong>: the number of tuples in a relation.</li><li><strong><font color="MEDIUMSLATEBLUE">Column</font></strong>: the set of values for a particular attribute.</li></ul><h4 id="font-colordodgerblue3-queries-of-rdbfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue3-queries-of-rdbfont"></a> <font color="dodgerblue">3. Queries of RDB</font></h4><ul><li><strong><font color="MEDIUMSLATEBLUE">Data Definition Langurage (DDL)</font></strong>: It is used to <strong>define</strong> the structure of the database. E.g. <strong><font>CREATE, ALTER, DROP and RENAME</font></strong><ul><li><strong>CREATE</strong>: create databases or its objects (like table).</li><li><strong>DROP</strong>: delete objects from the database.</li><li><strong>ALTER</strong>: alter the structure of the database.</li><li><strong>RENAME</strong>: rename an object existing in the database.</li></ul></li><li><strong><font color="MEDIUMSLATEBLUE">Data Manipulation Langurage (DML)</font></strong>: It is used to <strong>manipulate</strong> data in the relations. E.g. <strong><font>INSERT, UPDATE, DELETE</font></strong></li><li><strong><font color="MEDIUMSLATEBLUE">Data Query Langurage (DQL)</font></strong>: It is used to <strong>extract</strong> the data from the relations. E.g. <strong><font>INSERT, UPDATE, DELETE</font></strong></li><li><strong><font color="MEDIUMSLATEBLUE">Data Control Langurage (DCL)</font></strong>: includs commands such as <strong><font>GRANT, REVOKE</font></strong> which mainly deals with the rights and other controls of the database system.<ul><li><strong>GRANT</strong>: gives user’s access privileges to database.</li><li><strong>REVOKE</strong>: withdraw use’s access privileges give by using the <strong>GRANT</strong> command.</li></ul></li><li><strong><font color="MEDIUMSLATEBLUE">Transctional Control Language (TCL)</font></strong>: TCL commands deals with the transction within the database.<ul><li><strong>COMMIT</strong>: commits a transaction.</li><li><strong>ROLLBACK</strong>: rollbacks a transaction in case of any error occurs.</li></ul></li></ul><h4 id="font-colordodgerblue4-select-statements-some-clausesfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue4-select-statements-some-clausesfont"></a> <font color="dodgerblue">4. SELECT Statements &amp; Some clauses</font></h4><h5 id="font-colormediumslateblue41-select-statementfont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue41-select-statementfont"></a> <font color="MEDIUMSLATEBLUE">4.1 SELECT Statement</font></h5><p>A generic query to retrieve from a RDB is:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] attribute_List <span class="keyword">FROM</span> R1, R2,...RM</span><br><span class="line">[<span class="keyword">WHERE</span> condition]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> (<span class="keyword">attributes</span>)][<span class="keyword">HAVING</span> condition]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> (<span class="keyword">attributes</span>)][<span class="keyword">DESC</span>]</span><br><span class="line">[<span class="keyword">LIMIT</span>] limit_number;</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue42-aggregation-functionsfont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue42-aggregation-functionsfont"></a> <font color="MEDIUMSLATEBLUE">4.2 Aggregation functions</font></h5><p><strong>Aggregation functions</strong>: used to perform mathematical operations on data values of a relation. Some of the commonly used ones in SQL are:</p><ul><li><strong><font color="MEDIUMTURQUOISE">COUNT</font></strong>: count the number of rows in a relation. e.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span> (stu_phone) <span class="keyword">FROM</span> tb_student;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">SUM</font></strong>: add the values of an attribute in a relation. e.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span> (stu_age) <span class="keyword">FROM</span> tb_student;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">MAX, MIN, AVG</font></strong></li></ul><h5 id="font-colormediumslateblue43-group-by-clausefont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue43-group-by-clausefont"></a> <font color="MEDIUMSLATEBLUE">4.3 GROUP BY clause</font></h5><p><strong><font color="MEDIUMTURQUOISE">GROUP BY clause</font></strong>: arrange identical data into groups with the help of some functions. <strong>Key points</strong>:</p><ul><li><strong>GROUP BY</strong> is used with the <strong>SELECT</strong> statement;</li><li>Placed after the <strong>WHERE</strong> clause;</li><li>Placed before <strong>ORDER BY</strong> clause if used any.</li></ul><p><strong>Syntax</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, function_name(column2)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> condition</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column1, column2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1, column2;</span><br><span class="line"></span><br><span class="line">fuction_name: Name of the function used, e.g. SUM(), AVG().</span><br></pre></td></tr></table></figure><p><strong>Example</strong>:</p><ul><li><strong>GROUP BY single column</strong>: place all the rows with the same value of only a particular column in one group. E.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_name, <span class="keyword">SUM</span>(SALARY) <span class="keyword">FROM</span> tb_employee</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> employee_name;</span><br></pre></td></tr></table></figure><ul><li><strong>GROUP BY multiple columns</strong>: place all the rows with the same values of all columns in one group. E.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> stu_subject, stu_year, <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> stu_subject, stu_year;</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue44-having-clausefont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue44-having-clausefont"></a> <font color="MEDIUMSLATEBLUE">4.4 HAVING clause</font></h5><p><strong><font color="MEDIUMTURQUOISE">HAVING clause</font></strong>: place conditions to decide which group will be the part of final result-set.</p><p><strong><font color="tomato">Difference between HAVING and WHERE clause</font></strong><br><strong>HAVING</strong> is used to specify a condition for a group or an aggregate function used in <strong>SELELCT</strong> statement. The <strong>WHERE</strong> clause selects before grouping. The <strong>HAVING</strong> clause selects rows after grouping. Unlike <strong>HAVING</strong> clause, the <strong>WHERE</strong> clause cannot contain aggregate functions. E.g.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_name, <span class="keyword">SUM</span>(employee_salary) <span class="keyword">FROM</span> tb_employee</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> employee_name</span><br><span class="line"><span class="keyword">HAVING</span> employee_salary &gt;= <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> stu_subject, stu_year, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> c <span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> stu_subject, stu_year</span><br><span class="line"><span class="keyword">HAVING</span> c <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue45-limit-clausefont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue45-limit-clausefont"></a> <font color="MEDIUMSLATEBLUE">4.5 LIMIT clause</font></h5><p>If there are a large number of tuples satisfying the query conditions, it might be resourceful to view only a handful of them at a time. <strong>Key Point</strong> of <strong>LIMIT</strong> clause:</p><ul><li><strong>LIMIT</strong> clause is used to set an upper bound limit on the number of tuples returned by SQL.</li><li><font color="tomato">Not supported by all SQL versions</font></li><li>Can be specified using the SQL 2008 <font color="royalblue">OFFSET/FETCH/FIRST</font> clauses.</li></ul><p><strong>Example</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ALL</span> <span class="keyword">FROM</span> tb_student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> stu_id</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue46-order-by-clausefont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue46-order-by-clausefont"></a> <font color="MEDIUMSLATEBLUE">4.6 ORDER BY clause</font></h5><p>The <strong>ORDER BY</strong> in SQL is used to sort the fetched data in either ascending or descending according to one or more columns.</p><ul><li>By default <strong>ORDER BY</strong> sorts the data in <strong>ascending order</strong>.</li><li>User keyword <strong>DESC</strong> to sort the data in <strong>descending order</strong>.</li><li>Can sort according to either <strong>one column</strong> or <strong>multiple columns</strong>.</li></ul><p><strong>Example</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name <span class="keyword">ASC</span>|<span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1 <span class="keyword">ASC</span>|<span class="keyword">DESC</span>, column2 <span class="keyword">ASC</span>|<span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue46-distinct-clausefont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue46-distinct-clausefont"></a> <font color="MEDIUMSLATEBLUE">4.6 DISTINCT clause</font></h5><p><strong>DISTINCT</strong> clause is used in conjunction with <strong>SELECT</strong> keyword. It is helpful when there is need of <strong>avoiding the duplicate values</strong> in any specific columns/table. When using it, only the <strong>unique values</strong> are fetched.</p><p><strong>Example</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> stu_name <span class="keyword">FROM</span> tb_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* To fetch unique combination of rows from the whole table */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> * <span class="keyword">FROM</span> tb_student;</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue47-where-clausefont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue47-where-clausefont"></a> <font color="MEDIUMSLATEBLUE">4.7 WHERE clause</font></h5><p><strong>WHERE</strong> is used for fetching <strong>filtered data</strong> in a result set. E.g.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2 <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">operator</span> <span class="keyword">value</span>;</span><br></pre></td></tr></table></figure><p><strong>Operator</strong> includes: <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>=</code>, <code>&lt;&gt;</code>, <code>BETWEEN</code> (in an inclusive range), <code>LIKE</code> (search for a pattern), <code>IN</code> (specify multiple possible values for a column). E.g.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stu_age=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stu_id <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">% : Used to match zero or more characters. (Variable Length)</span></span><br><span class="line"><span class="comment">_ : Used to match exactly one character. (Fixed Length)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* fetch records of students where NAME starts with letter S */</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stu_name <span class="keyword">LIKE</span> <span class="string">'S%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* fetch records of students where NAME contains the patter ‘AM’</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stu_name <span class="keyword">LIKE</span> <span class="string">'%AM%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stu_age <span class="keyword">IN</span> (<span class="number">18</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stu_id <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue47-exists-keywordfont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue47-exists-keywordfont"></a> <font color="MEDIUMSLATEBLUE">4.7 EXISTS keyword</font></h5><p><strong>EXISTS</strong> contition in SQL is used to check whether the result of a correlated nested query is empty (contains no tuples) or not. The result of <strong>EXIST</strong> is a boolean value True or False. It can be used in a <strong>SELECT, UPDATE, DELETE or INSERT</strong> statment.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">  (<span class="keyword">SELECT</span> column_name(s)</span><br><span class="line">   <span class="keyword">FROM</span> table_name</span><br><span class="line">   <span class="keyword">WHERE</span> condition);</span><br></pre></td></tr></table></figure><p><strong>Example</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*with SELECT statment*/</span></span><br><span class="line"><span class="keyword">SELECT</span> fname, lname</span><br><span class="line"><span class="keyword">FROM</span> tb_customers</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_orders</span><br><span class="line">   <span class="keyword">WHERE</span> tb_customers.customer_id = tb_orders.c_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Using NOT with EXISTS*/</span></span><br><span class="line"><span class="keyword">SELECT</span> lname, fname</span><br><span class="line"><span class="keyword">FROM</span> tb_customers</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_orders</span><br><span class="line">   <span class="keyword">WHERE</span> tb_customers.customer_id = tb_orders.c_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*with DELETE statment*/</span></span><br><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span> tb_orders</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_customers</span><br><span class="line">   <span class="keyword">WHERE</span> tb_customers.customer_id = tb_orders.c_id</span><br><span class="line">   <span class="keyword">AND</span> Customers.lname = <span class="string">'EZReal'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*with UPDATE statment*/</span></span><br><span class="line"><span class="keyword">UPDATE</span> tb_customers</span><br><span class="line"><span class="keyword">SET</span> lname = <span class="string">'Lux'</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_customers <span class="keyword">WHERE</span> customer_id = <span class="number">401</span>);</span><br></pre></td></tr></table></figure><h5 id="font-colormediumslateblue48-with-keywordfont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue48-with-keywordfont"></a> <font color="MEDIUMSLATEBLUE">4.8 WITH keyword</font></h5><p><strong>WITH</strong> clause allows you to give a sub-query block a name, which can be referenced in several places within the main SQL query.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> tb_temp (ave_val) <span class="keyword">as</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(attr1) <span class="keyword">FROM</span> <span class="keyword">table</span>),</span><br><span class="line">  <span class="keyword">SELECT</span> attr1 <span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line">  <span class="keyword">WHERE</span> table.attr1 &gt; tb_temp.ave_val;</span><br></pre></td></tr></table></figure><p>For example, the tables are shown as follows. Find all the student whose score is more than the average score of all employees.<br><img src="tb_student.png" width="80%" height="80%"></p><p><strong>SQL Query</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> tb_temp (ave_score) <span class="keyword">AS</span></span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(stu_score) <span class="keyword">FROM</span> tb_student)</span><br><span class="line">  <span class="keyword">SELECT</span> stu_name, stu_score <span class="keyword">FROM</span> tb_student</span><br><span class="line">  <span class="keyword">WHERE</span> tb_student.stu_score &gt; tb_temp.ave_score;</span><br></pre></td></tr></table></figure><p><strong>Result</strong> will be:<br><img src="result_1.png" width="60%" height="60%"></p><h5 id="font-colormediumslateblue49-join-statementfont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue49-join-statementfont"></a> <font color="MEDIUMSLATEBLUE">4.9 JOIN statement</font></h5><p><strong>JOIN</strong> statement is used to combine rows from two or more tables based on a common field between them. Different types of Joins are:</p><ul><li><strong><font color="MEDIUMTURQUOISE">INNER JOIN</font></strong>: selects all rows from the tables as long as the condition satisfies.<br><img src="inner_join.png" width="30%" height="30%"><br><strong>Syntax</strong>:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tb1.col1, tb1.col2, tb2.col1,...</span><br><span class="line"><span class="keyword">FROM</span> tb1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> tb2</span><br><span class="line"><span class="keyword">ON</span> tb1.matching_col = tb2.matching_col;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">LEFT JOIN (LEFT OUTER JOIN)</font></strong>: returns all the rows of the table on the left side of the JOIN and matching rows for the tables on the right side of JOIN. The rows for which there is no matching row on right side, the result-set will contain NULL.<br><img src="left_join.png" width="30%" height="30%"><br><strong>Syntax</strong>:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tb1.col1, tb1.col2, tb2.col1,...</span><br><span class="line"><span class="keyword">FROM</span> tb1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb2</span><br><span class="line"><span class="keyword">ON</span> tb1.matching_col = tb2.matching_col;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">RIGHT JOIN (RIGHT OUTER JOIN)</font></strong>: returns all the rows of the table on the right side of the JOIN and matching rows for the table on the left side of JOIN. The rows for which there is no matching row on the left, the result-set will contain NULL.<br><img src="right_join.png" width="30%" height="30%"><br><strong>Syntax</strong>:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tb1.col1, tb1.col2, tb2.col1,...</span><br><span class="line"><span class="keyword">FROM</span> tb1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> tb2</span><br><span class="line"><span class="keyword">ON</span> tb1.matching_col = tb2.matching_col;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">FULL JOIN</font></strong>: creates the result-set by combining result of both LEFT JOIN and RIGHT JOIN. The result-set will contain all the rows from both the tables. The rows for which there is no matching, the result-set will contain NULL values<br><img src="full_join.png" width="30%" height="30%"><br><strong>Syntax</strong>:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tb1.col1, tb1.col2, tb2.col1,...</span><br><span class="line"><span class="keyword">FROM</span> tb1</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> tb2</span><br><span class="line"><span class="keyword">ON</span> tb1.matching_col = tb2.matching_col;</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue5-ddl-statementsfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue5-ddl-statementsfont"></a> <font color="dodgerblue">5. DDL Statements</font></h4><ul><li><strong><font color="MEDIUMTURQUOISE">Crate DB</font></strong>: <code>CREATE DATABASE dbname;</code></li><li><strong><font color="MEDIUMTURQUOISE">Drop DB</font></strong>: <code>DROP DTABASE dbname</code>;</li><li><strong><font color="MEDIUMTURQUOISE">Create Table</font></strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">  column1 datatype,</span><br><span class="line">  column2 datatype,</span><br><span class="line">  ...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*create table using another table*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> new_table_name <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">SELECT</span> column1, column2,...</span><br><span class="line">  <span class="keyword">FROM</span> existing_table_name</span><br><span class="line">  <span class="keyword">WHERE</span> condition;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">DROP Table</font></strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">ALTER Table</font></strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*add column*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> (column_name_1 datatype,</span><br><span class="line"> column_name_2 datatype);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*drop column*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*modify column*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> column_name datatype;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*rename table name*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TO</span> new_table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*rename column name*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">RENAME</span>|<span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> old_name <span class="keyword">TO</span> new_name;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="MEDIUMTURQUOISE">Constraints</font></strong>: includes <strong>NOT NULL</strong>, <strong>UNIQUE</strong>, <strong>PRIMARY KEY</strong>, <strong>FOREIGN KEY</strong>, <strong>CHECK</strong>, <strong>DEFAULT</strong>, <strong>INDEX</strong>. E.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_product`</span> (</span><br><span class="line">  <span class="comment">/*NOT NULL, auto increment*/</span></span><br><span class="line">  <span class="string">`product_id`</span> <span class="built_in">int</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`product_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Default*/</span></span><br><span class="line">  <span class="string">`product_desc`</span> <span class="built_in">varchar</span>(<span class="number">2000</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`shop_id`</span> <span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*Unique in MySQL*/</span></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`uc_id_name`</span> <span class="keyword">UNIQUE</span> (<span class="string">`product_id`</span>, <span class="string">`product_name`</span>),</span><br><span class="line">  <span class="comment">/*or we can write it as*/</span></span><br><span class="line">  <span class="keyword">UNIQUE</span> (<span class="string">`product_name`</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*primary key*/</span></span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`product_id`</span>),</span><br><span class="line">  <span class="comment">/*PK in MySQL*/</span></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`pk_product`</span> PRIMARY <span class="keyword">KEY</span> (<span class="string">`product_id`</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*FK in MySQL*/</span></span><br><span class="line">  <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(<span class="string">`shop_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`tb_shop`</span>(<span class="string">`shop_id`</span>),</span><br><span class="line">  <span class="comment">/*or */</span></span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fk_product_shop`</span> (<span class="string">`shop_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_product_shop`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="string">`shop_id`</span> <span class="keyword">REFERENCES</span> <span class="string">`tb_shop`</span>(<span class="string">`shop_id`</span>)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Add PK constraint*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`tb_shop`</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`pk_shop`</span> PRIMARY <span class="keyword">KEY</span> (<span class="string">`shop_id`</span>);</span><br><span class="line"><span class="comment">/*or*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`tb_shop`</span></span><br><span class="line"><span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (<span class="string">`shop_id`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Add Unique constraint*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`tb_shop`</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`product_shop_unique`</span> (<span class="string">`shop_id`</span> <span class="keyword">ASC</span>);</span><br></pre></td></tr></table></figure><h4 id="font-colordodgerblue6-dml-statementsfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue6-dml-statementsfont"></a> <font color="dodgerblue">6. DML Statements</font></h4><p><strong><font color="MEDIUMTURQUOISE">6.1 UPDATE</font></strong></p><p><strong>Syntax</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tb_name <span class="keyword">SET</span> column1 = value1, column2 = value2,...</span><br><span class="line"><span class="keyword">WHERE</span> condition;</span><br></pre></td></tr></table></figure><p><strong><font color="MEDIUMTURQUOISE">6.2 DELETE</font></strong></p><p><strong>Syntax</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_name <span class="keyword">WHERE</span> condition;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*delete all*/</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_name;</span><br><span class="line"><span class="comment">/*or*/</span></span><br><span class="line"><span class="keyword">DELETE</span> * <span class="keyword">FROM</span> tb_name;</span><br></pre></td></tr></table></figure><p><strong><font color="MEDIUMTURQUOISE">6.3 INSERT</font></strong></p><p><strong>Syntax</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_name <span class="keyword">VALUES</span> (value1, value2, value3, ...);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_name (column1, column2, column3,...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3,...);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* using SELECT in INSERT INTO Statement*/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_1 <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_2 <span class="keyword">WHERE</span> condition;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_1 (t1_column1) <span class="keyword">SELECT</span> t2_column1 <span class="keyword">FROM</span> table_2;</span><br></pre></td></tr></table></figure><a href="/2019/08/14/sql-notes-3/" title="next">next</a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sql&quot;&gt;&lt;/a&gt; SQL&lt;/h3&gt;
&lt;p&gt;&lt;font color=&quot;STEELBLUE&quot;&gt;&lt;strong&gt;Structured Query Language (SQL)&lt;/strong&gt;&lt;/font&gt; is a standard Database language which is used to create, maintain and retrieve the &lt;strong&gt;ralational database&lt;/strong&gt;. It is very useful in handling &lt;strong&gt;structured data&lt;/strong&gt; where there are &lt;strong&gt;relations&lt;/strong&gt; between different entities/variables of the data.&lt;/p&gt;
&lt;h4 id=&quot;font-colordodgerblue1-what-is-relational-databasefont&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-colordodgerblue1-what-is-relational-databasefont&quot;&gt;&lt;/a&gt; &lt;font color=&quot;dodgerblue&quot;&gt;1. What is Relational Database&lt;/font&gt;&lt;/h4&gt;
&lt;p style=&quot;background-color: cornsilk&quot;&gt;&lt;b&gt;Definition of &lt;font color=&quot;MEDIUMSLATEBLUE&quot;&gt;RDB&lt;/font&gt; from Wikipedia:&lt;/b&gt; A &lt;b&gt;relational database&lt;/b&gt; is a digital database based on &lt;b&gt;relational model&lt;/b&gt; of data. A software system used to maintain relational databases is a relational database management system (RDBMS). Virtually all relational database systems use SQL (Structured Query Language) for querying and maintaining the database.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Study Notes - SQL &amp; MySQL &amp; MyBatis</title>
    <link href="http://yoursite.com/2019/08/12/sql-notes-1/"/>
    <id>http://yoursite.com/2019/08/12/sql-notes-1/</id>
    <published>2019-08-12T17:29:21.000Z</published>
    <updated>2019-08-14T16:18:55.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p><font color="STEELBLUE"><strong>Structured Query Language (SQL)</strong></font> is a standard Database language which is used to create, maintain and retrieve the <strong>ralational database</strong>. It is very useful in handling <strong>structured data</strong> where there are <strong>relations</strong> between different entities/variables of the data. <font color="mediumspringgreen"><strong><a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL</a></strong></font> is an open-source relational database management system (RDBMS). It is popular used in many websites. <font color="mediumspringgreen"><strong><a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis</a></strong></font> is a first class <strong>persistence framework</strong> with support for the custom SQL, stored procedures and advanced mappings. MyBatis eliminates almost all of the JDBC code and manual setting of parameters and retireval of results. MyBatis can use <strong>simple XML</strong> or <strong>Annotations</strong> for configuration and map primitives, Map interfaces and Java POJOs (Plain Old Java Objects) to database records.</p><p>In this series of stuy notes, we will introduct basic knowlege of <strong>SQL</strong>, <strong>MySQL</strong>, <strong>MyBatis</strong> and how to use them.</p><ul><li><a href="/2019/08/12/sql-nodes-2/" title="SQL">SQL</a></li><li><a href="/2019/08/14/sql-notes-3/" title="MySQL">MySQL</a></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h3&gt;
&lt;p&gt;&lt;font color=&quot;STEELBLUE&quot;&gt;&lt;strong&gt;Structured
      
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Maximum of Absolute Value Expression</title>
    <link href="http://yoursite.com/2019/08/09/leetcodeQ1131/"/>
    <id>http://yoursite.com/2019/08/09/leetcodeQ1131/</id>
    <published>2019-08-09T21:30:01.000Z</published>
    <updated>2019-08-09T21:42:38.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1131-maximum-of-absolute-value-expression"><a class="markdownIt-Anchor" href="#leetcode-q-1131-maximum-of-absolute-value-expression"></a> LeetCode Q 1131 - Maximum of Absolute Value Expression</h1><p>Given two arrays of integers with equal lengths, return the maximum value of: <code>|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|</code><br>where the maximum is taken over all <code>0 &lt;= i, j &lt; arr1.length</code>.</p><p><strong>Example 1:</strong> <code>Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6] ; Output: 13</code><br><strong>Example 2:</strong> <code>Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4] ; Output: 20</code></p><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= arr1.length == arr2.length &lt;= 40000</code></li><li><code>-10^6 &lt;= arr1[i], arr2[i] &lt;= 10^6</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p>For equation <code>|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|</code>, if we remove the absolute value signal, then it has four cases regarding <code>i&gt;j</code>. They are,</p><ul><li><code>(arr1[i] + arr2[i] + i) - (arr1[j] + arr2[j] + j)</code>;</li><li><code>(arr1[i] - arr2[i] + i) - (arr1[j] - arr2[j] + j)</code>;</li><li><code>(-arr1[i] + arr2[i] + i) - (-arr1[j] + arr2[j] + j)</code>;</li><li><code>(-arr1[i] - arr2[i] + i) - (-arr1[i] - arr2[i] + j)</code>;</li></ul><p>So, we can define four arrays,</p><ul><li><code>a</code>: <code>arr1[i] + arr2[i] + i</code>;</li><li><code>b</code>: <code>arr1[i] - arr2[i] + i</code>;</li><li><code>c</code>: <code>-arr1[i] + arr2[i] + i</code>;</li><li><code>d</code>: <code>-arr1[i] - arr2[i] + i</code>;</li></ul><p>Find the maximum and minimum value in each array, get 4 candidates, and choose the largest one as the result.</p><p><strong>Code:</strong></p><figure class="highlight reasonml"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public <span class="built_in">int</span> max<span class="constructor">AbsValExpr(<span class="params">int</span>[] <span class="params">arr1</span>, <span class="params">int</span>[] <span class="params">arr2</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">int</span> n = arr1.length;</span><br><span class="line">  <span class="built_in">int</span><span class="literal">[]</span> a = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="identifier">n</span>]</span>, b = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="identifier">n</span>]</span>, c = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="identifier">n</span>]</span>, d = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="identifier">n</span>]</span>;</span><br><span class="line">  </span><br><span class="line">  for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    a<span class="literal">[<span class="identifier">i</span>]</span> = arr1<span class="literal">[<span class="identifier">i</span>]</span> + arr2<span class="literal">[<span class="identifier">i</span>]</span> + i;</span><br><span class="line">    b<span class="literal">[<span class="identifier">i</span>]</span> = arr1<span class="literal">[<span class="identifier">i</span>]</span> - arr2<span class="literal">[<span class="identifier">i</span>]</span> + i;</span><br><span class="line">    c<span class="literal">[<span class="identifier">i</span>]</span> = -arr1<span class="literal">[<span class="identifier">i</span>]</span> + arr2<span class="literal">[<span class="identifier">i</span>]</span> + i;</span><br><span class="line">    d<span class="literal">[<span class="identifier">i</span>]</span> = -arr1<span class="literal">[<span class="identifier">i</span>]</span> - arr2<span class="literal">[<span class="identifier">i</span>]</span> + i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> res = get<span class="constructor">Max(<span class="params">a</span>)</span> - get<span class="constructor">Min(<span class="params">a</span>)</span>;</span><br><span class="line">  res = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(get<span class="constructor">Max(<span class="params">b</span>)</span> - get<span class="constructor">Min(<span class="params">b</span>)</span>, res);</span><br><span class="line">  res = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(get<span class="constructor">Max(<span class="params">c</span>)</span> - get<span class="constructor">Min(<span class="params">c</span>)</span>, res);</span><br><span class="line">  res = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(get<span class="constructor">Max(<span class="params">d</span>)</span> - get<span class="constructor">Min(<span class="params">d</span>)</span>, res);</span><br><span class="line">  </span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> get<span class="constructor">Max(<span class="params">int</span>[] <span class="params">arr</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">int</span> res = arr<span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line">  for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) res = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(arr<span class="literal">[<span class="identifier">i</span>]</span>, res);</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> get<span class="constructor">Min(<span class="params">int</span>[] <span class="params">arr</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">int</span> res = arr<span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line">  for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) res = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>min(arr<span class="literal">[<span class="identifier">i</span>]</span>, res);</span><br><span class="line">  return res;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1131-maximum-of-absolute-value-expression&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1131-maximum-of-absolute-value-expression&quot;&gt;&lt;/a&gt; LeetCode Q 1131 - Maximum of Absolute Value Expression&lt;/h1&gt;
&lt;p&gt;Given two arrays of integers with equal lengths, return the maximum value of: &lt;code&gt;|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|&lt;/code&gt;&lt;br&gt;
where the maximum is taken over all &lt;code&gt;0 &amp;lt;= i, j &amp;lt; arr1.length&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6] ; Output: 13&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4] ; Output: 20&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= arr1.length == arr2.length &amp;lt;= 40000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^6 &amp;lt;= arr1[i], arr2[i] &amp;lt;= 10^6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Convert Sorted Array to Binary Search Tree</title>
    <link href="http://yoursite.com/2019/08/09/leetcodeQ108/"/>
    <id>http://yoursite.com/2019/08/09/leetcodeQ108/</id>
    <published>2019-08-09T20:46:15.000Z</published>
    <updated>2019-08-09T21:06:23.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-108-convert-sorted-array-to-binary-search-tree"><a class="markdownIt-Anchor" href="#leetcode-q-108-convert-sorted-array-to-binary-search-tree"></a> LeetCode Q 108 - Convert Sorted Array to Binary Search Tree</h1><p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.<br>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p><p><strong>Example:</strong> <code>Given the sorted array: [-10,-3,0,5,9]</code><br><code>One possible answer is: [0,-3,9,-10,null,5]</code></p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight vbscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode sortedArrayToBST(<span class="built_in">int</span>[] nums) &#123;</span><br><span class="line">  return dfs(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode dfs(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> <span class="built_in">left</span>, <span class="built_in">int</span> <span class="built_in">right</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">left</span> &gt; <span class="built_in">right</span>) return <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">left</span> == <span class="built_in">right</span>) return <span class="keyword">new</span> TreeNode(nums[<span class="built_in">left</span>]);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">int</span> <span class="built_in">mid</span> = <span class="built_in">left</span> + (<span class="built_in">right</span> - <span class="built_in">left</span>) / <span class="number">2</span>;</span><br><span class="line">  TreeNode n = <span class="keyword">new</span> TreeNode(nums[<span class="built_in">mid</span>]);</span><br><span class="line">  n.<span class="built_in">left</span> = dfs(nums, <span class="built_in">left</span>, <span class="built_in">mid</span> - <span class="number">1</span>);</span><br><span class="line">  n.<span class="built_in">right</span> = dfs(nums, <span class="built_in">mid</span> + <span class="number">1</span>, <span class="built_in">right</span>);</span><br><span class="line">  </span><br><span class="line">  return n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-108-convert-sorted-array-to-binary-search-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-108-convert-sorted-array-to-binary-search-tree&quot;&gt;&lt;/a&gt; LeetCode Q 108 - Convert Sorted Array to Binary Search Tree&lt;/h1&gt;
&lt;p&gt;Given an array where elements are sorted in ascending order, convert it to a height balanced BST.&lt;br&gt;
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Given the sorted array: [-10,-3,0,5,9]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;One possible answer is: [0,-3,9,-10,null,5]&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Stone Game II</title>
    <link href="http://yoursite.com/2019/08/09/leetcodeQ1140/"/>
    <id>http://yoursite.com/2019/08/09/leetcodeQ1140/</id>
    <published>2019-08-09T20:15:05.000Z</published>
    <updated>2019-08-09T20:45:07.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1140-stone-game-ii"><a class="markdownIt-Anchor" href="#leetcode-q-1140-stone-game-ii"></a> LeetCode Q 1140 - Stone Game II</h1><p>Alex and Lee continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones.<br>Alex and Lee take turns, with Alex starting first.  Initially, <code>M = 1</code>.<br>On each player’s turn, that player can take all the stones in the first X remaining piles, where <code>1 &lt;= X &lt;= 2M</code>.  Then, we set <code>M = max(M, X</code>.<br>The game continues until all the stones have been taken.<br>Assuming Alex and Lee play optimally, return the maximum number of stones Alex can get.</p><p><strong>Example 1:</strong> <code>Input: piles = [2,7,9,4,4] ; Output: 10</code><br>Explanation:  If Alex takes one pile at the beginning, Lee takes two piles, then Alex takes <code>2</code> piles again. Alex can get <code>2 + 4 + 4 = 10</code> piles in total. If Alex takes two piles at the beginning, then Lee can take all three piles left. In this case, Alex get <code>2 + 7 = 9</code> piles in total. So we return <code>10</code> since it’s larger.</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= piles.length &lt;= 100</code></li><li><code>1 &lt;= piles[i] &lt;= 10 ^ 4</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight glsl"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] memo;</span><br><span class="line"><span class="type">int</span>[] sums;</span><br><span class="line">public <span class="type">int</span> stoneGameII(<span class="type">int</span>[] piles) &#123;</span><br><span class="line">  <span class="type">int</span> len = piles.<span class="built_in">length</span>;</span><br><span class="line">  memo = new <span class="type">int</span>[len][len];</span><br><span class="line">  sums = new <span class="type">int</span>[len];</span><br><span class="line">  </span><br><span class="line">  sums[len - <span class="number">1</span>] = piles[len - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    sums[i] = sums[i + <span class="number">1</span>] + piles[i];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> backtrack(piles, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private <span class="type">int</span> backtrack(<span class="type">int</span>[] piles, <span class="type">int</span> <span class="keyword">index</span>, <span class="type">int</span> M) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">index</span> &gt;= piles.<span class="built_in">length</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// the nex person can get all left stones</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="number">2</span> * M &gt;= piles.<span class="built_in">length</span> - <span class="keyword">index</span>) <span class="keyword">return</span> sums[<span class="keyword">index</span>]; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (memo[<span class="keyword">index</span>][M] != <span class="number">0</span>) <span class="keyword">return</span> memo[<span class="keyword">index</span>][M];</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> <span class="built_in">min</span> = Integer.MAX_VALUE; <span class="comment">//the min value the next player can get</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * M; i++) &#123;</span><br><span class="line">      <span class="built_in">min</span> = Math.<span class="built_in">min</span>(<span class="built_in">min</span>, backtrack(piles, <span class="keyword">index</span> + i, Math.<span class="built_in">max</span>(i, M)));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//max stones = all the left stones - the min stones next player can get</span></span><br><span class="line">  memo[<span class="keyword">index</span>][M] = sums[<span class="keyword">index</span>] - <span class="built_in">min</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> memo[<span class="keyword">index</span>][M];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1140-stone-game-ii&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1140-stone-game-ii&quot;&gt;&lt;/a&gt; LeetCode Q 1140 - Stone Game II&lt;/h1&gt;
&lt;p&gt;Alex and Lee continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones.&lt;br&gt;
Alex and Lee take turns, with Alex starting first.  Initially, &lt;code&gt;M = 1&lt;/code&gt;.&lt;br&gt;
On each player’s turn, that player can take all the stones in the first X remaining piles, where &lt;code&gt;1 &amp;lt;= X &amp;lt;= 2M&lt;/code&gt;.  Then, we set &lt;code&gt;M = max(M, X&lt;/code&gt;.&lt;br&gt;
The game continues until all the stones have been taken.&lt;br&gt;
Assuming Alex and Lee play optimally, return the maximum number of stones Alex can get.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: piles = [2,7,9,4,4] ; Output: 10&lt;/code&gt;&lt;br&gt;
Explanation:  If Alex takes one pile at the beginning, Lee takes two piles, then Alex takes &lt;code&gt;2&lt;/code&gt; piles again. Alex can get &lt;code&gt;2 + 4 + 4 = 10&lt;/code&gt; piles in total. If Alex takes two piles at the beginning, then Lee can take all three piles left. In this case, Alex get &lt;code&gt;2 + 7 = 9&lt;/code&gt; piles in total. So we return &lt;code&gt;10&lt;/code&gt; since it’s larger.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= piles.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= piles[i] &amp;lt;= 10 ^ 4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Backtracking" scheme="http://yoursite.com/tags/Backtracking/"/>
    
      <category term="Memorization" scheme="http://yoursite.com/tags/Memorization/"/>
    
  </entry>
  
  <entry>
    <title>Largest 1-Bordered Square</title>
    <link href="http://yoursite.com/2019/08/09/leetcodeQ1139/"/>
    <id>http://yoursite.com/2019/08/09/leetcodeQ1139/</id>
    <published>2019-08-09T20:01:36.000Z</published>
    <updated>2019-08-09T20:15:22.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1139-largest-1-bordered-square"><a class="markdownIt-Anchor" href="#leetcode-q-1139-largest-1-bordered-square"></a> LeetCode Q 1139 - Largest 1-Bordered Square</h1><p>Given a 2D grid of <code>0</code>s and <code>1</code>s, return the number of elements in the largest square subgrid that has all <code>1</code>s on its border, or <code>0</code> if such a subgrid doesn’t exist in the grid.</p><p><strong>Example 1:</strong> <code>Input: grid = [[1,1,1],[1,0,1],[1,1,1]] ; Output: 9</code><br><strong>Example 2:</strong> <code>Input: grid = [[1,1,0,0]] ; Output: 1</code></p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><code>hor[i][j]</code>: means the length of the longest line of <code>'1</code>'s starting from <code>(i, j)</code> and going left.<br><code>ver[i][j]</code>: means the length of the longest line of <code>'1'</code>s starting from <code>(i, j)</code> and going up.</p><p><strong>Code:</strong></p><figure class="highlight angelscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> largest1BorderedSquare(<span class="built_in">int</span>[][] grid) &#123;</span><br><span class="line">  <span class="built_in">int</span> R = grid.length, C = grid[<span class="number">0</span>].length;</span><br><span class="line">  <span class="built_in">int</span>[][] hor = new <span class="built_in">int</span>[R][C], ver = new <span class="built_in">int</span>[R][C]; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> r = <span class="number">0</span>; r &lt; R; r++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> c = <span class="number">0</span>; c &lt; C; c++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (grid[r][c] == <span class="number">1</span>) &#123;</span><br><span class="line">      hor[r][c] = c == <span class="number">0</span> ? <span class="number">1</span> : hor[r][c - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        ver[r][c] = r == <span class="number">0</span> ? <span class="number">1</span> : ver[r - <span class="number">1</span>][c] + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> r = R - <span class="number">1</span>; r &gt;=<span class="number">0</span> ; r--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> c = C - <span class="number">1</span>; c &gt;= <span class="number">0</span>; c--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (grid[r][c] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="built_in">int</span> edge = Math.min(hor[r][c], ver[r][c]);</span><br><span class="line">      <span class="keyword">while</span> (edge &gt; max) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hor[r-edge+<span class="number">1</span>][c] &gt;= edge &amp;&amp; ver[r][c-edge+<span class="number">1</span>] &gt;= edge) &#123;</span><br><span class="line">          max = edge;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        edge--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> max * max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1139-largest-1-bordered-square&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1139-largest-1-bordered-square&quot;&gt;&lt;/a&gt; LeetCode Q 1139 - Largest 1-Bordered Square&lt;/h1&gt;
&lt;p&gt;Given a 2D grid of &lt;code&gt;0&lt;/code&gt;s and &lt;code&gt;1&lt;/code&gt;s, return the number of elements in the largest square subgrid that has all &lt;code&gt;1&lt;/code&gt;s on its border, or &lt;code&gt;0&lt;/code&gt; if such a subgrid doesn’t exist in the grid.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: grid = [[1,1,1],[1,0,1],[1,1,1]] ; Output: 9&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: grid = [[1,1,0,0]] ; Output: 1&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Greedy" scheme="http://yoursite.com/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>Alphabet Board Path</title>
    <link href="http://yoursite.com/2019/08/09/leetcode1138/"/>
    <id>http://yoursite.com/2019/08/09/leetcode1138/</id>
    <published>2019-08-09T18:36:19.000Z</published>
    <updated>2019-08-09T20:01:25.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1138-alphabet-board-path"><a class="markdownIt-Anchor" href="#leetcode-q-1138-alphabet-board-path"></a> LeetCode Q 1138 - Alphabet Board Path</h1><p>On an alphabet board, we start at position <code>(0, 0)</code>, corresponding to character <code>board[0][0]</code>.<br>Here, <code>board = [&quot;abcde&quot;, &quot;fghij&quot;, &quot;klmno&quot;, &quot;pqrst&quot;, &quot;uvwxy&quot;, &quot;z&quot;]</code>, as shown in the diagram below.</p><p>We may make the following moves:</p><ul><li><code>'U'</code> moves our position up one row, if the position exists on the board;</li><li><code>'D'</code> moves our position down one row, if the position exists on the board;</li><li><code>'L'</code> moves our position left one column, if the position exists on the board;</li><li><code>'R'</code> moves our position right one column, if the position exists on the board;</li><li><code>'!'</code> adds the character <code>board[r][c]</code> at our current position <code>(r, c)</code> to the answer.<br>(Here, the only positions that exist on the board are positions with letters on them.)</li></ul><p>Return a sequence of moves that makes our answer equal to target in the minimum number of moves.  You may return any path that does so.</p><p><strong>Example 1:</strong> <code>Input: target = &quot;leet&quot; ; Output: &quot;DDR!UURRR!!DDD!&quot;</code><br><strong>Example 2:</strong> <code>Input: target = &quot;code&quot; ; Output: &quot;RR!DDRR!UUL!R!&quot;</code></p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= target.length &lt;= 100</code></li><li>target consists only of English lowercase letters.</li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p>Be careful about the move sequence. <code>'U'</code> should appear before <code>R</code>, and <code>L</code> should appear before <code>D</code>.</p><p><strong>Code:</strong></p><figure class="highlight processing"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> alphabetBoardPath(<span class="keyword">String</span> target) &#123;</span><br><span class="line">  Map&lt;Character, <span class="built_in">int</span>[]&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;(); </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">map</span>.put((<span class="built_in">char</span>)(<span class="string">'a'</span> + i), <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;i / <span class="number">5</span>, i % <span class="number">5</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">  <span class="built_in">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">char</span> ch: target.toCharArray()) &#123;</span><br><span class="line">    <span class="built_in">int</span> nr = <span class="built_in">map</span>.<span class="built_in">get</span>(ch)[<span class="number">0</span>], nc = <span class="built_in">map</span>.<span class="built_in">get</span>(ch)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (r &gt; nr) &#123; r--; sb.<span class="built_in">append</span>(<span class="string">'U'</span>)&#125;;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; nc) &#123; c++; sb.<span class="built_in">append</span>(<span class="string">'R'</span>)&#125;;</span><br><span class="line">    <span class="keyword">while</span> (c &gt; nc) &#123; c--; sb.<span class="built_in">append</span>(<span class="string">'L'</span>)&#125;;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; nr) &#123; r++; sb.<span class="built_in">append</span>(<span class="string">'D'</span>)&#125;;</span><br><span class="line">    sb.<span class="built_in">append</span>(<span class="string">'!'</span>);</span><br><span class="line">    r = nr; c = nc;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1138-alphabet-board-path&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1138-alphabet-board-path&quot;&gt;&lt;/a&gt; LeetCode Q 1138 - Alphabet Board Path&lt;/h1&gt;
&lt;p&gt;On an alphabet board, we start at position &lt;code&gt;(0, 0)&lt;/code&gt;, corresponding to character &lt;code&gt;board[0][0]&lt;/code&gt;.&lt;br&gt;
Here, &lt;code&gt;board = [&amp;quot;abcde&amp;quot;, &amp;quot;fghij&amp;quot;, &amp;quot;klmno&amp;quot;, &amp;quot;pqrst&amp;quot;, &amp;quot;uvwxy&amp;quot;, &amp;quot;z&amp;quot;]&lt;/code&gt;, as shown in the diagram below.&lt;/p&gt;
&lt;p&gt;We may make the following moves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;U&#39;&lt;/code&gt; moves our position up one row, if the position exists on the board;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;D&#39;&lt;/code&gt; moves our position down one row, if the position exists on the board;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;L&#39;&lt;/code&gt; moves our position left one column, if the position exists on the board;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;R&#39;&lt;/code&gt; moves our position right one column, if the position exists on the board;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;!&#39;&lt;/code&gt; adds the character &lt;code&gt;board[r][c]&lt;/code&gt; at our current position &lt;code&gt;(r, c)&lt;/code&gt; to the answer.&lt;br&gt;
(Here, the only positions that exist on the board are positions with letters on them.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Return a sequence of moves that makes our answer equal to target in the minimum number of moves.  You may return any path that does so.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: target = &amp;quot;leet&amp;quot; ; Output: &amp;quot;DDR!UURRR!!DDD!&amp;quot;&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: target = &amp;quot;code&amp;quot; ; Output: &amp;quot;RR!DDRR!UUL!R!&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;target consists only of English lowercase letters.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Greedy" scheme="http://yoursite.com/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>Valid Parenthesis String</title>
    <link href="http://yoursite.com/2019/08/09/leetcodeQ678/"/>
    <id>http://yoursite.com/2019/08/09/leetcodeQ678/</id>
    <published>2019-08-09T17:54:17.000Z</published>
    <updated>2019-08-09T19:39:38.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-678-valid-parenthesis-string"><a class="markdownIt-Anchor" href="#leetcode-q-678-valid-parenthesis-string"></a> LeetCode Q 678 - Valid Parenthesis String</h1><p>Given a string containing only three types of characters: <code>'('</code>, <code>')'</code> and <code>'*'</code>, write a function to check whether this string is valid. We define the validity of a string by these rules:</p><ul><li>Any left parenthesis <code>'('</code> must have a corresponding right parenthesis <code>')'</code>.</li><li>Any right parenthesis <code>')'</code> must have a corresponding left parenthesis <code>'('</code>.</li><li>Left parenthesis <code>'('</code> must go before the corresponding right parenthesis <code>')'</code>.</li><li><code>'*'</code> could be treated as a single right parenthesis <code>')'</code> or a single left parenthesis <code>'('</code> or an empty string.</li><li>An empty string is also valid.</li></ul><p><strong>Example 1:</strong> <code>Input: &quot;()&quot; ; Output: True</code><br><strong>Example 2:</strong> <code>Input: &quot;(*)&quot; ; Output: True</code><br><strong>Example 3:</strong> <code>Input: &quot;(*))&quot; ; Output: True</code></p><p><strong>Note:</strong> The string size will be in the range [1, 100].</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><h3 id="solution-1-brute-force"><a class="markdownIt-Anchor" href="#solution-1-brute-force"></a> Solution 1: Brute-Force</h3><p><strong>Code:</strong></p><figure class="highlight axapta"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> checkValidString(String s) &#123;</span><br><span class="line">  <span class="keyword">return</span> helper(s.toCharArray(), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> helper(<span class="keyword">char</span>[] chs, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="keyword">count</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">count</span> &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; chs.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (chs[i] == <span class="string">'('</span>) &#123;</span><br><span class="line">      <span class="keyword">count</span>++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chs[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">count</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">count</span>--;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> helper(chs, start + <span class="number">1</span>, <span class="keyword">count</span> + <span class="number">1</span>) || helper(chs, start  <span class="number">1</span>, <span class="keyword">count</span> - <span class="number">1</span>) || helper(chs, start + <span class="number">1</span>, <span class="keyword">count</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">count</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="solution-2-greedy"><a class="markdownIt-Anchor" href="#solution-2-greedy"></a> Solution 2: Greedy</h2><p>If we don’t have <code>'*'</code> in the string, we just need to count <code>'('</code>s and <code>')'</code>s. Whenever meeting a <code>'('</code> do <code>count++</code> and meeting a <code>')'</code> do <code>count--</code>. When finish traversing the string, check if <code>count==0</code>.</p><p>Now, the key point is how to deal with <code>'*'</code>, we can regard it as a <code>'('</code> or as a <code>')'</code> or just leave it alone. This impacts the <code>count</code>. So when we are at a specific index, the <code>count</code> is not fixed.</p><p>We use two constants, one is <code>low</code>, lower bound of <code>count</code>, another is <code>high</code>, upper bound of <code>count</code>.</p><ul><li>For <code>low</code>, we take <code>'*'</code> as <code>')'</code> if there are more <code>'('</code>s.</li><li>For <code>high</code>, we take <code>'*'</code> as <code>'('</code>.</li></ul><p>So,</p><ul><li>if <code>high &lt; 0</code> means too much <code>')'</code>s</li><li>if <code>low &gt; 0</code> , after the count finished, means too much <code>'('</code>s.</li></ul><p><strong>Code:</strong></p><figure class="highlight angelscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span>ean checkValidString(String s) &#123;</span><br><span class="line">  <span class="built_in">int</span> low = <span class="number">0</span>, high = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (char ch: s.toCharArray()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'('</span>) &#123;</span><br><span class="line">      low++; high++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">')'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (low &gt; <span class="number">0</span>) low--;</span><br><span class="line">      high--;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (low &gt; <span class="number">0</span>) low--;</span><br><span class="line">      high++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (high &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> low == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-678-valid-parenthesis-string&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-678-valid-parenthesis-string&quot;&gt;&lt;/a&gt; LeetCode Q 678 - Valid Parenthesis String&lt;/h1&gt;
&lt;p&gt;Given a string containing only three types of characters: &lt;code&gt;&#39;(&#39;&lt;/code&gt;, &lt;code&gt;&#39;)&#39;&lt;/code&gt; and &lt;code&gt;&#39;*&#39;&lt;/code&gt;, write a function to check whether this string is valid. We define the validity of a string by these rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any left parenthesis &lt;code&gt;&#39;(&#39;&lt;/code&gt; must have a corresponding right parenthesis &lt;code&gt;&#39;)&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Any right parenthesis &lt;code&gt;&#39;)&#39;&lt;/code&gt; must have a corresponding left parenthesis &lt;code&gt;&#39;(&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Left parenthesis &lt;code&gt;&#39;(&#39;&lt;/code&gt; must go before the corresponding right parenthesis &lt;code&gt;&#39;)&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;*&#39;&lt;/code&gt; could be treated as a single right parenthesis &lt;code&gt;&#39;)&#39;&lt;/code&gt; or a single left parenthesis &lt;code&gt;&#39;(&#39;&lt;/code&gt; or an empty string.&lt;/li&gt;
&lt;li&gt;An empty string is also valid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: &amp;quot;()&amp;quot; ; Output: True&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: &amp;quot;(*)&amp;quot; ; Output: True&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: &amp;quot;(*))&amp;quot; ; Output: True&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The string size will be in the range [1, 100].&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Greedy" scheme="http://yoursite.com/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>Encode important configuration information with DES</title>
    <link href="http://yoursite.com/2019/08/08/coding-PropertyPlaceholderConfigurer/"/>
    <id>http://yoursite.com/2019/08/08/coding-PropertyPlaceholderConfigurer/</id>
    <published>2019-08-08T17:33:30.000Z</published>
    <updated>2019-08-08T19:07:03.726Z</updated>
    
    <content type="html"><![CDATA[<p>In some projects, we exposed our username and password of mySql in file <code>.properties</code>, which is not safe. To solve this issue, in this post we will introduct, 1) how to use <em><strong>DES</strong></em> to encode and decode information, 2) how to customized the resolution of <code>${...}</code> placeholders against local properties based on class <code>PropertyPlaceholderConfigurer</code>.</p><a id="more"></a><h2 id="font-colordodgerblue1-des-font"><a class="markdownIt-Anchor" href="#font-colordodgerblue1-des-font"></a> <font color="dodgerblue">1. DES </font></h2><p>The <strong>Data Encryption Standard (DES)</strong> is a symmetric-key algorithm for the encryption of data. To encrypt our important information, we need to write a <code>DESUtil</code> at first, which is responsible to encrypt and decrypt strings. In <code>DESUtil</code> we first need to generate a key for encrption. Then we can write <code>getEncryptString(...)</code> and <code>getDecryptString(...)</code> methods. The code in <code>DESUtil</code> is shown as follows.</p><details><summary>CODE</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DES algorithm for Encoding and Decoding configuration properties in our project</span></span><br><span class="line"><span class="comment"> * It is a symmetric Security algorithm,</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DESUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Key key;</span><br><span class="line">    <span class="comment">//setting key</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String KEY_STR = <span class="string">"mykey"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String CHARSETNAME = <span class="string">"UTF-8"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String ALGORITHM = <span class="string">"DES"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * generate key for encoding</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// create a generator instance for generating code using DES algorithm</span></span><br><span class="line">            KeyGenerator generator = KeyGenerator.getInstance(ALGORITHM);</span><br><span class="line">            <span class="comment">// Using SHA1 security strategy</span></span><br><span class="line">            SecureRandom secureRandom = SecureRandom.getInstance(<span class="string">"SHA1PRNG"</span>);</span><br><span class="line">            <span class="comment">// Setting seed</span></span><br><span class="line">            secureRandom.setSeed(KEY_STR.getBytes());</span><br><span class="line">            generator.init(secureRandom);</span><br><span class="line">            key = generator.generateKey();</span><br><span class="line">            generator = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * To Encrypt a String</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str:String need to Encrypt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getEncryptString</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//BASE64 Encoding, receiving byte[] array and change it to String</span></span><br><span class="line">        BASE64Encoder base64Decoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Encoding way:UTF-8</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = str.getBytes(CHARSETNAME);</span><br><span class="line">            <span class="comment">// create a cipher based on DES algorithm</span></span><br><span class="line">            Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">            <span class="comment">// using generated key to init the cipher</span></span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">            <span class="comment">// get the encrypted bytes</span></span><br><span class="line">            <span class="keyword">byte</span>[] doFinal = cipher.doFinal(bytes);</span><br><span class="line">            <span class="comment">// return the encrypted String</span></span><br><span class="line">            <span class="keyword">return</span> base64Decoder.encode(doFinal);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span>handle exception</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDecryptString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        BASE64Decoder base64Decoder = <span class="keyword">new</span> BASE64Decoder();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//Encoding way:UTF-8</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = base64Decoder.decodeBuffer(str);</span><br><span class="line">            <span class="comment">//get he cipher instance</span></span><br><span class="line">            Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">            <span class="comment">// using the generated key</span></span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE,key);</span><br><span class="line">            <span class="comment">// get the decoded byte stream</span></span><br><span class="line">            <span class="keyword">byte</span>[] doFinal = cipher.doFinal(bytes);</span><br><span class="line">            <span class="comment">// change it to string using UTF_8 charset</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(doFinal,CHARSETNAME);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span>handle exception</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(getEncryptString(<span class="string">"username"</span>));</span><br><span class="line">        System.out.println(getEncryptString(<span class="string">"password"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="font-colordodgerblue2-propertyplaceholderconfigurerfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue2-propertyplaceholderconfigurerfont"></a> <font color="dodgerblue">2. PropertyPlaceholderConfigurer</font></h2><p><code>PlaceholderConfigurer</code>(org.springframework.beans.factory.config) subclass that resolves <code>${...}</code> placeholders against local properties and/or system properties and environment variables.</p><p>To enable encryption and decryption of placeholders in our configuration files with <strong>DES</strong>, first we create a class <code>EncryptPropertyPlaceholderConfigurer</code> which extends <code>PlaceholderConfigurer</code>. In this class, we override method <code>convertProperty</code> to realizing the convertion using DES.</p><details><summary>CODE</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptPropertyPlaceholderConfigurer</span> <span class="keyword">extends</span> <span class="title">PropertyPlaceholderConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// all the String need to decryptStirng</span></span><br><span class="line">    <span class="keyword">private</span> String[] encryptPropNames = &#123;<span class="string">"jdbc.username"</span>,<span class="string">"jdbc.password"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * return the property value of the corresponding property value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> propertyName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> propertyValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">convertProperty</span><span class="params">(String propertyName, String propertyValue)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(isEncryptProp(propertyName))&#123;</span><br><span class="line">            String decryptValue = DESUtil.getDecryptString(propertyValue);</span><br><span class="line">            <span class="keyword">return</span> decryptValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> propertyValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * verify if that property has encrypted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> propertyName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEncryptProp</span><span class="params">(String propertyName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String encryptPropName:encryptPropNames)&#123;</span><br><span class="line">            <span class="keyword">if</span>(propertyName.equals(encryptPropName)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>Then we need to create a bean to tell spring use created <code>EncryptPropertyPlaceholderConfigurer</code> to reolve system properties. Previous, we only appoint the location where to find <code>${...}</code> placeholders like</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-holder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Now we define a bean like this.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.example.o2o.util.EncryptPropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:jdbc.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:redis.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In some projects, we exposed our username and password of mySql in file &lt;code&gt;.properties&lt;/code&gt;, which is not safe. To solve this issue, in this post we will introduct, 1) how to use &lt;em&gt;&lt;strong&gt;DES&lt;/strong&gt;&lt;/em&gt; to encode and decode information, 2) how to customized the resolution of &lt;code&gt;${...}&lt;/code&gt; placeholders against local properties based on class &lt;code&gt;PropertyPlaceholderConfigurer&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Project" scheme="http://yoursite.com/tags/Project/"/>
    
      <category term="PropertyPlaceholderConfigurer" scheme="http://yoursite.com/tags/PropertyPlaceholderConfigurer/"/>
    
  </entry>
  
  <entry>
    <title>Video Stitching</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ1024/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ1024/</id>
    <published>2019-08-07T21:04:56.000Z</published>
    <updated>2019-08-07T21:22:12.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1024-video-stitching"><a class="markdownIt-Anchor" href="#leetcode-q-1024-video-stitching"></a> LeetCode Q 1024 - Video Stitching</h1><p>You are given a series of video clips from a sporting event that lasted <code>T</code> seconds.  These video clips can be overlapping with each other and have varied lengths.<br>Each video clip <code>clips[i]</code> is an interval: it starts at time <code>clips[i][0]</code> and ends at time <code>clips[i][1]</code>.  We can cut these clips into segments freely: for example, a clip <code>[0, 7]</code> can be cut into segments <code>[0, 1] + [1, 3] + [3, 7]</code>.<br>Return the <strong>minimum</strong> number of clips needed so that we can cut the clips into segments that cover the entire sporting event (<code>[0, T]</code>).  If the task is <strong>impossible</strong>, return <code>-1</code>.</p><p><strong>Example 1:</strong> <code>Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10 ; Output: 3</code><br>Explanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.<br>Then, we can reconstruct the sporting event as follows:<br>We cut [1,9] into segments [1,2] + [2,8] + [8,9].<br>Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].<br><strong>Example 2:</strong> <code>Input: clips = [[0,1],[1,2]], T = 5 ; Output: -1</code><br>Explanation: We can’t cover [0,5] with only [0,1] and [0,2].<br><strong>Example 3:</strong> <code>Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9 ; Output: 3</code><br>Explanation: We can take clips [0,4], [4,7], and [6,9].<br><strong>Example 4:</strong> <code>Input: clips = [[0,4],[2,8]], T = 5 ; Output: 2</code><br>Explanation: Notice you can have extra video after the event ends.</p><p><strong>Note:</strong></p><ul><li><code>1 &lt;= clips.length &lt;= 100</code></li><li><code>0 &lt;= clips[i][0], clips[i][1] &lt;= 100</code></li><li><code>0 &lt;= T &lt;= 100</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><h2 id="solution-1-sorting"><a class="markdownIt-Anchor" href="#solution-1-sorting"></a> Solution 1: Sorting</h2><p><strong>Code:</strong></p><figure class="highlight angelscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> videoStitching(<span class="built_in">int</span>[][] clips, <span class="built_in">int</span> T) &#123;</span><br><span class="line">  Arrays.sort(clips, (a, b) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">0</span>] == b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> len = clips.length;</span><br><span class="line">  <span class="keyword">if</span> (clips[<span class="number">0</span>][<span class="number">0</span>] != <span class="number">0</span> || clips[len - <span class="number">1</span>][<span class="number">1</span>] &lt; T) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">int</span> curEnd = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (curEnd &lt; clips[i][<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">int</span> maxEnd = curMax;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len &amp;&amp; clips[i][<span class="number">0</span>] &lt;= curEnd) &#123;</span><br><span class="line">      maxEnd = Math.max(maxEnd, clips[i++][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    curEnd = maxEnd;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (curEnd &gt;= T) <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="solution-2-dp-todo"><a class="markdownIt-Anchor" href="#solution-2-dp-todo"></a> Solution 2: DP (TODO)</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1024-video-stitching&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1024-video-stitching&quot;&gt;&lt;/a&gt; LeetCode Q 1024 - Video Stitching&lt;/h1&gt;
&lt;p&gt;You are given a series of video clips from a sporting event that lasted &lt;code&gt;T&lt;/code&gt; seconds.  These video clips can be overlapping with each other and have varied lengths.&lt;br&gt;
Each video clip &lt;code&gt;clips[i]&lt;/code&gt; is an interval: it starts at time &lt;code&gt;clips[i][0]&lt;/code&gt; and ends at time &lt;code&gt;clips[i][1]&lt;/code&gt;.  We can cut these clips into segments freely: for example, a clip &lt;code&gt;[0, 7]&lt;/code&gt; can be cut into segments &lt;code&gt;[0, 1] + [1, 3] + [3, 7]&lt;/code&gt;.&lt;br&gt;
Return the &lt;strong&gt;minimum&lt;/strong&gt; number of clips needed so that we can cut the clips into segments that cover the entire sporting event (&lt;code&gt;[0, T]&lt;/code&gt;).  If the task is &lt;strong&gt;impossible&lt;/strong&gt;, return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10 ; Output: 3&lt;/code&gt;&lt;br&gt;
Explanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.&lt;br&gt;
Then, we can reconstruct the sporting event as follows:&lt;br&gt;
We cut [1,9] into segments [1,2] + [2,8] + [8,9].&lt;br&gt;
Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: clips = [[0,1],[1,2]], T = 5 ; Output: -1&lt;/code&gt;&lt;br&gt;
Explanation: We can’t cover [0,5] with only [0,1] and [0,2].&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9 ; Output: 3&lt;/code&gt;&lt;br&gt;
Explanation: We can take clips [0,4], [4,7], and [6,9].&lt;br&gt;
&lt;strong&gt;Example 4:&lt;/strong&gt; &lt;code&gt;Input: clips = [[0,4],[2,8]], T = 5 ; Output: 2&lt;/code&gt;&lt;br&gt;
Explanation: Notice you can have extra video after the event ends.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= clips.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= clips[i][0], clips[i][1] &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= T &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Matrix Cells in Distance Order</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ1030/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ1030/</id>
    <published>2019-08-07T20:10:03.000Z</published>
    <updated>2019-08-07T21:17:28.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1030-matrix-cells-in-distance-order"><a class="markdownIt-Anchor" href="#leetcode-q-1030-matrix-cells-in-distance-order"></a> LeetCode Q 1030 - Matrix Cells in Distance Order</h1><p>We are given a matrix with <code>R</code> rows and <code>C</code> columns has cells with integer coordinates <code>(r, c)</code>, where <code>0 &lt;= r &lt; R</code> and <code>0 &lt;= c &lt; C</code>.<br>Additionally, we are given a cell in that matrix with coordinates <code>(r0, c0)</code>.<br>Return the coordinates of all cells in the matrix, sorted by their distance from <code>(r0, c0)</code> from smallest distance to largest distance. Here, the distance between two cells <code>(r1, c1)</code> and <code>(r2, c2)</code> is the Manhattan distance, <code>|r1 - r2| + |c1 - c2|</code>.  (You may return the answer in any order that satisfies this condition.)</p><p><strong>Example 1:</strong> <code>Input: R = 1, C = 2, r0 = 0, c0 = 0 ; Output: [[0,0],[0,1]]</code><br>Explanation: The distances from <code>(r0, c0)</code> to other cells are: <code>[0,1]</code><br><strong>Example 2:</strong> <code>Input: R = 2, C = 2, r0 = 0, c0 = 1 ; Output: [[0,1],[0,0],[1,1],[1,0]]</code><br>Explanation: The distances from <code>(r0, c0)</code> to other cells are: <code>[0,1,1,2]</code><br>The answer <code>[[0,1],[1,1],[0,0],[1,0]]</code> would also be accepted as correct.<br><strong>Example 3:</strong> <code>Input: R = 2, C = 3, r0 = 1, c0 = 2 ; Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]</code><br>Explanation: The distances from <code>(r0, c0)</code> to other cells are: <code>[0,1,1,2,2,3]</code><br>There are other answers that would also be accepted as correct, such as <code>[[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]</code>.</p><p><strong>Note:</strong></p><ul><li><code>1 &lt;= R &lt;= 100</code></li><li><code>1 &lt;= C &lt;= 100</code></li><li><code>0 &lt;= r0 &lt; R</code></li><li><code>0 &lt;= c0 &lt; C</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight markdown"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private static final int[] DIRS = new int[]&#123;1, 0, -1, 0, 1&#125;;</span><br><span class="line">public int[<span class="string">\</span>][<span class="symbol"></span>] allCellsDistOrder(int R, int C, int r0, int c0) &#123;</span><br><span class="line">  int[<span class="string">\</span>][<span class="symbol"></span>] res = new int[<span class="string">R * C</span>][<span class="symbol">2</span>];</span><br><span class="line">  </span><br><span class="line">  Queue<span class="xml"><span class="tag">&lt;<span class="name">int[]</span>&gt;</span></span> que = new LinkedList<span class="xml"><span class="tag">&lt;&gt;</span></span>();</span><br><span class="line">  boolean[<span class="string">\</span>][<span class="symbol"></span>] visited = new boolean[<span class="string">R</span>][<span class="symbol">C</span>];</span><br><span class="line">  </span><br><span class="line">  que.offer(new int[]&#123;r0, c0&#125;);</span><br><span class="line">  visited[<span class="string">r0</span>][<span class="symbol">c0</span>] = true;</span><br><span class="line">  </span><br><span class="line">  int index = 0;</span><br><span class="line">  </span><br><span class="line">  while (!que.isEmpty()) &#123;</span><br><span class="line"><span class="code">    int[] curr = que.poll();</span></span><br><span class="line"><span class="code">    res[index++] = curr;</span></span><br><span class="line"><span class="code">    for (int i = 0; i &lt; 4; i++) &#123;</span></span><br><span class="line"><span class="code">      int nr = curr[0] + DIRS[i], nc = curr[1] + DIRS[i + 1];</span></span><br><span class="line"><span class="code">      if (nr &lt; R &amp;&amp; nr &gt;= 0 &amp;&amp; nc &lt; C &amp;&amp; nc &gt;= 0 &amp;&amp; !visited[nr][nc]) &#123;</span></span><br><span class="line"><span class="code">        que.offer(new int[]&#123;nr, nc&#125;);</span></span><br><span class="line"><span class="code">        visited[nr\][nc] = true;</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1030-matrix-cells-in-distance-order&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1030-matrix-cells-in-distance-order&quot;&gt;&lt;/a&gt; LeetCode Q 1030 - Matrix Cells in Distance Order&lt;/h1&gt;
&lt;p&gt;We are given a matrix with &lt;code&gt;R&lt;/code&gt; rows and &lt;code&gt;C&lt;/code&gt; columns has cells with integer coordinates &lt;code&gt;(r, c)&lt;/code&gt;, where &lt;code&gt;0 &amp;lt;= r &amp;lt; R&lt;/code&gt; and &lt;code&gt;0 &amp;lt;= c &amp;lt; C&lt;/code&gt;.&lt;br&gt;
Additionally, we are given a cell in that matrix with coordinates &lt;code&gt;(r0, c0)&lt;/code&gt;.&lt;br&gt;
Return the coordinates of all cells in the matrix, sorted by their distance from &lt;code&gt;(r0, c0)&lt;/code&gt; from smallest distance to largest distance. Here, the distance between two cells &lt;code&gt;(r1, c1)&lt;/code&gt; and &lt;code&gt;(r2, c2)&lt;/code&gt; is the Manhattan distance, &lt;code&gt;|r1 - r2| + |c1 - c2|&lt;/code&gt;.  (You may return the answer in any order that satisfies this condition.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: R = 1, C = 2, r0 = 0, c0 = 0 ; Output: [[0,0],[0,1]]&lt;/code&gt;&lt;br&gt;
Explanation: The distances from &lt;code&gt;(r0, c0)&lt;/code&gt; to other cells are: &lt;code&gt;[0,1]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: R = 2, C = 2, r0 = 0, c0 = 1 ; Output: [[0,1],[0,0],[1,1],[1,0]]&lt;/code&gt;&lt;br&gt;
Explanation: The distances from &lt;code&gt;(r0, c0)&lt;/code&gt; to other cells are: &lt;code&gt;[0,1,1,2]&lt;/code&gt;&lt;br&gt;
The answer &lt;code&gt;[[0,1],[1,1],[0,0],[1,0]]&lt;/code&gt; would also be accepted as correct.&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: R = 2, C = 3, r0 = 1, c0 = 2 ; Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]&lt;/code&gt;&lt;br&gt;
Explanation: The distances from &lt;code&gt;(r0, c0)&lt;/code&gt; to other cells are: &lt;code&gt;[0,1,1,2,2,3]&lt;/code&gt;&lt;br&gt;
There are other answers that would also be accepted as correct, such as &lt;code&gt;[[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= R &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= C &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= r0 &amp;lt; R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= c0 &amp;lt; C&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Queue" scheme="http://yoursite.com/tags/Queue/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Convert BST to Greater Tree</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ538/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ538/</id>
    <published>2019-08-07T20:02:03.000Z</published>
    <updated>2019-08-07T20:10:04.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-538-convert-bst-to-greater-tree"><a class="markdownIt-Anchor" href="#leetcode-q-538-convert-bst-to-greater-tree"></a> LeetCode Q 538 - Convert BST to Greater Tree</h1><p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p><p><strong>Example:</strong> <code>Input: [5, 2, 13] ; Output: [18, 20, 13]</code></p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight axapta"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> TreeNode convertBST(TreeNode root) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">  dfs(root);</span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> dfs(TreeNode n) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  dfs(n.right);</span><br><span class="line">  <span class="keyword">sum</span> += n.val;</span><br><span class="line">  n.val = <span class="keyword">sum</span>;</span><br><span class="line">  dfs(n.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-538-convert-bst-to-greater-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-538-convert-bst-to-greater-tree&quot;&gt;&lt;/a&gt; LeetCode Q 538 - Convert BST to Greater Tree&lt;/h1&gt;
&lt;p&gt;Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Input: [5, 2, 13] ; Output: [18, 20, 13]&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Diameter of Binary Tree</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ543/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ543/</id>
    <published>2019-08-07T19:55:05.000Z</published>
    <updated>2019-08-07T19:59:58.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-543-diameter-of-binary-tree"><a class="markdownIt-Anchor" href="#leetcode-q-543-diameter-of-binary-tree"></a> LeetCode Q 543 - Diameter of Binary Tree</h1><p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p><p><strong>Example:</strong> <code>input:[1,2,3,4,5]</code><br>Return 3, which is the length of the path <code>[4,2,1,3]</code> or <code>[5,2,1,3]</code>.</p><p><strong>Note:</strong> The length of path between two nodes is represented by the number of edges between them.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight angelscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> diameterOfBinaryTree(TreeNode root) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  dfs(root);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> dfs(TreeNode n) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">int</span> left = dfs(n.left), right = dfs(n.right);</span><br><span class="line">  res = Math.max(res, left + right);</span><br><span class="line">  <span class="keyword">return</span> Math.max(left, right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-543-diameter-of-binary-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-543-diameter-of-binary-tree&quot;&gt;&lt;/a&gt; LeetCode Q 543 - Diameter of Binary Tree&lt;/h1&gt;
&lt;p&gt;Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;input:[1,2,3,4,5]&lt;/code&gt;&lt;br&gt;
Return 3, which is the length of the path &lt;code&gt;[4,2,1,3]&lt;/code&gt; or &lt;code&gt;[5,2,1,3]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The length of path between two nodes is represented by the number of edges between them.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Tilt</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ563/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ563/</id>
    <published>2019-08-07T19:50:22.000Z</published>
    <updated>2019-08-07T19:54:29.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-563-binary-tree-tilt"><a class="markdownIt-Anchor" href="#leetcode-q-563-binary-tree-tilt"></a> LeetCode Q 563 - Binary Tree Tilt</h1><p>Given a binary tree, return the tilt of the whole tree.<br>The tilt of a tree node is defined as the absolute difference between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.<br>The tilt of the whole tree is defined as the sum of all nodes’ tilt.</p><p><strong>Example:</strong> <code>Input: [1, 2, 3] ; Output: 1</code><br>Explanation:<br>Tilt of node 2 : 0<br>Tilt of node 3 : 0<br>Tilt of node 1 : |2-3| = 1<br>Tilt of binary tree : 0 + 0 + 1 = 1</p><p><strong>Note:</strong></p><ul><li>The sum of node values in any subtree won’t exceed the range of 32-bit integer.</li><li>All the tilt values won’t exceed the range of 32-bit integer.</li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight vbscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> findTilt(TreeNode root) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) return <span class="number">0</span>;</span><br><span class="line">  dfs(root);</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> dfs(TreeNode root) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) return <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">int</span> <span class="built_in">left</span> = dfs(root.<span class="built_in">left</span>), <span class="built_in">right</span> = dfs(root.<span class="built_in">right</span>);</span><br><span class="line">  res += Math.<span class="built_in">abs</span>(<span class="built_in">left</span> - <span class="built_in">right</span>);</span><br><span class="line">  reutrn root.val + <span class="built_in">left</span> + <span class="built_in">right</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-563-binary-tree-tilt&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-563-binary-tree-tilt&quot;&gt;&lt;/a&gt; LeetCode Q 563 - Binary Tree Tilt&lt;/h1&gt;
&lt;p&gt;Given a binary tree, return the tilt of the whole tree.&lt;br&gt;
The tilt of a tree node is defined as the absolute difference between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.&lt;br&gt;
The tilt of the whole tree is defined as the sum of all nodes’ tilt.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Input: [1, 2, 3] ; Output: 1&lt;/code&gt;&lt;br&gt;
Explanation:&lt;br&gt;
Tilt of node 2 : 0&lt;br&gt;
Tilt of node 3 : 0&lt;br&gt;
Tilt of node 1 : |2-3| = 1&lt;br&gt;
Tilt of binary tree : 0 + 0 + 1 = 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sum of node values in any subtree won’t exceed the range of 32-bit integer.&lt;/li&gt;
&lt;li&gt;All the tilt values won’t exceed the range of 32-bit integer.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Subtree of Another Tree</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ572/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ572/</id>
    <published>2019-08-07T19:25:31.000Z</published>
    <updated>2019-08-07T19:36:03.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-572-subtree-of-another-tree"><a class="markdownIt-Anchor" href="#leetcode-q-572-subtree-of-another-tree"></a> LeetCode Q 572 - Subtree of Another Tree</h1><p>Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node’s descendants. The tree s could also be considered as a subtree of itself.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight reasonml"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public boolean is<span class="constructor">Subtree(TreeNode <span class="params">s</span>, TreeNode <span class="params">t</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (s<span class="operator"> == </span>null<span class="operator"> &amp;&amp; </span>t<span class="operator"> == </span>null) return <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (s<span class="operator"> == </span>null<span class="operator"> || </span>t<span class="operator"> == </span>null) return <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (s.<span class="keyword">val</span><span class="operator"> == </span>t.<span class="keyword">val</span><span class="operator"> &amp;&amp; </span>is<span class="constructor">Same(<span class="params">s</span>, <span class="params">t</span>)</span>)</span><br><span class="line">    return <span class="literal">true</span>;</span><br><span class="line">  </span><br><span class="line">  return is<span class="constructor">Subtree(<span class="params">s</span>.<span class="params">left</span>, <span class="params">t</span>)</span><span class="operator"> || </span>is<span class="constructor">Subtree(<span class="params">s</span>.<span class="params">right</span>, <span class="params">t</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> boolean is<span class="constructor">Same(TreeNode <span class="params">s</span>, TreeNode <span class="params">t</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (s<span class="operator"> == </span>null<span class="operator"> &amp;&amp; </span>t<span class="operator"> == </span>null) return <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (s<span class="operator"> == </span>null<span class="operator"> || </span>t<span class="operator"> == </span>null<span class="operator"> || </span>s.<span class="keyword">val</span> != t.<span class="keyword">val</span>) return <span class="literal">false</span>;</span><br><span class="line">  return is<span class="constructor">Same(<span class="params">s</span>.<span class="params">left</span>, <span class="params">t</span>.<span class="params">left</span>)</span><span class="operator"> &amp;&amp; </span>is<span class="constructor">Same(<span class="params">s</span>.<span class="params">right</span>, <span class="params">t</span>.<span class="params">right</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-572-subtree-of-another-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-572-subtree-of-another-tree&quot;&gt;&lt;/a&gt; LeetCode Q 572 - Subtree of Another Tree&lt;/h1&gt;
&lt;p&gt;Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node’s descendants. The tree s could also be considered as a subtree of itself.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Coloring A Border</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ1034/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ1034/</id>
    <published>2019-08-07T18:06:33.000Z</published>
    <updated>2019-08-07T19:14:27.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1134-coloring-a-border"><a class="markdownIt-Anchor" href="#leetcode-q-1134-coloring-a-border"></a> LeetCode Q 1134 - Coloring A Border</h1><p>Given a 2-dimensional grid of integers, each value in the grid represents the color of the grid square at that location.<br>Two squares belong to the same connected component if and only if they <strong>have the same color</strong> and are <strong>next to each other in any of the 4 directions.</strong><br>The border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).<br>Given a square at location <code>(r0, c0)</code> in the grid and a color, color the border of the connected component of that square with the given color, and return the final grid.</p><p><strong>Example 1:</strong> <code>Input: grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3 ; Output: [[3, 3], [3, 2]]</code><br><strong>Example 2:</strong> <code>Input: grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3 ; Output: [[1, 3, 3], [2, 3, 3]]</code><br><strong>Example 3:</strong> <code>Input: grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2 ; Output: [[2, 2, 2], [2, 1, 2], [2, 2, 2]]</code></p><p><strong>Note:</strong></p><ul><li><code>1 &lt;= grid.length &lt;= 50</code></li><li><code>1 &lt;= grid[0].length &lt;= 50</code></li><li><code>1 &lt;= grid[i][j] &lt;= 1000</code></li><li><code>0 &lt;= r0 &lt; grid.length</code></li><li><code>0 &lt;= c0 &lt; grid[0].length</code></li><li><code>1 &lt;= color &lt;= 1000</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p>Step 1: Find borders and color them with <code>-color</code>;<br>Step 2: Color borders.</p><p><strong>Code:</strong></p><figure class="highlight markdown"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">private static final int[] DIRS = &#123;1, 0, -1, 0, 1&#125;;</span><br><span class="line">public int[<span class="string"></span>][<span class="symbol"></span>] colorBorder(int[<span class="string">\</span>][<span class="symbol"></span>] grid, int r0, int c0, int color) &#123;</span><br><span class="line">  dfs(grid, r0, c0, grid[<span class="string">r0\</span>][<span class="symbol">c0</span>]);</span><br><span class="line">  for (int r = 0; r <span class="xml"><span class="tag">&lt; <span class="attr">grid.length</span>; <span class="attr">r</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">    for (int c = 0; c <span class="tag">&lt; <span class="attr">grid</span>[<span class="attr">0</span>]<span class="attr">.length</span>; <span class="attr">c</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">      if (grid[r\][c] <span class="tag">&lt; <span class="attr">0</span>) <span class="attr">grid</span>[<span class="attr">r</span>\][<span class="attr">c</span>] = <span class="string">color;</span></span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  return grid;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">private void dfs(int[\][] grid, int r, int c, int color) &#123;</span></span><br><span class="line"><span class="xml">  if (r <span class="tag">&lt; <span class="attr">0</span> || <span class="attr">r</span> &gt;</span></span>= grid.length || c <span class="xml"><span class="tag">&lt; <span class="attr">0</span> || <span class="attr">c</span> &gt;</span></span>= grid[<span class="string">0</span>].length || grid[<span class="string">r\</span>][<span class="symbol">c</span>] != color) return;</span><br><span class="line"></span><br><span class="line">  grid[<span class="string">r</span>][<span class="symbol">c</span>] = -color;</span><br><span class="line">  for (int i = 0; i <span class="xml"><span class="tag">&lt; <span class="attr">4</span>; <span class="attr">i</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">    dfs(grid, r + DIRS[i], c + DIRS[i + 1], color);</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  if ( r &gt;</span> 0 &amp;&amp; r <span class="xml"><span class="tag">&lt; <span class="attr">grid.length</span> <span class="attr">-</span> <span class="attr">1</span> &amp;&amp; <span class="attr">c</span> &gt;</span></span> 0 &amp;&amp; c <span class="xml"><span class="tag">&lt; <span class="attr">grid</span>[<span class="attr">0</span>]<span class="attr">.length</span> <span class="attr">-</span> <span class="attr">1</span></span></span></span><br><span class="line"><span class="xml">    &amp;&amp; color = Math.abs(grid[r - 1][c]) &amp;&amp; color = Math.abs(grid[r + 1][c])</span></span><br><span class="line"><span class="xml">    &amp;&amp; color = Math.abs(grid[r][c - 1]) &amp;&amp; color = Math.abs(grid[r][c + 1]))</span></span><br><span class="line"><span class="xml">    grid[r][c] = color;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1134-coloring-a-border&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1134-coloring-a-border&quot;&gt;&lt;/a&gt; LeetCode Q 1134 - Coloring A Border&lt;/h1&gt;
&lt;p&gt;Given a 2-dimensional grid of integers, each value in the grid represents the color of the grid square at that location.&lt;br&gt;
Two squares belong to the same connected component if and only if they &lt;strong&gt;have the same color&lt;/strong&gt; and are &lt;strong&gt;next to each other in any of the 4 directions.&lt;/strong&gt;&lt;br&gt;
The border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).&lt;br&gt;
Given a square at location &lt;code&gt;(r0, c0)&lt;/code&gt; in the grid and a color, color the border of the connected component of that square with the given color, and return the final grid.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3 ; Output: [[3, 3], [3, 2]]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3 ; Output: [[1, 3, 3], [2, 3, 3]]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2 ; Output: [[2, 2, 2], [2, 1, 2], [2, 2, 2]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= grid.length &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= grid[0].length &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= grid[i][j] &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= r0 &amp;lt; grid.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= c0 &amp;lt; grid[0].length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= color &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Minimum Cost Tree From Leaf Values</title>
    <link href="http://yoursite.com/2019/08/05/leetcodeQ1130/"/>
    <id>http://yoursite.com/2019/08/05/leetcodeQ1130/</id>
    <published>2019-08-05T14:22:00.000Z</published>
    <updated>2019-08-07T18:07:07.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1130-minimum-cost-tree-from-leaf-values"><a class="markdownIt-Anchor" href="#leetcode-q-1130-minimum-cost-tree-from-leaf-values"></a> LeetCode Q 1130 - Minimum Cost Tree From Leaf Values</h1><p>Given an array arr of positive integers, consider all binary trees such that:</p><ul><li>Each node has either 0 or 2 children;</li><li>The values of arr correspond to the values of each leaf in an in-order traversal of the tree.  (Recall that a node is a leaf if and only if it has 0 children.)</li><li>The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.</li></ul><p>Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node.  It is guaranteed this sum fits into a 32-bit integer.</p><p><strong>Example 1:</strong> <code>Input: arr = [6,2,4] ; Output: 32</code><br>Explanation: There are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32.</p><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= arr.length &lt;= 40</code></li><li><code>1 &lt;= arr[i] &lt;= 15</code></li><li>It is guaranteed that the answer fits into a <code>32-bit</code> signed integer (ie. it is less than <code>2^31</code>).</li></ul><a id="more"></a><h2 id="solution-greedy"><a class="markdownIt-Anchor" href="#solution-greedy"></a> Solution: Greedy</h2><p>Each time we pick locally maxinum value. And then recursivly call the helper method. Since we watn to greedily combine the smaller elements and then combine them with larger number at last.</p><p><strong>Code:</strong></p><figure class="highlight angelscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> mctFromLeafValues(<span class="built_in">int</span>[] arr) &#123;</span><br><span class="line">  dfs(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> dfs(<span class="built_in">int</span>[] arr, <span class="built_in">int</span> low, <span class="built_in">int</span> high) &#123;</span><br><span class="line">  <span class="keyword">if</span> (low &gt; high) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (low == high) <span class="keyword">return</span> arr[low];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (low + <span class="number">1</span> == high) &#123;</span><br><span class="line">    res += arr[low] * arr[high];</span><br><span class="line">    <span class="keyword">return</span> Math.max(arr[low], arr[high]);</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> maxIndex = low;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = low; i &lt;= high; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[maxIndex])</span><br><span class="line">      maxIndex = i;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">int</span> left = backtrack(arr, low, maxIndex - <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">int</span> right = backtrack(arr, maxIndex + <span class="number">1</span>, high);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (left != <span class="number">0</span>) res += left * arr[maxIndex];</span><br><span class="line">  <span class="keyword">if</span> (right != <span class="number">0</span>) res += right * arr[maxIndex];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1130-minimum-cost-tree-from-leaf-values&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1130-minimum-cost-tree-from-leaf-values&quot;&gt;&lt;/a&gt; LeetCode Q 1130 - Minimum Cost Tree From Leaf Values&lt;/h1&gt;
&lt;p&gt;Given an array arr of positive integers, consider all binary trees such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each node has either 0 or 2 children;&lt;/li&gt;
&lt;li&gt;The values of arr correspond to the values of each leaf in an in-order traversal of the tree.  (Recall that a node is a leaf if and only if it has 0 children.)&lt;/li&gt;
&lt;li&gt;The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node.  It is guaranteed this sum fits into a 32-bit integer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: arr = [6,2,4] ; Output: 32&lt;/code&gt;&lt;br&gt;
Explanation: There are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= arr.length &amp;lt;= 40&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= arr[i] &amp;lt;= 15&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It is guaranteed that the answer fits into a &lt;code&gt;32-bit&lt;/code&gt; signed integer (ie. it is less than &lt;code&gt;2^31&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Greedy" scheme="http://yoursite.com/tags/Greedy/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Shortest Path with Alternating Colors</title>
    <link href="http://yoursite.com/2019/08/05/leetcodeQ1129/"/>
    <id>http://yoursite.com/2019/08/05/leetcodeQ1129/</id>
    <published>2019-08-05T13:50:10.000Z</published>
    <updated>2019-08-05T14:21:21.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1128-shortest-path-with-alternating-colors"><a class="markdownIt-Anchor" href="#leetcode-q-1128-shortest-path-with-alternating-colors"></a> LeetCode Q 1128 - Shortest Path with Alternating Colors</h1><p>Consider a directed graph, with nodes labelled <code>0, 1, ..., n-1</code>.  In this graph, each edge is either <em>red</em> or <em>blue</em>, and there could be self-edges or parallel edges.<br>Each <code>[i, j]</code> in <em>red_edges</em> denotes a <em>red</em> directed edge from node <code>i</code> to node <code>j</code>.  Similarly, each <code>[i, j]</code> in <em>blue_edges</em> denotes a <em>blue</em> directed edge from node <code>i</code> to node <code>j</code>.<br>Return an array answer of length <code>n</code>, where each <code>answer[X]</code> is the length of the <strong>shortest path</strong> from node 0 to node <code>X</code> such that the edge colors alternate along the path (or <code>-1</code> if such a path doesn’t exist).</p><p><strong>Example 1:</strong> <code>Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = [] ; Output: [0,1,-1]</code><br><strong>Example 2:</strong> <code>Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]] ; Output: [0,1,-1]</code><br><strong>Example 3:</strong> <code>Input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]] ; Output: [0,-1,-1]</code><br><strong>Example 4:</strong> <code>Input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]] ; Output: [0,1,2]</code><br><strong>Example 5:</strong> <code>Input: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]] ; Output: [0,1,1]</code></p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 100</code></li><li><code>red_edges.length &lt;= 400</code></li><li><code>blue_edges.length &lt;= 400</code></li><li><code>red_edges[i].length == blue_edges[i].length == 2</code></li><li><code>0 &lt;= red_edges[i][j], blue_edges[i][j] &lt; n</code></li></ul><a id="more"></a><h2 id="solution-bfs-choose-next-node-from-map-with-different-color"><a class="markdownIt-Anchor" href="#solution-bfs-choose-next-node-from-map-with-different-color"></a> Solution: BFS, choose next node from map with different color.</h2><p><strong>Code:</strong></p><figure class="highlight processing"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> RED = <span class="number">1</span>, BLUE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span>[] shortestAlternatingPaths(<span class="built_in">int</span> n, <span class="built_in">int</span>[\][] red_edges, <span class="built_in">int</span>[\][] blue_edges) &#123;</span><br><span class="line">  </span><br><span class="line">  Map&lt;Integer, Set&lt;Integer&gt;&gt; redMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">  Map&lt;Integer, Set&lt;Integer&gt;&gt; blueMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    redMap.put(i, <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">    blueMap.put(i, <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> re: red_edges) &#123;</span><br><span class="line">    redMap.<span class="built_in">get</span>(re[<span class="number">0</span>]).<span class="built_in">add</span>(re[<span class="number">1</span>]);</span><br><span class="line">    redMap.<span class="built_in">get</span>(re[<span class="number">1</span>]).<span class="built_in">add</span>(re[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> be: blue_edges) &#123;</span><br><span class="line">    blueMap.<span class="built_in">get</span>(be[<span class="number">0</span>]).<span class="built_in">add</span>(be[<span class="number">1</span>]);</span><br><span class="line">    blueMap.<span class="built_in">get</span>(be[<span class="number">1</span>]).<span class="built_in">add</span>(be[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span>[] res = <span class="keyword">new</span> <span class="built_in">int</span>[n];</span><br><span class="line">  Arrays.<span class="built_in">fill</span>(res, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">  Queue&lt;<span class="built_in">int</span>[]&gt; que = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// node, color (1: red, 2: blue)</span></span><br><span class="line">  que.offer(<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;); que.offer(<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">  <span class="built_in">int</span> <span class="built_in">dist</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  Set&lt;<span class="keyword">String</span>&gt; seen = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">size</span> = que.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">int</span>[] curr = que.poll();</span><br><span class="line">      <span class="built_in">int</span> node = curr[<span class="number">0</span>], <span class="built_in">color</span> = curr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (seen.contains(node+<span class="string">" "</span>+<span class="built_in">color</span>)) <span class="keyword">continue</span>;</span><br><span class="line">      seen.<span class="built_in">add</span>(node + <span class="string">" "</span> + <span class="built_in">color</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (res[node] == <span class="number">-1</span>) res[node] = <span class="built_in">dist</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">color</span> == RED || <span class="built_in">color</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> next: blueMap.<span class="built_in">get</span>(<span class="built_in">color</span>)) &#123;</span><br><span class="line">          que.offer(<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;next, BLUE&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">color</span> == BLUE || <span class="built_in">color</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> next: redMap.<span class="built_in">get</span>(<span class="built_in">color</span>)) &#123;</span><br><span class="line">          que.offer(<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;next, RED&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dist</span>++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1128-shortest-path-with-alternating-colors&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1128-shortest-path-with-alternating-colors&quot;&gt;&lt;/a&gt; LeetCode Q 1128 - Shortest Path with Alternating Colors&lt;/h1&gt;
&lt;p&gt;Consider a directed graph, with nodes labelled &lt;code&gt;0, 1, ..., n-1&lt;/code&gt;.  In this graph, each edge is either &lt;em&gt;red&lt;/em&gt; or &lt;em&gt;blue&lt;/em&gt;, and there could be self-edges or parallel edges.&lt;br&gt;
Each &lt;code&gt;[i, j]&lt;/code&gt; in &lt;em&gt;red_edges&lt;/em&gt; denotes a &lt;em&gt;red&lt;/em&gt; directed edge from node &lt;code&gt;i&lt;/code&gt; to node &lt;code&gt;j&lt;/code&gt;.  Similarly, each &lt;code&gt;[i, j]&lt;/code&gt; in &lt;em&gt;blue_edges&lt;/em&gt; denotes a &lt;em&gt;blue&lt;/em&gt; directed edge from node &lt;code&gt;i&lt;/code&gt; to node &lt;code&gt;j&lt;/code&gt;.&lt;br&gt;
Return an array answer of length &lt;code&gt;n&lt;/code&gt;, where each &lt;code&gt;answer[X]&lt;/code&gt; is the length of the &lt;strong&gt;shortest path&lt;/strong&gt; from node 0 to node &lt;code&gt;X&lt;/code&gt; such that the edge colors alternate along the path (or &lt;code&gt;-1&lt;/code&gt; if such a path doesn’t exist).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = [] ; Output: [0,1,-1]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]] ; Output: [0,1,-1]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]] ; Output: [0,-1,-1]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 4:&lt;/strong&gt; &lt;code&gt;Input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]] ; Output: [0,1,2]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 5:&lt;/strong&gt; &lt;code&gt;Input: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]] ; Output: [0,1,1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;red_edges.length &amp;lt;= 400&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blue_edges.length &amp;lt;= 400&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;red_edges[i].length == blue_edges[i].length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= red_edges[i][j], blue_edges[i][j] &amp;lt; n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="Graph" scheme="http://yoursite.com/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>Number of Equivalent Domino Pairs</title>
    <link href="http://yoursite.com/2019/08/05/leetcodeQ1128/"/>
    <id>http://yoursite.com/2019/08/05/leetcodeQ1128/</id>
    <published>2019-08-05T13:27:59.000Z</published>
    <updated>2019-08-05T13:49:18.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1128-number-of-equivalent-domino-pairs"><a class="markdownIt-Anchor" href="#leetcode-q-1128-number-of-equivalent-domino-pairs"></a> LeetCode Q 1128 - Number of Equivalent Domino Pairs</h1><p>Given a list of dominoes, <code>dominoes[i] = [a, b]</code> is equivalent to <code>dominoes[j] = [c, d]</code> if and only if either (<code>a==c</code> and <code>b==d</code>), or (<code>a==d</code> and <code>b==c</code>) - that is, one domino can be rotated to be equal to another domino.<br>Return the number of pairs <code>(i, j)</code> for which <code>0 &lt;= i &lt; j &lt; dominoes.length</code>, and <code>dominoes[i]</code> is equivalent to dominoes[j].</p><p><strong>Example 1:</strong> <code>Input: dominoes = [[1,2],[2,1],[3,4],[5,6]] ; Output: 1</code></p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= dominoes.length &lt;= 40000</code></li><li><code>1 &lt;= dominoes[i][j] &lt;= 9</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><ul><li>Traverse the dominoes array, count the number of same pairs.</li><li>Use <strong><a href="https://en.wikipedia.org/wiki/Combination" target="_blank" rel="noopener">Combination</a></strong> to get the result.</li></ul><p><strong>Code:</strong></p><figure class="highlight processing"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> numEquivDominoPairs(<span class="built_in">int</span>[][] dominoes) &#123;</span><br><span class="line">  Map&lt;Integer, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> d: dominoes) &#123;</span><br><span class="line">    <span class="built_in">int</span> a = d[<span class="number">0</span>], b = d[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">key</span> = Math.<span class="built_in">max</span>(a, b) * <span class="number">10</span> + Math.<span class="built_in">min</span>(a, b);</span><br><span class="line">    <span class="built_in">map</span>.put(<span class="built_in">key</span>, <span class="built_in">map</span>.getOrDefault(<span class="built_in">key</span>, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> <span class="built_in">key</span>: <span class="built_in">map</span>.keySet()) &#123;</span><br><span class="line">    <span class="built_in">int</span> v = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">    res += v * (v - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1128-number-of-equivalent-domino-pairs&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1128-number-of-equivalent-domino-pairs&quot;&gt;&lt;/a&gt; LeetCode Q 1128 - Number of Equivalent Domino Pairs&lt;/h1&gt;
&lt;p&gt;Given a list of dominoes, &lt;code&gt;dominoes[i] = [a, b]&lt;/code&gt; is equivalent to &lt;code&gt;dominoes[j] = [c, d]&lt;/code&gt; if and only if either (&lt;code&gt;a==c&lt;/code&gt; and &lt;code&gt;b==d&lt;/code&gt;), or (&lt;code&gt;a==d&lt;/code&gt; and &lt;code&gt;b==c&lt;/code&gt;) - that is, one domino can be rotated to be equal to another domino.&lt;br&gt;
Return the number of pairs &lt;code&gt;(i, j)&lt;/code&gt; for which &lt;code&gt;0 &amp;lt;= i &amp;lt; j &amp;lt; dominoes.length&lt;/code&gt;, and &lt;code&gt;dominoes[i]&lt;/code&gt; is equivalent to dominoes[j].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: dominoes = [[1,2],[2,1],[3,4],[5,6]] ; Output: 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= dominoes.length &amp;lt;= 40000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= dominoes[i][j] &amp;lt;= 9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
</feed>
