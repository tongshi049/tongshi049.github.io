<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TongTong Shi&#39;s Blog</title>
  
  <subtitle>TongTong Shi&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-29T17:45:45.479Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tong Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Study Notes - Multithreading (2)</title>
    <link href="http://yoursite.com/2019/10/28/multithreading-udemy-2/"/>
    <id>http://yoursite.com/2019/10/28/multithreading-udemy-2/</id>
    <published>2019-10-28T16:08:37.000Z</published>
    <updated>2019-10-29T17:45:45.479Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Implement-Thread-Safe-Blocking-Queue"><a href="#1-Implement-Thread-Safe-Blocking-Queue" class="headerlink" title="1. Implement Thread Safe Blocking Queue"></a><font color="dodgerblue">1. Implement Thread Safe Blocking Queue</font></h3><p><strong>Code</strong>:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BoundedBlockingQueue</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> que<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object LOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// OOD - implement a non-param constructor.</span>    <span class="token keyword">public</span> <span class="token function">BoundedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BoundedBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>que <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span>                 LOCK<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// instead of calling LOCK.notifyALL() directly, add a condition</span>            <span class="token comment" spellcheck="true">// since if the que is not empty then no threads will wait, we don't need to call notifyAll() method.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>que<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                LOCK<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>que<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>que<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 LOCK<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span>                LOCK<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>que<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>LOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips: "></a><font color="tomato">Tips: </font></h4><ol><li><font color="royalblue"><strong>method <code>wait()</code></strong></font></li></ol><ul><li><strong>Defined</strong> in class <code>Object</code>.</li><li><strong>Inhereted</strong> by all objects.</li><li>A thread invoking <code>wait()</code> will <strong>suspend the thread</strong>.</li><li>A thread invoking <code>wait()</code> must <strong>own the intrinsic lock of the object</strong> it is calling <code>wait()</code> from.</li><li><code>wait()</code> method must be in a <strong>try-catch</strong> block that catches <strong>InterruptedExceptions</strong>.</li><li>All threads that call <code>wait()</code> on an object are placed in <strong>a poll of waiting threads for that object</strong>.</li></ul><ol start="2"><li><font color="royalblue"><strong>method <code>notify()</code></strong></font></li></ol><ul><li><strong>Defined</strong> in class <code>Object</code>.</li><li><strong>Inhereted</strong> by all objects.</li><li><strong>Execution resumes</strong> when <strong>another</strong> thread calls the <code>notify()</code> mehtod of the <strong>object our first thread is waiting on</strong>.</li><li>When <code>notify()</code> of an object is called, then a <strong>single waiting thread</strong> on that object is signaled to get ready to resume execution.</li></ul><ol start="3"><li><font color="royalblue"><strong>method <code>notifyAll()</code></strong></font></li></ol><ul><li><strong>Defined</strong> in class <code>Object</code>.</li><li><strong>Inhereted</strong> by all objects.</li><li>Notifies <strong>all</strong> the waiting threads.</li><li>These waiting threads would then <strong>compete</strong> to see which single thread resumes execution, the <strong>rest</strong> of the threads would <strong>once again wait</strong>.</li></ul><h3 id="2-Classes-for-Locking"><a href="#2-Classes-for-Locking" class="headerlink" title="2. Classes for Locking"></a><font color="dodgerblue">2. Classes for Locking</font></h3><p>Besides using <code>synchronized</code> block to realize Thread Saft Blocking Queue, we can also use <code>Lock</code> implementations. They allow more flexible struturing, may have quite different properties, and support multiple associated <code>Condition</code> objects.</p><h4 id="1-Interface-Lock"><a href="#1-Interface-Lock" class="headerlink" title="(1). Interface Lock"></a><font color="tomato">(1). Interface Lock</font></h4><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Lock.html" target="_blank" rel="noopener">document</a><p><code>java.util.concurrent.locks</code><br>A lock is a tool for controlling access to a shared resource by multiple threads. Commonly, a lock provides exclusive access to a shared resource: only one thread at a time can acquire the lock and all access to the shared resource requires that the lock be acquired first. However, some locks may allow <strong>concurrent access to a shared resource</strong>, such as the <strong>read lock</strong> of a <code>ReadWriteLock</code>.</p><p>To use them, first instantiate a lock.<br><code>Lock lock = bew ReentrantLock();</code><br>Then follow this pattern</p><pre class=" language-java"><code class="language-java">lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// use shared resource</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>Differences between <code>Lock</code> and <code>synchronized</code> block</strong></p><ul><li>A <code>synchronized</code> block is fully contained within a method, whereas we can have <code>lock()</code> and <code>unlock()</code> operations in sepatate methods.</li><li>A <code>synchonized</code> block doesn’t support the <strong>fairness</strong>, any thread can acquire the lock once released, no preference can be specified. We can achieve fairness within the <code>Lock APIs</code> by specifying the <code>fairness</code> property. <strong>It makes sure that no thread is starved out from accessing a resource.</strong></li><li>A thread gets blocked if it can’t get an access to the synchronized block. The <code>Lock API</code> provides <code>tryLock()</code> method. The thread acquires lock only if it’s available and not held by any other thread. This reduces blocking time of thread waiting for the lock</li><li>A thread which is in “waiting” state to acquire the access to synchronized block, <strong>can’t be interrupted</strong>. The <code>Lock API</code> provides a method <code>lockInterruptibly()</code> which can be used to interrupt the thread when it’s waiting for the lock</li></ul><h4 id="2-Class-ReentrantLock"><a href="#2-Class-ReentrantLock" class="headerlink" title="(2). Class ReentrantLock"></a><font color="tomato">(2). Class ReentrantLock</font></h4><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html" target="_blank" rel="noopener">document</a><p><code>java.util.concurrent.locks.ReentrantLock</code></p><p>The <code>ReentrantLock</code> class implements the <code>Lock</code> interface and provides synchronization to methods while accessing shared resource. The code which manipulates the shared resource is surrounded by calls to <code>lock()</code> and <code>unlock()</code> method. </p><p><strong>The <code>ReentrantLock</code> allows threads to enter into lock on a resource more than once</strong>. When the thread first enters into lock, a hold <code>count</code> is set to one. Before unlocking the thread can re-enter into lock again and every time hold count is <strong>incremented by one</strong>. For every <code>unlock</code> request, hold count is <strong>decremented by one</strong> and when hold count is <code>0</code>, the resource is <strong>unlocked</strong>.</p><h4 id="3-Interface-Condition"><a href="#3-Interface-Condition" class="headerlink" title="(3). Interface Condition"></a><font color="tomato">(3). Interface Condition</font></h4><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Condition.html" target="_blank" rel="noopener">document</a><p><code>java.util.concurrent.locks</code></p><p>Condition factors out the Object monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>) into distinct objects to give the effect of <strong>having multiple wait-sets per object</strong>, by combining them with the use of arbitrary Lock implementations. <strong>Where a <code>Lock</code> replaces the use of synchronized methods and statements, a <code>Condition</code> replaces the use of the Object monitor methods</strong>.<br><strong><code>Conditions</code> (also known as condition queues or condition variables) provide a means for one thread to suspend execution (to <code>&quot;wait&quot;</code>) until notified by another thread that some state condition may now be true</strong>. Because access to this shared state information occurs in different threads, it must be <strong>protected</strong>, so a lock of some form is associated with the condition. The <strong>key property</strong> that waiting for a condition provides is that <strong>it atomically releases the associated lock and suspends the current thread, just like <code>Object.wait</code></strong>.</p><p>A <code>Condition</code> instance is intrinsically bound to a <code>lock</code>. To obtain a <code>Condition instance</code> for a particular <code>Lock instance</code> use its <code>newCondition()</code> method.</p><details>    <summary>Example: Implement Thread Safe Blocking Queue using Lock and Condition</summary><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BoundedBlockingQueue</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> que<span class="token punctuation">;</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition notFull <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition notEmpty <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// OOD - implement a non-param constructor.</span>    <span class="token keyword">public</span> <span class="token function">BoundedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BoundedBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>que <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>que<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>que<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>que<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></details><h4 id="4-Class-Semaphore"><a href="#4-Class-Semaphore" class="headerlink" title="(4). Class Semaphore"></a><font color="tomato">(4). Class Semaphore</font></h4><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Semaphore.html" target="_blank" rel="noopener">document</a><p><code>java.util.concurrent.Semaphore</code><br>A counting semaphore, used to restrict the number of threads that can access some resource. </p><ul><li>Each <code>acquire()</code> blocks if necessary until a permit is available, and then tasks it.</li><li>Each <code>release()</code> adds a permit, potentially releasing a blocking acquirer.</li></ul><h3 id="3-volatile-modifier"><a href="#3-volatile-modifier" class="headerlink" title="3. volatile modifier"></a><font color="dodgerblue">3. volatile modifier</font></h3><p>First, we have to understand a little about the Java memory model.</p><img src="thread_memory.png" width="50%" height="50%"><ul><li>In Java, each thread has a separeate memory space (CPU cache). Each thread copies variables from main memory into CPU cache. </li><li>Memory writes that happen in one thread can “leak through” and be seen by another thread, but this is by no means guaranteed. <strong>Without <em>explicit communication</em>, you can’t guarantee which writes get seen by other threads, or even the order in which they get seen.</strong> </li><li>Special mechanisms to guarantee that communication happens between these threads would be needed.</li></ul><h4 id="What-does-volatile-mean-in-Java"><a href="#What-does-volatile-mean-in-Java" class="headerlink" title="What does volatile mean in Java?"></a><font color="tomato">What does volatile mean in Java?</font></h4><ul><li><font color="royalblue">The Java <code>volatile</code> modifier is an example of a special mechanism to guarantee that communication happens between threads.</font> When one thread writes to a <code>volatile</code> variable, and another thread sees that write.</li><li><font color="royalblue"><code>volatile</code> keyword is intended to address variable <strong>visibility</strong> problem.</font></li><li>It is <font color="red"><strong>not</strong> suitable for cases where we want to <strong>Read-Update-Write</strong></font> as an atomic operation. For example, if two threads are both reading and writing to a shared variable, then using <code>volatile</code> keyword for that is not enough, using <strong>synchronized</strong> in that case to guarantee that the reading and writing of that variable is <strong>atomic</strong>. (<code>synchronization</code> modifier supports <strong>mutual execlusion</strong> and <strong>visibility</strong>.)</li></ul><h4 id="volatile-vs-atomic"><a href="#volatile-vs-atomic" class="headerlink" title="volatile vs. atomic"></a><font color="tomato">volatile vs. atomic</font></h4><ul><li>An atomic action is one that effectively <strong>happeds all</strong> at once. An atomic action cannot stop in the middle: it either happens completely, or it doesn’t happen at all.</li><li><code>Volatile</code> and <code>Atomic</code> are two different concepts. <code>Volatile</code> ensures, that a certain, expected (memory) state is true across different threads, while <code>Atomics</code> ensure that operation on variables are performed atomically.<font color="red"><strong>Volatile Does Not Mean Atomic!</strong></font></li></ul><p>For example, </p><pre class=" language-java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Thread <span class="token number">1</span><span class="token operator">:</span>i<span class="token operator">++</span><span class="token punctuation">;</span>Thread <span class="token number">2</span><span class="token operator">:</span>i<span class="token operator">--</span><span class="token punctuation">;</span></code></pre><p>Should i become 0 after program execution ? <font color="red"><strong>No!</strong></font><br>First we need to know that <font color="red"><strong><code>++</code> operation is not atomic</strong></font>. What <code>i++</code> does is equivalent to <code>i = i + 1</code>. It does one read and one write – is <strong>not</strong> atomic.<br>If we do an increment of a <strong>volatile integer</strong>, three separate operations are actually performing:</p><ol><li>Read the integer to a local.</li><li>Increment the locl.</li><li>Write the integer back out to the volatile filed.<br>So, what we really have is this:<pre class=" language-java"><code class="language-java"><span class="token keyword">volatile</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Thread <span class="token number">1</span><span class="token operator">:</span>r1 <span class="token operator">=</span> i<span class="token punctuation">;</span>r2 <span class="token operator">=</span> r1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> r2<span class="token punctuation">;</span>Thread <span class="token number">2</span><span class="token operator">:</span>r3 <span class="token operator">=</span> i<span class="token punctuation">;</span>r4 <span class="token operator">=</span> r3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> r4<span class="token punctuation">;</span></code></pre></li></ol><p>So, if <code>Thread 1</code> and <code>2</code> both read v and see the value <code>0</code>, then <code>Thread 1</code> will write <code>1</code> to it and <code>Thread 2</code> will write -1 to it.</p><p>To solve this problem, that is we want an <strong>atomic increment</strong>, we need to use <a href="https://docs.oracle.com/javase/6/docs/api/java/util/concurrent/atomic/package-summary.html" target="_blank" rel="noopener">`java.util.concurrent.atomic` classes</a>, like <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html" target="_blank" rel="noopener">`AtomicInteger`</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Implement-Thread-Safe-Blocking-Queue&quot;&gt;&lt;a href=&quot;#1-Implement-Thread-Safe-Blocking-Queue&quot; class=&quot;headerlink&quot; title=&quot;1. Implement Thr
      
    
    </summary>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Longest Absolute File Path</title>
    <link href="http://yoursite.com/2019/10/24/leetcodeQ388/"/>
    <id>http://yoursite.com/2019/10/24/leetcodeQ388/</id>
    <published>2019-10-24T19:41:06.000Z</published>
    <updated>2019-10-28T15:57:00.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-388-Longest-Absolute-File-Path"><a href="#LeetCode-Q-388-Longest-Absolute-File-Path" class="headerlink" title="LeetCode Q 388 - Longest Absolute File Path"></a>LeetCode Q 388 - Longest Absolute File Path</h1><p>Suppose we abstract our <strong>file system</strong> by a string in the following manner:<br>The string <code>&quot;dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext&quot;</code> represents:</p><pre><code>dir    subdir1    subdir2        file.ext</code></pre><p>The <em>directory</em> <code>dir</code> contains an empty <em>sub-directory</em> <code>subdir1</code> and a <em>sub-directory</em> <code>subdir2</code> containing a <em>file</em> <code>file.ext</code>.</p><p>The string <code>&quot;dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext&quot;</code> represents:</p><pre><code>dir    subdir1        file1.ext        subsubdir1    subdir2        subsubdir2            file2.ext</code></pre><p>The <em>directory</em> <code>dir</code> contains two <em>sub-directories</em> <code>subdir1</code> and <code>subdir2</code>. <code>subdir1</code> contains a <em>file</em> <code>file1.ext</code> and an empty <em>second-level sub-directory</em> <code>subsubdir1</code>. <code>subdir2</code> contains a <em>second-level sub-directory</em> <code>subsubdir2</code> containing a <em>file</em> <code>file2.ext</code>.</p><p>We are interested in <strong>finding the longest (number of characters) absolute path to a file within our file system</strong>. </p><p>For example, in the second example above, the longest absolute path is <code>&quot;dir/subdir2/subsubdir2/file2.ext&quot;</code>, and its length is <code>32</code> (not including the double quotes).If there is <strong>no file</strong> in the system, return <code>0</code>.</p><p><strong>Note:</strong></p><ul><li>The name of a <em>file</em> contains at least a <code>.</code> and an extension.</li><li>The name of a <em>directory</em> or <em>sub-directory</em> will not contain a <code>.</code>.</li><li><strong>Time complexity</strong> required: <code>O(n)</code> where <code>n</code> is the size of the input string.</li></ul><p><strong>Notice</strong> that <code>a/aa/aaa/file1.txt</code> is not the longest file path, if there is another path <code>aaaaaaaaaaaaaaaaaaaaa/sth.png</code>.</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><ol><li>Split the given <code>input</code> with <code>\n</code>, get a String array <code>dirs</code>.</li><li>For each <code>dir</code> in <code>dirs</code>, define its level as number of <code>\t</code> it contains + 1. For example, <code>root</code> has level 1, <code>\ta</code> has level 2, <code>\t\tb</code> has level 3.</li><li>Use an int array <code>stack</code> to store the total length at each level.</li><li>The key point is we keep updating the length at each level.</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthLongestPath</span><span class="token punctuation">(</span>String input<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> null <span class="token operator">||</span> input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> dirs <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>dirs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>String dir<span class="token operator">:</span> dirs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> numOfTabs <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// \t has length 1!</span>        <span class="token keyword">int</span> curLen <span class="token operator">=</span> stack<span class="token punctuation">[</span>numberOfTabs<span class="token punctuation">]</span> <span class="token operator">+</span> dir<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> numberOfTabs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        stack<span class="token punctuation">[</span>numberOfTabs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> curLen<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> curLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips: "></a><font color="dodgerblue">Tips: </font></h4><ol><li><font color="mediumslateblue"><strong>The length of <code>\n, \t</code> is 1 in Java.</strong></font></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-388-Longest-Absolute-File-Path&quot;&gt;&lt;a href=&quot;#LeetCode-Q-388-Longest-Absolute-File-Path&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 388 - Longest Absolute File Path&quot;&gt;&lt;/a&gt;LeetCode Q 388 - Longest Absolute File Path&lt;/h1&gt;&lt;p&gt;Suppose we abstract our &lt;strong&gt;file system&lt;/strong&gt; by a string in the following manner:&lt;br&gt;The string &lt;code&gt;&amp;quot;dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext&amp;quot;&lt;/code&gt; represents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dir
    subdir1
    subdir2
        file.ext&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;em&gt;directory&lt;/em&gt; &lt;code&gt;dir&lt;/code&gt; contains an empty &lt;em&gt;sub-directory&lt;/em&gt; &lt;code&gt;subdir1&lt;/code&gt; and a &lt;em&gt;sub-directory&lt;/em&gt; &lt;code&gt;subdir2&lt;/code&gt; containing a &lt;em&gt;file&lt;/em&gt; &lt;code&gt;file.ext&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The string &lt;code&gt;&amp;quot;dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext&amp;quot;&lt;/code&gt; represents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dir
    subdir1
        file1.ext
        subsubdir1
    subdir2
        subsubdir2
            file2.ext&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;em&gt;directory&lt;/em&gt; &lt;code&gt;dir&lt;/code&gt; contains two &lt;em&gt;sub-directories&lt;/em&gt; &lt;code&gt;subdir1&lt;/code&gt; and &lt;code&gt;subdir2&lt;/code&gt;. &lt;code&gt;subdir1&lt;/code&gt; contains a &lt;em&gt;file&lt;/em&gt; &lt;code&gt;file1.ext&lt;/code&gt; and an empty &lt;em&gt;second-level sub-directory&lt;/em&gt; &lt;code&gt;subsubdir1&lt;/code&gt;. &lt;code&gt;subdir2&lt;/code&gt; contains a &lt;em&gt;second-level sub-directory&lt;/em&gt; &lt;code&gt;subsubdir2&lt;/code&gt; containing a &lt;em&gt;file&lt;/em&gt; &lt;code&gt;file2.ext&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We are interested in &lt;strong&gt;finding the longest (number of characters) absolute path to a file within our file system&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;For example, in the second example above, the longest absolute path is &lt;code&gt;&amp;quot;dir/subdir2/subsubdir2/file2.ext&amp;quot;&lt;/code&gt;, and its length is &lt;code&gt;32&lt;/code&gt; (not including the double quotes).If there is &lt;strong&gt;no file&lt;/strong&gt; in the system, return &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of a &lt;em&gt;file&lt;/em&gt; contains at least a &lt;code&gt;.&lt;/code&gt; and an extension.&lt;/li&gt;
&lt;li&gt;The name of a &lt;em&gt;directory&lt;/em&gt; or &lt;em&gt;sub-directory&lt;/em&gt; will not contain a &lt;code&gt;.&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time complexity&lt;/strong&gt; required: &lt;code&gt;O(n)&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the size of the input string.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt; that &lt;code&gt;a/aa/aaa/file1.txt&lt;/code&gt; is not the longest file path, if there is another path &lt;code&gt;aaaaaaaaaaaaaaaaaaaaa/sth.png&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Fraction Addition and Subtraction</title>
    <link href="http://yoursite.com/2019/10/23/leetcodeQ592/"/>
    <id>http://yoursite.com/2019/10/23/leetcodeQ592/</id>
    <published>2019-10-23T14:35:35.000Z</published>
    <updated>2019-10-23T17:15:12.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-592-Fraction-Addition-and-Subtraction"><a href="#LeetCode-Q-592-Fraction-Addition-and-Subtraction" class="headerlink" title="LeetCode Q 592 - Fraction Addition and Subtraction"></a>LeetCode Q 592 - Fraction Addition and Subtraction</h1><p>Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be <code>irreducible fraction</code>. If your final result is an integer, say <code>2</code>, you need to change it to the format of fraction that has <code>denominator 1</code>. So in this case, <code>2</code> should be converted to <code>2/1</code>.</p><p><strong>Example 1:</strong> <code>Input:&quot;-1/2+1/2&quot; ; Output: &quot;0/1&quot;</code><br><strong>Example 2:</strong> <code>Input:&quot;-1/2+1/2+1/3&quot; ; Output: &quot;1/3&quot;</code><br><strong>Example 3:</strong> <code>Input:&quot;1/3-1/2&quot; ; Output: &quot;-1/6&quot;</code><br><strong>Example 4:</strong> <code>Input:&quot;5/3+1/3&quot; ; Output: &quot;2/1&quot;</code><br><strong>Note:</strong></p><ul><li>The input string only contains <code>&#39;0&#39;</code> to <code>&#39;9&#39;</code>, <code>&#39;/&#39;</code>, <code>&#39;+&#39;</code> and <code>&#39;-&#39;</code>. So does the output.</li><li>Each fraction (input and output) has format <code>±numerator/denominator</code>. If the first input fraction or the output is positive, then <code>&#39;+&#39;</code> will be omitted.</li><li>The input only contains <code>valid irreducible fractions</code>, where the numerator and denominator of each fraction will always be in the range <code>[1,10]</code>. If the denominator is <code>1</code>, it means this fraction is actually an integer in a fraction format defined above.</li><li>The number of given fractions will be in the range <code>[1,10]</code>.</li><li>The numerator and denominator of the final result are guaranteed to be valid and in the range of <code>32-bit</code> int.</li></ul><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p>The solution is quite intuitive. First we find each <em>fraction</em>, and then sum them up. To obtain the <code>irreducible fraction</code> result, we divide <code>numerator</code> and <code>denominator</code> by their greatest common divisor (gcd).</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">fractionAddition</span><span class="token punctuation">(</span>String exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">==</span> null <span class="token operator">||</span> exp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> exp<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Character<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'-'</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> exp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> exp<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"(\\+)|(-)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> prevNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> prevDen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String str<span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> den <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span>            prevNum <span class="token operator">=</span> prevNum <span class="token operator">*</span> den <span class="token operator">+</span> prevDen <span class="token operator">*</span> num<span class="token punctuation">;</span>        <span class="token keyword">else</span>             prevNum <span class="token operator">=</span> prevNum <span class="token operator">*</span> den <span class="token operator">-</span> prevDen <span class="token operator">*</span> num<span class="token punctuation">;</span>        prevDen <span class="token operator">=</span> den <span class="token operator">*</span> prevDen<span class="token punctuation">;</span>        <span class="token keyword">int</span> g <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>prevNum<span class="token punctuation">,</span> prevDen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prevNum <span class="token operator">/=</span> g<span class="token punctuation">;</span> prevDen <span class="token operator">/=</span> g<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> prevNum <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> prevDen<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips: "></a><font color="dodgerblue">Tips: </font></h4><ol><li><font color="mediumslateblue"><strong>Fraction Addition</strong></font></li></ol><p><code>a / b + c / d = (a * d + b * c) / b * d</code>.</p><ol start="2"><li><font color="mediumslateblue"><strong>Regular Expression (regex) Analysis</strong></font></li></ol><pre class=" language-java"><code class="language-java"><span class="token string">"(\\+)|(-)"</span>first part<span class="token operator">:</span> \\<span class="token operator">+</span> <span class="token operator">=</span><span class="token operator">></span> \\ can be understood as a single \ in the regex<span class="token punctuation">,</span> which is then used to escape the <span class="token operator">+</span><span class="token punctuation">.</span> This regax means a signle <span class="token operator">+</span> <span class="token punctuation">;</span>second part<span class="token operator">:</span> <span class="token operator">-</span> <span class="token operator">=</span><span class="token operator">></span> This means a single <span class="token operator">-</span> <span class="token punctuation">;</span>first part <span class="token operator">|</span> second part <span class="token operator">=</span><span class="token operator">></span> find first part or second part<span class="token punctuation">.</span>Therefore <span class="token string">"(\\+) | (-)"</span> means find <span class="token operator">+</span> or <span class="token operator">-</span> <span class="token punctuation">.</span></code></pre><ol start="3"><li><font color="mediumslateblue"><strong>Greatest Common Divisor</strong></font></li></ol><p>Here, we use <code>Euclidean Algorithm</code> to get <code>gcd</code>. The <code>Euclidean Algorithm</code> for finding <code>GCD(A,B)</code> is as follows:</p><ul><li>If <code>A = 0</code> then <code>GCD(A,B)=B</code>, since the <code>GCD(0,B)=B</code>, and we can stop.  </li><li>If <code>B = 0</code> then <code>GCD(A,B)=A</code>, since the <code>GCD(A,0)=A</code>, and we can stop.  </li><li>Write A in quotient remainder form <code>(A = B⋅Q + R)</code></li><li>Find <code>GCD(B,R)</code> using the Euclidean Algorithm since <code>GCD(A,B) = GCD(B,R)</code>.</li></ul><a href="https://www.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm" target="_blank" rel="noopener">source</a><p>So our gcd code is as follows.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-592-Fraction-Addition-and-Subtraction&quot;&gt;&lt;a href=&quot;#LeetCode-Q-592-Fraction-Addition-and-Subtraction&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 592 - Fraction Addition and Subtraction&quot;&gt;&lt;/a&gt;LeetCode Q 592 - Fraction Addition and Subtraction&lt;/h1&gt;&lt;p&gt;Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be &lt;code&gt;irreducible fraction&lt;/code&gt;. If your final result is an integer, say &lt;code&gt;2&lt;/code&gt;, you need to change it to the format of fraction that has &lt;code&gt;denominator 1&lt;/code&gt;. So in this case, &lt;code&gt;2&lt;/code&gt; should be converted to &lt;code&gt;2/1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input:&amp;quot;-1/2+1/2&amp;quot; ; Output: &amp;quot;0/1&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input:&amp;quot;-1/2+1/2+1/3&amp;quot; ; Output: &amp;quot;1/3&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input:&amp;quot;1/3-1/2&amp;quot; ; Output: &amp;quot;-1/6&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;strong&gt;Example 4:&lt;/strong&gt; &lt;code&gt;Input:&amp;quot;5/3+1/3&amp;quot; ; Output: &amp;quot;2/1&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The input string only contains &lt;code&gt;&amp;#39;0&amp;#39;&lt;/code&gt; to &lt;code&gt;&amp;#39;9&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;/&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;+&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;-&amp;#39;&lt;/code&gt;. So does the output.&lt;/li&gt;
&lt;li&gt;Each fraction (input and output) has format &lt;code&gt;±numerator/denominator&lt;/code&gt;. If the first input fraction or the output is positive, then &lt;code&gt;&amp;#39;+&amp;#39;&lt;/code&gt; will be omitted.&lt;/li&gt;
&lt;li&gt;The input only contains &lt;code&gt;valid irreducible fractions&lt;/code&gt;, where the numerator and denominator of each fraction will always be in the range &lt;code&gt;[1,10]&lt;/code&gt;. If the denominator is &lt;code&gt;1&lt;/code&gt;, it means this fraction is actually an integer in a fraction format defined above.&lt;/li&gt;
&lt;li&gt;The number of given fractions will be in the range &lt;code&gt;[1,10]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The numerator and denominator of the final result are guaranteed to be valid and in the range of &lt;code&gt;32-bit&lt;/code&gt; int.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="regex" scheme="http://yoursite.com/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>SQL Qs - Monthly Transaction II</title>
    <link href="http://yoursite.com/2019/10/18/leetcodeQ1205/"/>
    <id>http://yoursite.com/2019/10/18/leetcodeQ1205/</id>
    <published>2019-10-18T16:30:32.000Z</published>
    <updated>2019-10-23T14:35:55.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-1205-Monthly-Transaction-II"><a href="#LeetCode-Q-1205-Monthly-Transaction-II" class="headerlink" title="LeetCode Q 1205 - Monthly Transaction II"></a>LeetCode Q 1205 - Monthly Transaction II</h1><p>Given tables <code>Transactions</code> and <code>ChangeBacks</code>, write a SQL solution to get the number of approved transactions and corresponding amounts, as well as the number of changeback transactions and corresponding amounts of each country in each month.</p><a id="more"></a><p>For example,</p><div><span><img src="transaction.png" width="30%" height="30%"></span><span><img src="changebacks.png" width="20%" height="20%"></span></div><p>The result is<br><img src="result.png" width="60%" height="60%"></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> month<span class="token punctuation">,</span>country<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'approved'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> approved_count<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">IF</span><span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'approved'</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> approved_amount<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'chargeback'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> changeback_count<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">IF</span><span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'chargeback'</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> changeback_amount<span class="token keyword">FROM</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> date_format<span class="token punctuation">(</span>t<span class="token punctuation">.</span>trans_date<span class="token punctuation">,</span><span class="token string">'%Y-%m'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> month<span class="token punctuation">,</span>                t<span class="token punctuation">.</span>country<span class="token punctuation">,</span>                t<span class="token punctuation">.</span>amount<span class="token punctuation">,</span>                <span class="token string">'approved'</span> <span class="token keyword">AS</span> <span class="token keyword">type</span>        <span class="token keyword">FROM</span> <span class="token keyword">Transactions</span> <span class="token keyword">AS</span> t        <span class="token keyword">WHERE</span> state <span class="token operator">=</span> <span class="token string">'approved'</span>         <span class="token keyword">UNION</span> <span class="token keyword">ALL</span>        <span class="token keyword">SELECT</span> date_format<span class="token punctuation">(</span><span class="token number">c</span><span class="token punctuation">.</span>trans_date<span class="token punctuation">,</span><span class="token string">'%Y-%m'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> month<span class="token punctuation">,</span>               t<span class="token punctuation">.</span>country<span class="token punctuation">,</span>               t<span class="token punctuation">.</span>amount<span class="token punctuation">,</span>               <span class="token string">'chargeback'</span> <span class="token keyword">AS</span> <span class="token keyword">type</span>        <span class="token keyword">FROM</span> <span class="token keyword">Transactions</span> <span class="token keyword">AS</span> t        <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Chargebacks <span class="token keyword">AS</span> <span class="token number">c</span> <span class="token keyword">ON</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>trans_id    <span class="token punctuation">)</span> <span class="token keyword">AS</span> sub_query<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> month<span class="token punctuation">,</span> country<span class="token punctuation">;</span></code></pre><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips: "></a><font color="dodgerblue">Tips: </font></h4><ol><li><font color="mediumslateblue"><strong>MySQL UNION Operator</strong></font></li></ol><p><strong>Syntax</strong>:</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># UNION Syntax</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table1<span class="token keyword">UNION</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table2<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># UNION ALL Syntax</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table1<span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table2<span class="token punctuation">;</span></code></pre><p><strong>Usage</strong>: The <code>UNION</code> operator is used to combine the result-set of two or more <code>SELECT</code> statements.</p><ul><li>Each <code>SELECT</code> statement within <code>UNION</code> must have the same number of columns</li><li>The columns must also have similar data types</li><li>The columns in each <code>SELECT</code> statement must also be in the same order</li></ul><p>More detailed explanation can be found <a href="https://www.w3schools.com/sql/func_mysql_date_format.asp" target="_blank" rel="noopener">here</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-1205-Monthly-Transaction-II&quot;&gt;&lt;a href=&quot;#LeetCode-Q-1205-Monthly-Transaction-II&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 1205 - Monthly Transaction II&quot;&gt;&lt;/a&gt;LeetCode Q 1205 - Monthly Transaction II&lt;/h1&gt;&lt;p&gt;Given tables &lt;code&gt;Transactions&lt;/code&gt; and &lt;code&gt;ChangeBacks&lt;/code&gt;, write a SQL solution to get the number of approved transactions and corresponding amounts, as well as the number of changeback transactions and corresponding amounts of each country in each month.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL Qs - Monthly Transaction I</title>
    <link href="http://yoursite.com/2019/10/18/leetcode1193/"/>
    <id>http://yoursite.com/2019/10/18/leetcode1193/</id>
    <published>2019-10-18T15:28:11.000Z</published>
    <updated>2019-10-22T15:22:40.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-1193-Monthly-Transaction-I"><a href="#LeetCode-Q-1193-Monthly-Transaction-I" class="headerlink" title="LeetCode Q 1193 - Monthly Transaction I"></a>LeetCode Q 1193 - Monthly Transaction I</h1><p>Given a table <code>Transactions</code>, write a SQL solution to get the amount of transactions, total amount of all transactions, approved transactions, the amount of all approved transactions of each country in each month.</p><a id="more"></a><p>For example,</p><img src="transaction2.png" width="40%" height="40%">The result is<img src="result.png" width="60%" height="60%"><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> DATE_FORMAT<span class="token punctuation">(</span>trans_date<span class="token punctuation">,</span> <span class="token string">"%Y-%m"</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> month<span class="token punctuation">,</span>country<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> trans_count<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token string">"approved"</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> approved_count<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token keyword">AS</span> trans_total_amount<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">IF</span><span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token string">"approved"</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> approved_total_amount<span class="token keyword">FROM</span> <span class="token keyword">Transactions</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> DATE_FORMAT<span class="token punctuation">(</span>trans_date<span class="token punctuation">,</span> <span class="token string">"%Y-%m"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> country</code></pre><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips: "></a><font color="dodgerblue">Tips: </font></h4><ol><li><font color="mediumslateblue"><strong>MySQL DATE_FORMAT() Function</strong></font></li></ol><p><strong>Syntax</strong>: <code>DATE_FORMAT(date, foramt)</code>.<br><strong>Fromat</strong>: <code>%Y</code> : Year as a numeric, 4-digit value, <code>%m</code> : Month name as a numeric value(00 to 12), <code>%M</code>: Month name is full (January to December)… More detailed explanation can be found <a href="https://www.w3schools.com/sql/func_mysql_date_format.asp" target="_blank" rel="noopener">here</a></p><ol start="2"><li><font color="mediumslateblue"><strong>MySQL IF() Function</strong></font></li></ol><p><strong>Syntax</strong>: <code>IF(condition, value_if_true, value_if_false)</code>.<br><strong>Example</strong>: <code>SELECT IF(500&lt;1000, 5, 10);</code> =&gt; Return 5 if the condition is TRUE, or 10 if the condition is FALSE.</p><ol start="3"><li><font color="mediumslateblue"><strong>SUM() vs. COUNT()</strong></font></li></ol><p><code>SUM()</code> is doing <em>mathematical sum</em>, whereas <code>COUNT()</code> simply counts any value as 1 regardless of what data type.<br><strong>Example</strong>:<br><code>SELECT SUM(state = &#39;approved&#39;)</code> vs. <code>SELECT COUNT(state = &#39;approved)</code>.<br>The first query returns the number of times the condition is true, because true is 1 and false is 0.<br>The second query returns the complete record count because <code>COUNT()</code> does not care about the content inside it, as long as the content is NOT NULL. If you would like to make the second query corrct, then we can do it like this,<br><code>SELECT COUNT(CASE WHEN state = &#39;approved&#39; THEN &#39;no matter what&#39; else NULL END) FROM table</code> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-1193-Monthly-Transaction-I&quot;&gt;&lt;a href=&quot;#LeetCode-Q-1193-Monthly-Transaction-I&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 1193 - Monthly Transaction I&quot;&gt;&lt;/a&gt;LeetCode Q 1193 - Monthly Transaction I&lt;/h1&gt;&lt;p&gt;Given a table &lt;code&gt;Transactions&lt;/code&gt;, write a SQL solution to get the amount of transactions, total amount of all transactions, approved transactions, the amount of all approved transactions of each country in each month.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Study Notes - Multithreading (1)</title>
    <link href="http://yoursite.com/2019/10/15/multithreading-udemy-1/"/>
    <id>http://yoursite.com/2019/10/15/multithreading-udemy-1/</id>
    <published>2019-10-15T17:48:00.000Z</published>
    <updated>2019-10-28T16:09:18.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Thread-vs-Process"><a href="#1-Thread-vs-Process" class="headerlink" title="1. Thread vs. Process"></a><font color="dodgerblue">1. Thread vs. Process</font></h3><h4 id="Qs-what-is-thread-what-is-process-what’s-the-difference-between-them"><a href="#Qs-what-is-thread-what-is-process-what’s-the-difference-between-them" class="headerlink" title="Qs: what is thread ? what is process? what’s the difference between them?"></a><font color="tomato">Qs: what is thread ? what is process? what’s the difference between them?</font></h4><p>Both processes and threads are <font color="mediumslateblue"><strong>independent sequences of execution</strong></font>. The typical difference is that <font color="mediumslateblue"><strong>threads (of the same process) run in a shared memory space, while process run in separate memory spaces</strong></font>. More specifically,</p><ul><li>A <font color="royalblue">Process</font> can be thought of as an instance of a program in execution. It runs independelty and isolated of other processes. It <strong>cannot directly access variables and data structures</strong> of other processes. If you wish to access another process’ resource, <strong>Inter-process communication(IPC)</strong> has to be used such as <em>pipes</em>, <em>files</em>, <em>sockets</em> etc.</li><li>A <font color="royalblue">Thread</font> is aslo called <strong>Lightweight Process</strong>. It has its own call stack, but can <strong>access shared data of other threads</strong> in the same process. When one thread <strong>modifies a process resource</strong>, the change is immediately visible to sibling threads. And every thread has its own memory cache - <strong>Thread Local Storage</strong>.</li><li>A Java application runs by default in <strong>One Process</strong>.</li></ul><h4 id="Qs-what’s-the-difference-between-Mutliprocessing-and-Multithreading"><a href="#Qs-what’s-the-difference-between-Mutliprocessing-and-Multithreading" class="headerlink" title="Qs: what’s the difference between Mutliprocessing and Multithreading?"></a><font color="tomato">Qs: what’s the difference between Mutliprocessing and Multithreading?</font></h4><p><font color="mediumslateblue">Both <strong>Multiprocessing and Multithreading</strong> are used to increase the computing power of a system</font>.</p><p>For <strong>Multiprocessing</strong>,</p><ul><li>Multiprocessing is a system that has more than one or two processors. </li><li>CPUs are added for increasing computing speed of the system.</li><li>Multiple processes are executing concurrently.</li><li>Creation of a process is time-consuming and resource intensive.</li><li>It can be divided into two types, symmetric and asymmetirc.</li></ul><p>For <strong>Multithreading</strong>,</p><ul><li>Multithreading creates multiple threads of a single process ot increase computing power.</li><li>Myltiple thread of a single process are exected concurrently.</li><li>Creation of a thread is economical in both sense time and resource.</li></ul><p><strong>Example</strong>,</p><ul><li>Considering <strong>Chrome</strong>, it uses multiprocessing instead of multithreading. That is, each tab in the browser is a process. The reason of using multiprocessing rather than multithreading in the brower is that making the browser more crash resistant.<br><font color="tomato">The problem with threads is that if you try to access memory you shouldn’t or something, it’s not just that thread which will end, it’s the whole process, along with all the other threads managing all your tabs.</font><br><font color="royalblue">If using the multipleprocessing model and it means that you can crash one tab, but generally the rest won’t crash with it, because they’re in isolated processes.</font></li><li>Considering <strong>Controller</strong>, we can do Multithreading in <em>SpringBoot</em>, and both Multitheading and Multiprocessing in <em>PHP</em>.</li><li>Considering <strong>Database</strong>, <em>PostgreSQL</em> supports Multiprocessing and <em>MySql</em> supports multithreading. </li></ul><h3 id="2-How-to-create-a-Java-thread"><a href="#2-How-to-create-a-Java-thread" class="headerlink" title="2. How to create a Java thread?"></a><font color="dodgerblue">2. How to create a Java thread?</font></h3><p>There are two basic ways to do this,</p><ul><li><font color="royalblue"><strong>Extending the <em>Thread</em> class</strong></font></li><li><font color="royalblue"><strong>Implementing the <em>Runnable</em> class</strong></font></li></ul><h4 id="1-Creating-a-thread-via-extending-the-Thread-class"><a href="#1-Creating-a-thread-via-extending-the-Thread-class" class="headerlink" title="(1). Creating a thread via extending the Thread class"></a><font color="mediumslateblue">(1). Creating a thread via extending the <i>Thread</i> class</font></h4><p>We can create a thread through extending the <code>Thread</code> class as follows.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Then we can do <font color="royalblue"><strong>non-parallel execution</strong> (using method <code>run()</code>)</font> or <font color="royalblue"><strong>parallel execution</strong> (using method <code>start()</code>)</font>.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThreadTestDrive</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======Non-parallel execution======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======Non-parallel execution======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>The difference between <em>parallel</em> and <em>non-parallel</em> excution is shown as follows.</p><img src="parallel.png" width="80%" height="80%"><h4 id="2-Creating-a-thread-via-implementing-the-Runnable-interface"><a href="#2-Creating-a-thread-via-implementing-the-Runnable-interface" class="headerlink" title="(2). Creating a thread via implementing the Runnable interface"></a><font color="mediumslateblue">(2). Creating a thread via implementing the <i>Runnable</i> interface</font></h4><p>This may be desired if you want your thread to extend another class.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A new thread has been created."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Classes that implement <code>Runnable</code> are instantiate in a different way, i.e. </p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThreadTestDrive</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-Advanced-Ways-to-Create-Thread"><a href="#3-Advanced-Ways-to-Create-Thread" class="headerlink" title="3. Advanced Ways to Create Thread"></a><font color="dodgerblue">3. Advanced Ways to Create Thread</font></h3><p>Next, two advanced ways to create thread will be introduced. They are,</p><ul><li>Using class <code>ExecutorService</code></li><li>Using class <code>CompletableFuture</code></li></ul><h4 id="1-Creating-a-thread-Using-ExecutorService"><a href="#1-Creating-a-thread-Using-ExecutorService" class="headerlink" title="(1). Creating a thread Using ExecutorService"></a><font color="mediumslateblue">(1). Creating a thread Using <i>ExecutorService</i></font></h4><p><code>ExecutorService</code> is a framework provided by the <em>JDK</em> which automatically <font color="royalblue">provides a pool of threads and API for assigning tasks to it.</font> </p><p>Instantiating <code>ExecutorService</code> can be done by using <font color="lightseagreen"><strong>Factory Method of class <code>Executors</code></strong></font>. This is the simplest method. For example,</p><pre class=" language-java"><code class="language-java">ExecutorService executor2 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ExecutorService executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Because <code>ExecutorService</code> is an interface, <font color="lightseagreen"><strong>an instance of any its implementations can be used</strong></font>. There are several implementations to choose from in the <font color="lightseagreen"><strong><code>java.util.concurrent</code></strong></font> package or you can create your own. For example,</p><pre class=" language-java"><code class="language-java">ExecutorService executor2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> 0L<span class="token punctuation">,</span>                 TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                 <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Then, the next step is to <font color="lightseagreen"><strong>assign tasks to the <code>ExecutorService</code></strong></font>. <code>ExecutorService</code> can execute both <code>Runnable</code> and <code>Callable</code> tasks. Let’s create some tasks at first.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Runnable object is created using lambda expression</span>Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Callable<span class="token operator">&lt;</span>String<span class="token operator">></span> callable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    TimeUnit<span class="token punctuation">.</span>MILLISECOND<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"Task's execution"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Callable<span class="token operator">&lt;</span>String<span class="token operator">>></span> callables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Tasks can be assigned to the <code>ExecutorService</code> using several methods, including <font color="lightseagreen"><code>execute()</code>, <code>submit()</code>, <code>invokeAll()</code>, <code>invokeAny()</code>.</font></p><p>The <font color="lightseagreen"><code>execute()</code></font> method is void and it <font color="tomato">doesn’t give any possibility to get the result of task’s execution or to check the task’s status (is it running or executed)</font>. It accepts runnable tasks.</p><pre class=" language-java"><code class="language-java">executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The <font color="lightseagreen"><code>submit()</code></font> method <font color="tomato">submits a <code>Callable</code> or a <code>Runnable</code> task to an <code>ExecutorService</code> and returns a result of type Future</font>.</p><pre class=" language-java"><code class="language-java">executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The <font color="lightseagreen"><code>invokeAll()</code></font> method assigns a collection of tasks to an <code>ExecutorService</code>, causing each to be executed, and <font color="tomato">returns the result of all task executions in the form of a list of objects of type Future</font>.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Future<span class="token operator">&lt;</span>String<span class="token operator">>></span> futures <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">invokeAll</span><span class="token punctuation">(</span>callables<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="tomato"><strong>Tip 1: Difference between <em>Callable</em> and <em>Runnable</em> objects.</strong></font> </p><ul><li>They are similar, and are both designed for classes whose instances are potentially executed by another thread.</li><li>A <em>Callable</em> needs to implement <code>call()</code> method while a <em>Runnable</em> needs to implement <code>run()</code> method.</li><li>A <em>Runnable</em> object doesn’t return a result whereas a <em>Callable</em> object returns a result of type <code>Future</code>. </li><li>A <em>Runnable</em> object cannot throw a checked exception. The <em>Callable</em> object can throw an exception.</li></ul><p>For example,</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="tomato"><strong>Tip 2: Future object.</strong></font> </p><p>Java <em>Callable</em> tasks return <font color="mediumslateblue"><strong><code>java.util.concurrent.Future</code></strong></font> object. Uing <font color="mediumslateblue"><strong>Java Future</strong></font> object, we can find out the status of the <em>Callable</em> task and get the returned Object. Methods are provided to check if the <em>asynchronous</em> computation is complete, to wait for its completion, and to retrieve the result of the compuration.</p><ul><li><font color="royalblue"><code>get()</code></font>: Waits if necessary for the computation to complete, and then retrieves its result.</li><li><font color="royalblue"><code>isCancel()</code></font>: Returns true if this task was cancelled before it completed normally.</li><li><font color="royalblue"><code>isDone()</code></font>: Returns true if this task completed.</li></ul><p><font color="tomato"><strong>Tip 3: CountDownLatch object.</strong></font> </p><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CountDownLatch.html" target="_blank" rel="noopener">document</a><p>It provides a <font color="royalblue"><strong>synchronization aid</strong></font> that <font color="royalblue">allows one or more threads to wait until a set of operations being performed in other threads completes</font>.</p><p>A <strong>CountDownLatch</strong> is initialized with a given <font color="orange"><em><code>count</code></em></font>. The <font color="orange"><em>await()</em></font> mehtods block until the current count reaches zero due to invocations of the <font><em><code>countDown()</code></em></font> method, after which all waiting threads are released and any subsequent invocations of <font color="orange"><em>await()</em></font> return immediately. This is a <strong>one-shot</strong> phenomenon – the count cannot be reset. </p><p>A <strong>CountDownLatch</strong> is a versatile synchronization tool and can be used for a number of purposes. A CountDownLatch initialized with a count of <strong><em>one</em></strong> serves as a simple on/off latch, or gate: all threads invoking await wait at the gate until it is opened by a thread invoking <font color="orange"><em><code>countDown()</code></em></font>. A CountDownLatch initialized to <strong><em>N</em></strong> can be used to make one thread wait until N threads have completed some action, or some action has been completed N times.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Thread-vs-Process&quot;&gt;&lt;a href=&quot;#1-Thread-vs-Process&quot; class=&quot;headerlink&quot; title=&quot;1. Thread vs. Process&quot;&gt;&lt;/a&gt;&lt;font color=&quot;dodgerblue&quot;&gt;1.
      
    
    </summary>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>OO Design Patterns</title>
    <link href="http://yoursite.com/2019/10/07/design-patterns/"/>
    <id>http://yoursite.com/2019/10/07/design-patterns/</id>
    <published>2019-10-07T19:05:47.000Z</published>
    <updated>2019-10-22T15:24:27.238Z</updated>
    
    <content type="html"><![CDATA[<p>This post is the study note of <a href="https://www.amazon.ca/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124" target="_blank" rel="noopener">`Head First Design Patterns`</a>. In this post, many design patterns will be introduced briefly. To know more details of each design pattern, you can check other posts. And I also created a repository on Github including almost all the examples in this book <a href="https://github.com/tongshi049/head_first_design_patterns" target="_blank" rel="noopener">`git repository`</a>. </p><a id="more"></a><h3 id="1-Strategy-Pattern"><a href="#1-Strategy-Pattern" class="headerlink" title="1. Strategy Pattern"></a><font color="dodgerblue">1. Strategy Pattern</font></h3><h4 id="Definition"><a href="#Definition" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It <strong>defines a family of algorithms, encapsulates each one, and makes them interchangeable</strong>. Strategy lets the algorithm vary independently from clients that use it.</p><h4 id="The-class-diagram"><a href="#The-class-diagram" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="strategy.png" width="50%" height="50%"><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><p>We can see the strategy pattern is flexible, since it uses <em>object composition</em>. With strategy pattern, clients can change their algorithms <em>at runtime</em> simply by using a different strategy object.</p><h3 id="2-Observer-Pattern"><a href="#2-Observer-Pattern" class="headerlink" title="2. Observer Pattern"></a><font color="dodgerblue">2. Observer Pattern</font></h3><h4 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It defines a <strong>ONE-to-MANY dependency</strong> between objects so that when <strong>one object changes state</strong>, all of its dependents are <strong>notified and updated</strong> automatically.</p><h4 id="The-class-diagram-1"><a href="#The-class-diagram-1" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="observer.png" width="50%" height="50%"><h4 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li>Objects use the <em>subject interface</em> to register as a object and also to remove themselves from being observers.</li><li>Each subject can have <strong><em>MANY</em></strong> observers.</li><li>Each observer registers with a concrete subject to receive updates.</li><li><font color="tomato">Observer pattern makes subject and observers <strong><em>LOOSELY COUPLED</em></strong>.</font> <ul><li>The only thing the subject knows about an observer is <strong>it implements a certain interface</strong>.</li><li>A new observer can be <strong>added at any time</strong>.</li><li>There is <strong>no need to modify a subject</strong> when adding a new type observer.</li><li>Subjects and observers can be <strong>reused</strong>, since they are indepent of each other.</li></ul></li></ul><h3 id="3-Decorator-Pattern"><a href="#3-Decorator-Pattern" class="headerlink" title="3. Decorator Pattern"></a><font color="dodgerblue">3. Decorator Pattern</font></h3><h4 id="Definition-2"><a href="#Definition-2" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It <strong>attaches additional responsibilities to an object dynamically</strong>. Decorators provide a flexible alternative to subclassing for extending functionality. </p><h4 id="The-class-diagram-2"><a href="#The-class-diagram-2" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="decorator.png" width="50%" height="50%"><h4 id="Tips-2"><a href="#Tips-2" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li>Each component can be used on its own or wrapped by a decorator.</li><li>Each decorator <strong><em>HAS-A</em></strong> component, which means it has a instance variable that holds the reference to a component.</li></ul><h3 id="4-Factory-Method-Pattern"><a href="#4-Factory-Method-Pattern" class="headerlink" title="4. Factory Method Pattern"></a><font color="dodgerblue">4. Factory Method Pattern</font></h3><h4 id="Definition-3"><a href="#Definition-3" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It defines an interface for <strong>creating an object</strong> but <strong>lets subclasses <font color="tomato">decide</font> which class to instantiate</strong>. Factory Method lets a class <strong>defer instantiation to subclasses</strong>.</p><h4 id="The-class-diagram-3"><a href="#The-class-diagram-3" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="factory.png" width="45%" height="45%"><h4 id="Tips-3"><a href="#Tips-3" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li>Factory Method gives us a way to <font color="tomato"><strong>encapsulate the instantiations of concrete types</strong></font>.</li><li><font color="tomato"><strong>Decide</strong></font>, not because the pattern allows subclasses themselves to decide at runtime, but because <strong>the creator class is written without knowledge of the actural products that will be created, which is decide purely by the choice of the subclass that is used</strong>.</li><li>The <font color="tomato">abstract factoryMethod()</font> is what all creator subclasses must implement.</li><li>The Concreator implements the factoryMethod(), and it is the <strong>only</strong> class that has the knowledge of how to create these products.</li><li>Reflect <font color="tomato"><strong>Dependency Inversion Principle</strong>, that is <strong>“Depend on abstractions. Do not depend on concrete classes”</strong></font> </li></ul><h3 id="5-Abstract-Factory-Pattern"><a href="#5-Abstract-Factory-Pattern" class="headerlink" title="5. Abstract Factory Pattern"></a><font color="dodgerblue">5. Abstract Factory Pattern</font></h3><h4 id="Definition-4"><a href="#Definition-4" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It provides an interface for <strong>creating families fo related or dependent objects without specifying their concrete class</strong>. </p><h4 id="The-class-diagram-4"><a href="#The-class-diagram-4" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="abstract_factory.png" width="60%" height="60%"><h4 id="Tips-4"><a href="#Tips-4" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li>An abstract factory gives us an interface for creating a family of products without knowing about the concrete products that are acturally producted. In this way, the client is <font color="tomato"><strong>decoupled from any of the specifices of the concrete products</strong></font>.</li><li>The Client is written against the abstract factory and then composed at runtime with an actual factory.</li><li>The concrete factories implement the different product families. To create a product, the client uses one of these factories, so it never has to instantiate a product object.</li></ul><h3 id="6-Singleton-Pattern"><a href="#6-Singleton-Pattern" class="headerlink" title="6. Singleton Pattern"></a><font color="dodgerblue">6. Singleton Pattern</font></h3><h4 id="Definition-5"><a href="#Definition-5" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It ensures a class has <strong>only one</strong> instance, and provides a <strong>global point</strong> of access to it.  </p><h4 id="The-class-diagram-5"><a href="#The-class-diagram-5" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="singleton.png" width="25%" height="25%"><h4 id="Tips-5"><a href="#Tips-5" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li>We are preventing any other class from creating a new instance on tis own. To get an instance, you’ve got to go through the class itself.</li><li>We can create the Singleton in a lazy manner, which is especially important for resource intensive objects.</li></ul><h3 id="7-Command-Pattern"><a href="#7-Command-Pattern" class="headerlink" title="7. Command Pattern"></a><font color="dodgerblue">7. Command Pattern</font></h3><h4 id="Definition-6"><a href="#Definition-6" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It <strong>encapsulates a request as an object</strong>, thereby letting you parameterize other objects with different requests, queue or log requests, and support undoable operations.<br><strong>Command Object</strong>:<br><img src="commandobject.png" width="30%" height="30%"></p><h4 id="The-class-diagram-6"><a href="#The-class-diagram-6" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="command.png" width="50%" height="50%"><h4 id="Tips-6"><a href="#Tips-6" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li>It allows us to <font color="tomato"><strong>decouple the requester of an action from the object that actually performs the action</strong></font>. So the <em>requester</em> would be the <em>remote control</em> and the <em>objcet</em> that performs the action would be an instatnce of one of vendor classes. And the requester now doesn’t need to know how to perform the action.</li><li>A command object <em>encapsutes a request</em> by binding together a set of actions on a specific receiver. To achieve this, it packages the actions and the receiver up to an object which exposes just one method, <code>execute()</code>.</li><li>The Client is responsible for creating a ConcreteCommand and setting its Receiver.</li><li>The Invoker holds a command and at some point asks the command to carry out a request by calling its <code>execute()</code> method. It can be parameterized with Commands, even dynamically at runtime.</li><li>The ConcreteCommand defines a binding between an action and a Receiver. The Invoker makes a request by calling <code>execute()</code> and the ConcreteCommand carries it out by calling one or more actions on the Receiver.</li><li>The Receiver knows how to perform the work needed to carry out the request. Any class can act as a Receiver.</li></ul><h3 id="7-Adapter-Pattern"><a href="#7-Adapter-Pattern" class="headerlink" title="7. Adapter Pattern"></a><font color="dodgerblue">7. Adapter Pattern</font></h3><h4 id="Definition-7"><a href="#Definition-7" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It <strong>converts the interface of a class into another interface the client expects</strong>. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.</p><h4 id="The-class-diagram-7"><a href="#The-class-diagram-7" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="adapter.png" width="50%" height="50%"><h4 id="Tips-7"><a href="#Tips-7" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li>The Adapter <strong>implements</strong> the Target interface, and it also is <strong>composed with</strong> the Adaptee.</li></ul><h3 id="8-Facade-Pattern"><a href="#8-Facade-Pattern" class="headerlink" title="8. Facade Pattern"></a><font color="dodgerblue">8. Facade Pattern</font></h3><h4 id="Definition-8"><a href="#Definition-8" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It <strong>provides a unified interface</strong> to a set of interfaces in a subsystem.  Facade <strong>defines a higher-level interface</strong> that makes the subsystem easier to use.</p><h4 id="The-class-diagram-8"><a href="#The-class-diagram-8" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="facade.png" width="50%" height="50%"><h4 id="Tips-8"><a href="#Tips-8" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li>Facades and adapters may wrap multiple classes, but a facade’s intent is to <font color="tomato"><strong>simplfy</strong></font>, while an adapter’s is to <font color="tomato"><strong>convert</strong></font> the interface to something different.</li><li>Client’s job becomes easier because of the facade.</li></ul><h3 id="9-Template-Pattern"><a href="#9-Template-Pattern" class="headerlink" title="9. Template Pattern"></a><font color="dodgerblue">9. Template Pattern</font></h3><h4 id="Definition-9"><a href="#Definition-9" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It <strong>defines the skeleton of an algorithm in a method, deferring some steps to subclasses</strong>. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.</p><h4 id="The-class-diagram-9"><a href="#The-class-diagram-9" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="template.png" width="50%" height="50%"><h4 id="Tips-9"><a href="#Tips-9" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li><font color="tomato">What’s a template?</font> It is just a method; it’s a method that defines an algorithm as a set of steps.</li><li>One or more these steps is defined to be <strong>abstract</strong> and <strong>implemented by a subclass</strong>. This ensures the algorithm’s structure stays unchanged, while subclasses provide some part of the implementation.</li><li>A <font color="tomato"><strong>hook</strong></font> is a method that is defined in the abstract class, but only given an empty or default implementation. This gives subclasses the ability to “hook into” the algorithm at various points, if they wish; a subclass is also free to ignore the hook.</li><li>Difference with strategy pattern: Strategy pattern uses object composition. In strategy, the class we compose with implements the <em>entire algorithm</em>.</li></ul><h3 id="10-Iterator-Pattern"><a href="#10-Iterator-Pattern" class="headerlink" title="10. Iterator Pattern"></a><font color="dodgerblue">10. Iterator Pattern</font></h3><h4 id="Definition-10"><a href="#Definition-10" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It provides a way to <strong>access the elements of an aggregate object sequentially without exposing its underlying representation</strong>.</p><h4 id="The-class-diagram-10"><a href="#The-class-diagram-10" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="iterator.png" width="50%" height="50%"><h4 id="Tips-10"><a href="#Tips-10" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li>It allows uniformly access the elementss of aggregate objects without exposing the underlying implementation.</li><li>It <strong>places the task of traversal on the iterator object</strong>, <strong>not</strong> on the aggregate which simplifies the aggregate interface and implementation, and places the responsibility where it should be.</li><li>It refelcts <strong>Single Responsibility Principle</strong>.</li><li><code>Hashtable</code> is one of a few classes that <em>indirectly</em> supports Iterator. We can get the iterator of its values, i.e. <code>ht.values().iterator()</code>.</li></ul><h3 id="11-Composite-Pattern"><a href="#11-Composite-Pattern" class="headerlink" title="11. Composite Pattern"></a><font color="dodgerblue">11. Composite Pattern</font></h3><h4 id="Definition-11"><a href="#Definition-11" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It allows us to <em>compose</em> objects into <strong>tree structures</strong> to represent <strong>part-whole hierarchies</strong>. Composite lets clients <strong>treat indeividual objects and compositions of objects uniformly</strong>.<br><strong>Tree Structure</strong>:<br><img src="tree.png" width="40%" height="40%"></p><h4 id="The-class-diagram-11"><a href="#The-class-diagram-11" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="composite.png" width="50%" height="50%"><h4 id="Tips-11"><a href="#Tips-11" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li>A composite contains components. Components come in two flavors: composite and leaf elements.</li><li>All leaf objects and composite objects must extend the component abstraction. Because leaves and nodes have different roles we can’t always define a default implementation for each method that makes sense. Sometimes the the best we can do is <font color="tomato"><strong>throw a runtime exception</strong></font>. For example,</li></ul><pre><code>public void add(Component component) {    throw new UnsupportedOperationException();}</code></pre><ul><li>How to implement a <font color="tomato"><strong>composite iterator</strong></font>?</li></ul><pre><code>public class CompositeIterator implements Iterator {    Deque&lt;Iterator&gt; stack = new ArrayDeque&lt;&gt;();    public CompositeIterator (Iterator iterator) {        stack.push(iterator);    }    public Object next() {        if (hasNext()) {            Iterator iterator = (Iterator) this.stack.peek();            Component component = (Component) iterator.next();            if (component instanceof Composite)                stack.push(component);            return component;        } else {            return null;        }    }    public boolean hasNext() {        if (this.stack.isEmpty()) return false;        Iterator iterator = this.stack.peek();                if (iterator.hasNext()) {            return true;        } else {            this.stack.pop();            return hasNext();        }     }}</code></pre><h3 id="12-State-Pattern"><a href="#12-State-Pattern" class="headerlink" title="12. State Pattern"></a><font color="dodgerblue">12. State Pattern</font></h3><h4 id="Definition-12"><a href="#Definition-12" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It allows an object to alter its behavior <strong>when its internal state changes</strong>. The object will appear to change its class.</p><h4 id="The-class-diagram-12"><a href="#The-class-diagram-12" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="state.png" width="50%" height="50%"><h4 id="Tips-12"><a href="#Tips-12" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li>It <strong>encapsulates state into separate classes</strong> and <strong>delegates the object representing the current state</strong>, so the behavior changes along wit the internal state.</li><li>How to understant “appear to change its class?” We can think about it from the perspective of a client: if an object we’re using can completely change its behavior, then it appears to us that the object is actually instantiated from another class. In reality, we are using <em>composition</em> to give the appearance of a class change by simply referencing different state objects.</li><li><font color="tomato">What’s the <em>difference</em> between Stategy Pattern and State Pattern?</font> Their class diagrams are essentially the same, but two patterns differ in their <font color="tomato"><strong>intent</strong></font>.<ul><li>With the <strong>State Pattern</strong>, we have a set of behaviors encapsulated in state objects; at any time the context is delegating to one of those states. Over time, the current state changes across the set of state objects to reflect the internal state of the context, so the context’s behavior changes over time as well. The <strong>client usually knows very little about the state objects</strong>.</li><li>With <strong>Strategy</strong>, the <strong>client usually specifies the strategy object</strong> that the context is composed with. While the pattern provides the flexibility to change the stategy object at runtime, often there is a strategy object that is most appropriate for a context object.</li><li>In general, think of the <strong>Strategy Pattern</strong> as a <em>flexible alternative to subclassing</em>; if we use inheritance to define the behavior of class, then we’re stuch with that behavior even if we need to change it. With Stragety, we can <strong>change the behavior by composing with a different object</strong>.</li><li>Think of the <strong>State Pattern</strong> as <em>an alternative to putting lots of conditionals in our context</em>; by <em>encapsulting the behaviors within state objects</em>, we can simply <strong>change the state object in context to change its behavior</strong>.</li></ul></li></ul><h3 id="13-Proxy-Pattern"><a href="#13-Proxy-Pattern" class="headerlink" title="13. Proxy Pattern"></a><font color="dodgerblue">13. Proxy Pattern</font></h3><h4 id="Definition-13"><a href="#Definition-13" class="headerlink" title="Definition:"></a><font color="mediumslateblue">Definition:</font></h4><p>It provides a surrogate or placeholder for another object to <strong>control access to it</strong>. It <strong>creates a representative object</strong> that <strong>controls access to another object</strong>, which may be <em>remote</em>, <em>expensive to create</em> or in need of <em>securing</em>.</p><h4 id="The-class-diagram-13"><a href="#The-class-diagram-13" class="headerlink" title="The class diagram:"></a><font color="mediumslateblue">The class diagram:</font></h4><img src="proxy.png" width="40%" height="40%"><h4 id="Tips-13"><a href="#Tips-13" class="headerlink" title="Tips:"></a><font color="mediumslateblue">Tips:</font></h4><ul><li>Both the Proxy and the RealSubject implement the Subject interface. This <em>allows any client to treat the proxy just like the RealSubject</em>.</li><li>The Proxy <em>keeps a reference to the Subject</em>, so it can forward requests to the Subject when necessary.</li><li>The Proxy often <em>instantiates or handles the creation of the RealSubject</em>.</li><li>The RealSubject is usually the object that does most of the real work; the Proxy controls access to it.</li></ul><h4 id="Three-types-of-Proxies"><a href="#Three-types-of-Proxies" class="headerlink" title="Three types of Proxies: "></a><font color="mediumslateblue">Three types of Proxies: </font></h4><p><font color="royalblue"><strong>Remote Proxy</strong>: </font><br>With Remote Proxy, the proxy acts as a <strong>local representative for an object that lives in a different JVM</strong>. A method call on the proxy results in the call being transferred over the wire, invoked remotely, and the result being returned back to the proxy and then to the Client.</p><img src="remoteproxy.png" width="40%" height="40%"><p><font color="royalblue"><strong>Virtual Proxy</strong>: </font><br>Virtual Proxy acts as a <strong>representative for an object that may be expensive to create</strong>. The Virtual Proxy ofter <strong>defers the creation of the object until it is needed</strong>; the Virtual Proxy also acts as a <strong>surrogate for the object before and while it is being created</strong>. After that, the proxy deletages requests directly to the RealSubject.</p><img src="virtualproxy.png" width="40%" height="40%"><p><font color="royalblue"><strong>Protection Proxy (Dynamic Proxy)</strong>: </font><br>To create these proxies, we can use the Java API’s dynamic proxy (in the package <code>java.lang.reflect</code>). Java creates the <code>Proxy</code> class for us, we need a way to tell the <code>Proxy</code> class what to do. We can’t put code in the <code>Proxy</code> class, where do we put it? In an <font color="tomato"><strong>InvocationHandler</strong>.</font> <strong>The InvocationHandler is to respond to any method calls on the proxy.</strong> </p><img src="protectionproxy.png" width="50%" height="50%"><ul><li>The <code>Proxy</code> is generated by Java and implements the entire <code>Subject</code> interface. For example,</li></ul><pre><code>PersonBean getOwnerProxy(PersonBean person) {    return (PersonBean) Proxy.newProxyInstance(            person.getClass().getClassLoader(),            person.getClass().getInterfaces(),            new OwnerInvocationHandler(person)    );}</code></pre><ul><li>We supply the <code>InvocationHandler</code>, which gets passed all method calls that invoked on the <code>Proxy</code>. The <code>InvocationHandler</code> controls access to the methods of the <code>RealSubject</code>. For example, </li></ul><pre><code>public class OwnerInvocationHandler implements InvocationHandler {    PersonBean person;    &#x2F;*    * Pass the real subject in the constructor and we keep a reference to it.    * *&#x2F;    public OwnerInvocationHandler(PersonBean person) {        this.person = person;    }    &#x2F;*    * invoke method: gets called every time a method is invoked on the proxy    *    * *&#x2F;    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws IllegalAccessException {                try {                        if (method.getName().startsWith(&quot;get&quot;)) { &#x2F;&#x2F; if method is a getter, we go ahead and invoke it on the real subject                return method.invoke(person, args);            } else if (method.getName().equals(&quot;setHotOrNotRating&quot;)) { &#x2F;&#x2F; we disallow it by throwing a IllegalAccessException                throw new IllegalAccessException();            } else if (method.getName().startsWith(&quot;set&quot;)) {                return method.invoke(person,  args);            }        } catch (InvocationTargetException e) {            e.printStackTrace();        }        return null;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post is the study note of &lt;a href=&quot;https://www.amazon.ca/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;`Head First Design Patterns`&lt;/a&gt;. In this post, many design patterns will be introduced briefly. To know more details of each design pattern, you can check other posts. And I also created a repository on Github including almost all the examples in this book &lt;a href=&quot;https://github.com/tongshi049/head_first_design_patterns&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;`git repository`&lt;/a&gt;. &lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yoursite.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Singleton Design Pattern - One-of-a-Kind Objects</title>
    <link href="http://yoursite.com/2019/09/26/singleton-design-pattern/"/>
    <id>http://yoursite.com/2019/09/26/singleton-design-pattern/</id>
    <published>2019-09-26T17:26:00.000Z</published>
    <updated>2019-10-22T15:25:48.954Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-Definition"><a href="#1-Definition" class="headerlink" title="1. Definition"></a><font color="dodgerblue">1. Definition</font></h4><p>Definition in <a href="https://en.wikipedia.org/wiki/Singleton_pattern" target="_blank" rel="noopener">wikipedia</a></p><div style="background-color: LAVENDERBLUSH; padding: 10px">    The <b>Singleton pattern</b> is a software design pattern that restricts the instantiation of a class to <b>one single instance</b>. This is useful when exactly one object is needed to coordinate actions across the system.</div><a id="more"></a><p><font color="dodgerblue"><strong>2. What use is singleton pattern?</strong></font></p><p>There are many objects we only need one of: <em>thread pools</em>, <em>caches</em>, <em>dialog boxes</em>, <em>objects that preferences and registry settings</em>, <em>objects used for logging</em>, and <em>objects that act as device derivers to devices like printers and graphics cards</em>. In fact, for many of these types of objects, if we were to instantiate more than one we’d run into all sorts of problems like <em>incorrect program behivior</em>, <em>overuse of resource</em>, or <em>inconsistent results</em>.</p><p><font color="dodgerblue"><strong>3. How singleton pattern achieve this?</strong></font></p><ul><li>Hide the constructor of the class.</li><li>Define a public static operation <code>getInstance()</code> that returns the sole instance of the class.</li></ul><p><font color="dodgerblue"><strong>4. Implementation singleton pattern</strong></font></p><p>The lazy initialization is shown as follows.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton SINGLETON<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"An only-one object is created."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SINGLETON <span class="token operator">==</span> null<span class="token punctuation">)</span>            SINGLETON <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SINGLETON<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Test if we can create only one object</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Singleton singleton1 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton singleton2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Result is :</span><span class="token comment" spellcheck="true">//An only-one object is created. </span></code></pre><p>Considering multithreading, we should make <code>getInstance()</code> a synchronized method. </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>SINGLETON <span class="token operator">==</span> null<span class="token punctuation">)</span>         SINGLETON <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> SINGLETON<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="tomato">Actually, the above code is not quite good. The only time synchronizatino is relevant is the first time through this method. Say once we’ve set the <code>SINGLETON</code> varialbe to an instance of <code>SINGLETON</code>, we have no further to synchronize this method. After the first time through, synchronization is totally unneeded overhead!</font></p><p><font color="TURQUOISE"><strong>Improved methods:</strong></font></p><p>We have a few options to solve this.</p><ul><li><p><font color="mediumslateblue">Do nothing if the performance of <code>getInstance()</code> is not critical to the application.**</font></p></li><li><p><font color="mediumslateblue">Move to an <strong>eagerly created instance</strong> rather than a lazily created one.</font>Likt this,</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton SINGLETON <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> SINGLETON<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>Using this appreach, we rely on <strong>JVM</strong> to create the unique instance of Singleton when the class is loaded. The <strong>JVM</strong> guarantees that the instance will be created before any thread accesses the static <code>SINGLETON</code> variable.</p><ul><li><font color="mediumslateblue">User “double-checked locking” to reduce the use of synchronization in <code>getInstance()</code></font></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton SINGLETON<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SINGLETON <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>SINGLETON <span class="token operator">==</span> null<span class="token punctuation">)</span>                    SINGLETON <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> SINGLETON<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>The <strong><em>volatile</em></strong> keyword ensures that multiple threads handle the <code>SINGLETON</code> variable correctly when it is being initialized to the <code>Singleton</code> instance.</p><p><font color="tomtato">Unfortunately, this method is broken under JDK 1.4 and lower because volatile usage and semantics.</font></p><p><font color="dodgerblue"><strong>5. Implementation singleton pattern through inner class</strong></font></p><p>By using <code>static inner nested class</code> in Java to ensure on-demand loading, we can also create a singleton object. This is <strong>Thread-safe</strong> as initialization is done on-demand. There is no need for any synchronization. It’s also a <strong>lazy initialization</strong> method.  </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Hodler</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Hodler<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="dodgerblue"><strong>6. Conclusion</strong></font></p><ul><li>The Singleton Pattern ensures you have at most one instance of a class in your application.</li><li>The Singleton Pattern also provides a global access point to that instance.</li><li>Java’s implementation of the Singleton Pattern makes use of a private constructor, a static method combined with a static variable.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-Definition&quot;&gt;&lt;a href=&quot;#1-Definition&quot; class=&quot;headerlink&quot; title=&quot;1. Definition&quot;&gt;&lt;/a&gt;&lt;font color=&quot;dodgerblue&quot;&gt;1. Definition&lt;/font&gt;&lt;/h4&gt;&lt;p&gt;Definition in &lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;background-color: LAVENDERBLUSH; padding: 10px&quot;&gt;
    The &lt;b&gt;Singleton pattern&lt;/b&gt; is a software design pattern that restricts the instantiation of a class to &lt;b&gt;one single instance&lt;/b&gt;. This is useful when exactly one object is needed to coordinate actions across the system.
&lt;/div&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yoursite.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Command Design Pattern - Encapsulating Invocation</title>
    <link href="http://yoursite.com/2019/09/25/command-design-pattern/"/>
    <id>http://yoursite.com/2019/09/25/command-design-pattern/</id>
    <published>2019-09-25T15:36:45.000Z</published>
    <updated>2019-10-22T15:26:12.312Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-What-Command-Pattern-defined"><a href="#1-What-Command-Pattern-defined" class="headerlink" title="1. What Command Pattern defined"></a><font color="dodgerblue">1. What Command Pattern defined</font></h4><div style="background-color: LAVENDERBLUSH; padding: 10px">The <b>Command Pattern</b> <b>encapsulates a <i>request</i></b> as an <b><i>object</i></b>, thereby letting you <b>parameterize</b> other objects with different <b><i>requests</i></b>, <b><i>queue</i></b> or <b><i>log requests</i></b>, and support <b>undoable operation</b>.</div><p>Four terms are always associated with the command pattern, they are <strong>command</strong>, <strong>receiver</strong>, <strong>invoker</strong> and <strong>client</strong>. Let’s see them in detail.</p><a id="more"></a><img src="command.png" width="30%" height="30%"><p>Image source: <a href="https://www.amazon.ca/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124/ref=sr_1_1?keywords=head+first+des&qid=1569455594&sr=8-1" target="_blank" rel="noopener">Head First Design Patterns</a></p><p><font color="TURQUOISE"><strong>1). Command object</strong></font></p><p><em>It encapsulates a request</em> by binding together a set of actions on a specific receiver. To achieve this, it <font color="mediumslateblue">packages the actions and the receiver up into an object that expoased just one method, <code>execute()</code>.</font> When called, <code>execute()</code> causes the actions to be invoked on the receiver.<br>From the outside, no other objects really know that actions get performed on what receiver; they just know that if they call <code>execute()</code> method, their request will be serviced.</p><p><font color="TURQUOISE"><strong>2). Receiver object</strong></font>: </p><p>The <em>receiver</em> object is also stored in <em>command</em> object. The <em>recever</em> does the work when the <code>execute()</code> method in <em>command</em> is called.</p><p><font color="TURQUOISE"><strong>3). Invoker object</strong></font>: </p><p>An <em>invoker</em> object knows how to execute a <em>command</em>, and optionally does bookkeeping about the command execution. The <em>invoker</em> does not know anything about a <em>concrete command</em>, it knows only about the <em>command interface</em>.</p><p><font color="TURQUOISE"><strong>4). Clinet object</strong></font>: </p><p><em>Invoker</em>, <em>command</em>, and <em>receiver</em> objects are held by a <em>client</em> object, <em>client</em> decides which <em>receiver</em> it assigns to the <em>command</em>, and which <em>command</em> it assigns to the <em>invoker</em>. The <em>client</em> decides which commands to execute at which points. To execute a <em>command</em>, it passes the <em>command</em> to the <em>invoker</em>.</p><h4 id="2-Application-scenario"><a href="#2-Application-scenario" class="headerlink" title="2. Application scenario"></a><font color="dodgerblue">2. Application scenario</font></h4><p>Command design pattern can solve these problems: </p><ul><li>Coupling the invoker of a request to a particular request should be avoided.</li><li>It should be possible to configure an object (that invokes a request) with a request.</li></ul><p>The solutions it provides are:</p><ul><li>Define seperate (command) objects that encapsulate a request.</li><li>A class delegates a request to a common object instead of implementing a particular request directly.</li></ul><h4 id="3-Structure"><a href="#3-Structure" class="headerlink" title="3. Structure"></a><font color="dodgerblue">3. Structure</font></h4><img src="uml.png" width="60%" height="60%"><p>Image source: <a href="https://www.amazon.ca/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124/ref=sr_1_1?keywords=head+first+des&qid=1569455594&sr=8-1" target="_blank" rel="noopener">Head First Design Patterns</a></p><h4 id="4-Example"><a href="#4-Example" class="headerlink" title="4. Example"></a><font color="dodgerblue">4. Example</font></h4><p>In this example, the task is to design an API for remote control of some devices in home like light, garage door… When user click a light on button then the light is turned on. </p><details>    <summary>EXAMPLE</summary><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*-----------entities----------------*/</span><span class="token comment" spellcheck="true">/** Light has two function, turn on or turn off* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Turn light on."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Turn light off."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*-----------command interface----------------*/</span><span class="token comment" spellcheck="true">/** Command Interface* */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*-----------concrete command class------------*/</span><span class="token comment" spellcheck="true">/** Command to turn on light* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    Light light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LightOnCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * Command to turn off light * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    Light light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LightOffCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*-------------------invoker-------------------*/</span><span class="token comment" spellcheck="true">/** invoker: used to set commands* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteControl</span> <span class="token punctuation">{</span>    Command<span class="token punctuation">[</span><span class="token punctuation">]</span> onCommands<span class="token punctuation">;</span>    Command<span class="token punctuation">[</span><span class="token punctuation">]</span> offCommands<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>offCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Command noCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            onCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> noCommand<span class="token punctuation">;</span>            offCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> noCommand<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommands</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">,</span> Command onCommand<span class="token punctuation">,</span> Command offCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> onCommand<span class="token punctuation">;</span>        offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> offCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n---------- Remote Control --------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> onCommands<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"slot: "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> onCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">"   "</span> <span class="token operator">+</span> offCommands<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*-------------------client-------------------*/</span><span class="token comment" spellcheck="true">/** client: hold the command, receiver, and invoker objects* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteLoader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Create all the devices</span>        Light light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Create all the light command objects</span>        Command lightOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>        Command lightOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// load commands to the remote slots</span>        RemoteControl remoteControl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">setCommands</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lightOnCommand<span class="token punctuation">,</span> lightOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>remoteControl<span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteControl<span class="token punctuation">.</span><span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></details> <p>The result is shown as follows.</p><img src="res.png" width="50%" height="40%"><h4 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5. Conclusion"></a><font color="dodgerblue">5. Conclusion</font></h4><ul><li><font color="mediumslateblue"><strong>The Command Pattern decouples an object, making a request from the one that knows how to perform it.</strong></font></li><li><font color="mediumslateblue"><strong>The command object is at the center of this decoupling and encapsulates a receiver with an action (or set of actions).</strong></font></li><li><font color="mediumslateblue"><strong>An invoker makes a request of a Command object by calling its <code>execute()</code> method, which invokes those actions on the receiver.</strong></font></li><li><font color="mediumslateblue"><strong>Invokers can be parameterized with Coammands, even dynamically at runtime.</strong></font></li><li><font color="mediumslateblue"><strong>Support Undo.</strong></font></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-What-Command-Pattern-defined&quot;&gt;&lt;a href=&quot;#1-What-Command-Pattern-defined&quot; class=&quot;headerlink&quot; title=&quot;1. What Command Pattern defined&quot;&gt;&lt;/a&gt;&lt;font color=&quot;dodgerblue&quot;&gt;1. What Command Pattern defined&lt;/font&gt;&lt;/h4&gt;&lt;div style=&quot;background-color: LAVENDERBLUSH; padding: 10px&quot;&gt;The &lt;b&gt;Command Pattern&lt;/b&gt; &lt;b&gt;encapsulates a &lt;i&gt;request&lt;/i&gt;&lt;/b&gt; as an &lt;b&gt;&lt;i&gt;object&lt;/i&gt;&lt;/b&gt;, thereby letting you &lt;b&gt;parameterize&lt;/b&gt; other objects with different &lt;b&gt;&lt;i&gt;requests&lt;/i&gt;&lt;/b&gt;, &lt;b&gt;&lt;i&gt;queue&lt;/i&gt;&lt;/b&gt; or &lt;b&gt;&lt;i&gt;log requests&lt;/i&gt;&lt;/b&gt;, and support &lt;b&gt;undoable operation&lt;/b&gt;.&lt;/div&gt;

&lt;p&gt;Four terms are always associated with the command pattern, they are &lt;strong&gt;command&lt;/strong&gt;, &lt;strong&gt;receiver&lt;/strong&gt;, &lt;strong&gt;invoker&lt;/strong&gt; and &lt;strong&gt;client&lt;/strong&gt;. Let’s see them in detail.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yoursite.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Observer Design Pattern = Publishers + Subscribers</title>
    <link href="http://yoursite.com/2019/09/24/observer-design-pattern/"/>
    <id>http://yoursite.com/2019/09/24/observer-design-pattern/</id>
    <published>2019-09-24T18:16:39.000Z</published>
    <updated>2019-10-22T15:26:45.613Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-What-Observer-Pattern-defined"><a href="#1-What-Observer-Pattern-defined" class="headerlink" title="1. What Observer Pattern defined"></a><font color="dodgerblue">1. What Observer Pattern defined</font></h4><div style="background-color: LAVENDERBLUSH; padding: 10px">The <b>Observer Pattern</b> defines a <b><i>one-to-many</i></b> <b>dependency</b> between objects so that when one object changes state, all of its dependents are <b>notified and updated automatically</b>.</div><a id="more"></a><p>The following image is from book <strong>Head First Design Patterns</strong>.<br><img src="observer1.png" width="60%" height="60%"></p><p><font color="TURQUOISE"><strong>Points:</strong></font></p><ul><li><font color="MEDIUMSLATEBLUE">What does this have to do with <em>one-to-many</em> relationship</font><br>With the observer pattern, the <strong>Subject</strong> is the object that contains the state and controls it. So, there is <strong>ONE subject with state</strong>. The <strong>observers</strong>, on the other hand use the state, even if they don’t own it. There are many observers and they rely on the Subject to tell them when its state changes. So there is a relationship between the <strong>ONE Subject</strong> to the <strong>MANY Observers</strong>.</li><li><font color="MEDIUMSLATEBLUE">How does dependence come into this?</font><br>Because the subject is the <strong>sole owner of the data</strong>, the observers are dependent on teh subject to update them when the data changes. This leads to a cleaner OO design than allowing many objects to control the same data.</li></ul><h4 id="2-Structure"><a href="#2-Structure" class="headerlink" title="2. Structure"></a><font color="dodgerblue">2. Structure</font></h4><p>The UML is shown as follows.<br><img src="UML.png" width="60%" height="60%"></p><p><font color="TURQUOISE"><strong>Points:</strong></font></p><ol><li>Objects use this <code>ISubject</code> interface to register as observers and also to remove themselves from being observers.</li><li>Each subject can have many observers.</li><li>The <code>IObserver</code> interface just has one method <code>update()</code> that gets called when the subject’s state changes.</li><li>A concrete subject implements the <code>ISubject</code> interface. Besides the register and remove method, the concrete subject implements a <code>notify()</code> method which is used to update all the current observers.</li><li>The concrete subject may also have methods for setting and getting its state.</li><li>Concrete observers can be any class that implements the <code>IObserver</code> interface. Each observer registers with a concrete subject to receive updates.</li></ol><h4 id="3-Advantages"><a href="#3-Advantages" class="headerlink" title="3. Advantages"></a><font color="dodgerblue">3. Advantages</font></h4><p><font color="deepskyblue"><strong>The Observer Pattern provides an object design where subjects and observers are loosely coupled. Why?</strong></font></p><ul><li><font color="royalblue">The only thing the subject knows about an observer is that <strong>it implements a certain interface (the <code>Observer</code> interface)</strong>.</font> It doesn’t need to know the concrete class of the observer, what is does, or anything else about it.</li><li><font color="royalblue">We can add new observers at any time.</font></li><li><font color="royalblue">We never need to modify the subject to add new types of observers.</font></li><li><font color="royalblue">We can reuse subjects or observers independently of each other</font></li><li><font color="royalblue">Changes to either the subject or an observer will not affect the other (power of loosly coupled).</font></li></ul><p><font color="tomato"><strong>Tip about <em>Loosely coupled</em></strong></font></p><ul><li><font color="tomato"><strong>What</strong></font>: when two objects are loosely coupled, they can interact, but have very little knowledge of each other. </li><li><font color="tomato"><strong>Advantage</strong></font>: allow us to build flexible OO systems that can handle change because they minimize the interdependency between objects.</li></ul><img src="taji.png" width="30%" height="30%"><h4 id="4-Example"><a href="#4-Example" class="headerlink" title="4. Example"></a><font color="dodgerblue">4. Example</font></h4><p>In this example, a weather station example will introduced. Through subscribing Weather stations in different states, the local residents can get the latest weather condition. </p><p><font color="deepskyblue"><strong>Step 1: Create interfaces</strong></font></p><ul><li><p><code>WeatherStation</code> : the Subject interface</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WeatherStation</span> <span class="token punctuation">{</span>  String <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  String <span class="token function">removeObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>Observer</code>: the Observer interface</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temp<span class="token punctuation">,</span> <span class="token keyword">float</span> humi<span class="token punctuation">,</span> <span class="token keyword">float</span> pres<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>Display</code> : used to show the weather data</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Display</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">displayWeatherData</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p><font color="deepskyblue"><strong>Step 2: Concrete Subject</strong></font></p><ul><li><code>DemaciaWeatherStation</code> : the weather station in Demacia, reports data includes temperature, humidity, pressure.</li></ul><details>    <summary>CODE</summary><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemaciaWeatherStation</span> <span class="token keyword">implements</span> <span class="token class-name">WeatherStation</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// some states reflecting the weather in demacia</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// observers</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Observer<span class="token operator">></span> observers<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    * constructor    * */</span>    <span class="token keyword">public</span> <span class="token function">DemaciaWeatherStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    * set weather data    * */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWeatherData</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">measurementsChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">measurementsChanged</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">registerObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>observer <span class="token keyword">instanceof</span> <span class="token class-name">DemaciaObserver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"This observer has already been registered."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"Success!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"You have registered a wrong channel."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">removeObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>observer <span class="token keyword">instanceof</span> <span class="token class-name">DemaciaObserver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"This observer does not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"Success!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Unexpected observer type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Observer observer<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            DemaciaObserver demaciaObserver <span class="token operator">=</span> <span class="token punctuation">(</span>DemaciaObserver<span class="token punctuation">)</span> observer<span class="token punctuation">;</span>            demaciaObserver<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>temperature<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>humidity<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></details><p><font color="deepskyblue"><strong>Step 3: Concrete Observer</strong></font></p><ul><li><code>DemaciaObserver</code> : the observer in Demacia.</li></ul><details>    <summary>CODE</summary><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemaciaObserver</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">,</span> Display <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> WeatherStation weatherStation<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DemaciaObserver</span><span class="token punctuation">(</span>WeatherStation weatherStation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weatherStation <span class="token operator">=</span> weatherStation<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weatherStation<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temp<span class="token punctuation">,</span> <span class="token keyword">float</span> humi<span class="token punctuation">,</span> <span class="token keyword">float</span> pres<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humi<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pres<span class="token punctuation">;</span>        <span class="token function">displayWeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">displayWeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current weather in Demacia is:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Temperature: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">+</span> <span class="token string">" ; "</span>             <span class="token operator">+</span> <span class="token string">"Humidity: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">+</span> <span class="token string">" ; "</span>             <span class="token operator">+</span> <span class="token string">"Pressure: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></details><p><font color="deepskyblue"><strong>Final Setp: Let’s test it!</strong></font></p><details>    <summary>CODE</summary><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestObserver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        WeatherStation dWeatherStation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemaciaWeatherStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DemaciaObserver Garen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemaciaObserver</span><span class="token punctuation">(</span>dWeatherStation<span class="token punctuation">)</span><span class="token punctuation">;</span>        DemaciaObserver Lux <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemaciaObserver</span><span class="token punctuation">(</span>dWeatherStation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>DemaciaWeatherStation<span class="token punctuation">)</span> dWeatherStation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setWeatherData</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>DemaciaWeatherStation<span class="token punctuation">)</span> dWeatherStation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setWeatherData</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></details><p>The output is<br><img src="observer_result.png" width="30%" height="30%"></p><p>From the above result we can see if the local subscribed the weather station, after the weather station notified them, then they could get the latest information.</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-What-Observer-Pattern-defined&quot;&gt;&lt;a href=&quot;#1-What-Observer-Pattern-defined&quot; class=&quot;headerlink&quot; title=&quot;1. What Observer Pattern defined&quot;&gt;&lt;/a&gt;&lt;font color=&quot;dodgerblue&quot;&gt;1. What Observer Pattern defined&lt;/font&gt;&lt;/h4&gt;&lt;div style=&quot;background-color: LAVENDERBLUSH; padding: 10px&quot;&gt;The &lt;b&gt;Observer Pattern&lt;/b&gt; defines a &lt;b&gt;&lt;i&gt;one-to-many&lt;/i&gt;&lt;/b&gt; &lt;b&gt;dependency&lt;/b&gt; between objects so that when one object changes state, all of its dependents are &lt;b&gt;notified and updated automatically&lt;/b&gt;.&lt;/div&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yoursite.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Builder Design Pattern</title>
    <link href="http://yoursite.com/2019/09/24/builder-design-pattern/"/>
    <id>http://yoursite.com/2019/09/24/builder-design-pattern/</id>
    <published>2019-09-24T17:46:26.000Z</published>
    <updated>2019-10-22T15:27:19.081Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-Definition"><a href="#1-Definition" class="headerlink" title="1. Definition"></a><font color="dodgerblue">1. Definition</font></h4><p>The following is the definition of Builder Patter from <a href="https://en.wikipedia.org/wiki/Builder_pattern#Java" target="_blank" rel="noopener">wikipedia</a>.</p><p><font color="mediumslateblue">The <strong>Builder</strong> is a design pattern designed to provide a flexible solution to various object creation problems in <strong>OOP</strong>. The intent of it is to <strong>separate</strong> the construction of a complex object from its representation.</font></p><a id="more"></a><h4 id="2-What-problem-the-Builder-sloves"><a href="#2-What-problem-the-Builder-sloves" class="headerlink" title="2. What problem the Builder sloves ?"></a><font color="dodgerblue">2. What problem the Builder sloves ?</font></h4><p>The <strong>Builder</strong> design pattern describes how to solve such problem.</p><ul><li><strong>Encapsulate</strong> creating and assembling the parts of a complex object in a seperate <strong>Builder</strong> object.</li><li>A class delegates object creation to a <strong>Builder</strong> object instead of creating objects directly.<br>A class can delegate to different <strong>Builder</strong> objects to create different representations of a complex object.</li></ul><h4 id="3-Advantages"><a href="#3-Advantages" class="headerlink" title="3. Advantages"></a><font color="dodgerblue">3. Advantages</font></h4><ul><li>Provide very readable, betterthan infinite number of constructors with boolean or numeric arguments, or setters.</li><li>Eliminates ‘telescoping’ constructors without sacrificing immutability.</li><li>Allows you to vary a product’s internal representation.</li><li>Encapsulates code for construction and representation.</li><li>Provides control over steps of construction process.</li></ul><h4 id="4-Example"><a href="#4-Example" class="headerlink" title="4. Example"></a><font color="dodgerblue">4. Example</font></h4><details>    <summary>Example</summary><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankAccount</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// account id</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> accountNumber<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// owner name</span>    <span class="token keyword">private</span> String owner<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// balance amount</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// branch name</span>    <span class="token keyword">private</span> String branch<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// interest rate</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> interestRate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// getters and setters</span>    <span class="token comment" spellcheck="true">/*    * private constructor    * so users cannot instantiate a new account by calling the constructor directly    *    * */</span>    <span class="token keyword">private</span> <span class="token function">BankAccount</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountNumber <span class="token operator">=</span> builder<span class="token punctuation">.</span>accountNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> builder<span class="token punctuation">.</span>owner<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> builder<span class="token punctuation">.</span>balance<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>branch <span class="token operator">=</span> builder<span class="token punctuation">.</span>branch<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"BankAccount{"</span> <span class="token operator">+</span>                <span class="token string">"accountNumber="</span> <span class="token operator">+</span> accountNumber <span class="token operator">+</span>                <span class="token string">", owner='"</span> <span class="token operator">+</span> owner <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", balance="</span> <span class="token operator">+</span> balance <span class="token operator">+</span>                <span class="token string">", branch='"</span> <span class="token operator">+</span> branch <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", interestRate="</span> <span class="token operator">+</span> interestRate <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    * The inner static Builder class    *    * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// fields we want to use to create a new bank account</span>        <span class="token comment" spellcheck="true">// account id, required</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> accountNumber<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// owner name</span>        <span class="token keyword">private</span> String owner<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// balance amount</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// branch name</span>        <span class="token keyword">private</span> String branch<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        * constructor        * construct the Builder with account id        *        * */</span>        <span class="token keyword">public</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token keyword">long</span> accountNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>accountNumber <span class="token operator">=</span> accountNumber<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">withOwner</span><span class="token punctuation">(</span>String owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">openingBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">atBranch</span><span class="token punctuation">(</span>String branch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>branch <span class="token operator">=</span> branch<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> BankAccount <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BankAccount</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></details><p>Note that in the inner class <code>Builder</code>, <code>this</code> refers to the inner class object and <code>build()</code> methods returns a bankAccount instance.</p><p>By using the <strong>Builder</strong> pattern, new we can create a bank account like this.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BankAccount bankAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BankAccount<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>10L<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withOwner</span><span class="token punctuation">(</span><span class="token string">"TongTongShi"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">atBranch</span><span class="token punctuation">(</span><span class="token string">"AB, CA"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">openingBalance</span><span class="token punctuation">(</span><span class="token number">123.456</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-Definition&quot;&gt;&lt;a href=&quot;#1-Definition&quot; class=&quot;headerlink&quot; title=&quot;1. Definition&quot;&gt;&lt;/a&gt;&lt;font color=&quot;dodgerblue&quot;&gt;1. Definition&lt;/font&gt;&lt;/h4&gt;&lt;p&gt;The following is the definition of Builder Patter from &lt;a href=&quot;https://en.wikipedia.org/wiki/Builder_pattern#Java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;mediumslateblue&quot;&gt;The &lt;strong&gt;Builder&lt;/strong&gt; is a design pattern designed to provide a flexible solution to various object creation problems in &lt;strong&gt;OOP&lt;/strong&gt;. The intent of it is to &lt;strong&gt;separate&lt;/strong&gt; the construction of a complex object from its representation.&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yoursite.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>PHP Study Notes - Ajax</title>
    <link href="http://yoursite.com/2019/09/11/php-ajax/"/>
    <id>http://yoursite.com/2019/09/11/php-ajax/</id>
    <published>2019-09-11T16:53:21.000Z</published>
    <updated>2019-09-11T17:07:48.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ajax-and-PHP"><a href="#Ajax-and-PHP" class="headerlink" title="Ajax and PHP"></a>Ajax and PHP</h3><h4 id="1-What-is-an-Ajax-request"><a href="#1-What-is-an-Ajax-request" class="headerlink" title="1. What is an Ajax request ?"></a><font color="dodgerblue">1. What is an Ajax request ?</font></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ajax-and-PHP&quot;&gt;&lt;a href=&quot;#Ajax-and-PHP&quot; class=&quot;headerlink&quot; title=&quot;Ajax and PHP&quot;&gt;&lt;/a&gt;Ajax and PHP&lt;/h3&gt;&lt;h4 id=&quot;1-What-is-an-Ajax-request
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="JQuery" scheme="http://yoursite.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>PHP Study Notes - Session</title>
    <link href="http://yoursite.com/2019/09/10/php-session/"/>
    <id>http://yoursite.com/2019/09/10/php-session/</id>
    <published>2019-09-10T21:37:08.000Z</published>
    <updated>2019-09-11T16:56:01.241Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Session-in-PHP"><a href="#Session-in-PHP" class="headerlink" title="Session in PHP"></a>Session in PHP</h3><a href="https://www.php.net/manual/en/intro.session.php" target="_blank" rel="noopener">official documentation</a><h4 id="1-Sessions-amp-Cookies"><a href="#1-Sessions-amp-Cookies" class="headerlink" title="1. Sessions &amp; Cookies"></a><font color="dodgerblue">1. Sessions &amp; Cookies</font></h4><ul><li><font color="slateblue"><strong>Session</strong>: a chunk of data maintained at the server that maintains state between HTTP requests. Features: </font><ul><li><font color="DARKTURQUOISE">No storage limit.</font></li><li><font color="DARKTURQUOISE">Not easily accessible.</font> </li><li><font color="DARKTURQUOISE">Type of values can store in a session? <strong>Any type (number, string, array,…)</strong></font> </li></ul></li></ul><a id="more"></a><ul><li><font color="slateblue"><strong>Cookie</strong>: a bit of data stored by the browser and sent to the server with every request. It is often used to facilitate sessions since it tells the server which client handles which session.</font> <ul><li><font color="MEDIUMSEAGREEN">Store limited amount of data.</font></li><li><font color="MEDIUMSEAGREEN">Easily sccessible so less secure.</font> </li><li><font color="MEDIUMSEAGREEN">Type of values can store in a session? <strong>String</strong> </font></li></ul></li></ul><img src="session1.png" width="40%" height="50%">Since HTTP is stateless, session is always used to remember state. <img src="session2.png" width="60%" height="80%">And cookies are used to identify sessions.<img src="session3.png" width="40%" height="50%"><h4 id="2-Sessions-in-PHP"><a href="#2-Sessions-in-PHP" class="headerlink" title="2. Sessions in PHP"></a><font color="dodgerblue">2. Sessions in PHP</font></h4><p>Session support in PHP consists of a way to preserve certain data across subsequent accesses. The session support allows us to store data between requests in the <font color="LIMEGREEN"><strong><code>$_SESSION</code></strong></font> superglobal array. When a visitor access a site, PHP will check automatically or on your request (explicitly through <code>session_start()</code>) whether a specific session id has been sent with the request. If this is the case, the prior saved environment is recreated.</p><p><font color="dodgerblue"><strong>Basic usage:</strong></font></p><p>Sessions can be started manully using the <code>session_start()</code> function. If the <code>session.auto_start</code> directive is set to 1, a sessio will automatically start on request startup.</p><p>Sessions shutdown automatically when PHP is finished executing a script, but can be manully shutdown using the <code>session_write_close()</code> function.</p><p><strong>Example:</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// store a variable count, record the visiting times to a page</span>    <span class="token function">sesseion_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><font color="tomato"><strong>Note:</strong><br>When working with sessions that a record of a session is not created until a variable has been registered using the <code>session_register()</code> function or by adding a new key to the <code>$_SESSION</code> superglobal array. This holds true regardless of if a session has been started using the <code>session_start()</code> function.</font></p><p><font color="dodgerblue"><strong>Passing the Session ID:</strong></font></p><p>There are two ways to propagate a sessio id: Cookies and URL parameter.</p><p><font color="dodgerblue"><strong>Session Functions:</strong></font></p><ul><li><code>session_regenerate_id</code> : replace the current session id with a new one, and keep the current session information.</li><li><code>session_destroy</code> : destroy all of the data associated with the current session. It does <strong>not</strong> unset any of the global variables associated with the session, or <strong>unset</strong> the session cookie. To use the session variables again, session_start() has to be called.</li><li><code>setcookie</code> : define a cookie to be sent along with the rest of the HTTP headers. Once the cookies have been set, they can be accessed on the next page load with the <code>$_COOKIE</code> array. Cookie values may also exist in <code>$_REQUEST</code>. </li><li><code>session_get_cookie_params</code> : get the session cookie parameters.</li></ul><p><font color="dodgerblue"><strong>How to destroy global variables associated with the session?</strong></font></p><ol><li>Unset all the session variables.</li><li>Delete the session cookie.</li><li>Destroy the session.</li></ol><details>    <summary>CODE</summary><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Unset all of the session variables.</span>    <span class="token variable">$_SESSION</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// If it's desired to kill the session, also delete the session cookie.</span>    <span class="token comment" spellcheck="true">// Note: This will destroy the session, and not just the session data!</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">"session.use_cookies"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$params</span> <span class="token operator">=</span> <span class="token function">session_get_cookie_params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token function">session_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">42000</span><span class="token punctuation">,</span>            <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string">"domain"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string">"secure"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string">"httponly"</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Finally, destroy the session.</span>    <span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></details>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Session-in-PHP&quot;&gt;&lt;a href=&quot;#Session-in-PHP&quot; class=&quot;headerlink&quot; title=&quot;Session in PHP&quot;&gt;&lt;/a&gt;Session in PHP&lt;/h3&gt;&lt;a href=&quot;https://www.php.net/manual/en/intro.session.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;official documentation&lt;/a&gt;

&lt;h4 id=&quot;1-Sessions-amp-Cookies&quot;&gt;&lt;a href=&quot;#1-Sessions-amp-Cookies&quot; class=&quot;headerlink&quot; title=&quot;1. Sessions &amp;amp; Cookies&quot;&gt;&lt;/a&gt;&lt;font color=&quot;dodgerblue&quot;&gt;1. Sessions &amp;amp; Cookies&lt;/font&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;font color=&quot;slateblue&quot;&gt;&lt;strong&gt;Session&lt;/strong&gt;: a chunk of data maintained at the server that maintains state between HTTP requests. Features: &lt;/font&gt;&lt;ul&gt;
&lt;li&gt;&lt;font color=&quot;DARKTURQUOISE&quot;&gt;No storage limit.&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;DARKTURQUOISE&quot;&gt;Not easily accessible.&lt;/font&gt; &lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;DARKTURQUOISE&quot;&gt;Type of values can store in a session? &lt;strong&gt;Any type (number, string, array,…)&lt;/strong&gt;&lt;/font&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP Study Notes - PDO</title>
    <link href="http://yoursite.com/2019/09/10/php-pdo/"/>
    <id>http://yoursite.com/2019/09/10/php-pdo/</id>
    <published>2019-09-10T15:12:44.000Z</published>
    <updated>2019-09-10T21:25:39.532Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP-Data-Objects-PDO-Interface"><a href="#PHP-Data-Objects-PDO-Interface" class="headerlink" title="PHP Data Objects (PDO) Interface"></a>PHP Data Objects (PDO) Interface</h3><a href="https://www.php.net/manual/en/book.pdo.php" target="_blank" rel="noopener">official documentation</a><p><font color="slateblue">The <strong>PDO</strong> extension defines a lightweight, consistent interface for accessing databases in PHP. Each database driver that implements the PDO interface can expose database-specific features as regular extension functions. It provides a <em>data-access</em> abstracton layer, regardless of which database you’re using, you use the same functions to issue queries and fetch data.</font></p><a id="more"></a><h4 id="1-Connection-to-database"><a href="#1-Connection-to-database" class="headerlink" title="1. Connection to database"></a><font color="dodgerblue">1. Connection to database</font></h4><p><font color="dodgerblue"><strong>MySql PDO Driver</strong></font><br>Since we cannot perform any database functions using the PDO extention by itself; a <font color="mediumaquamarine"><strong>database-specific PDO driver</strong></font> is required to access a database. In php configuration file <code>php.ini</code>, we can do the following settings to let the driver extension loaded automatically.</p><pre class=" language-ini"><code class="language-ini"><span class="token constant">extension</span><span class="token attr-value"><span class="token punctuation">=</span>mysqli</span><span class="token constant">extension</span><span class="token attr-value"><span class="token punctuation">=</span>pdo_mysql</span><span class="token constant">extension</span><span class="token attr-value"><span class="token punctuation">=</span>pdo_sqlite</span></code></pre><p><font color="dodgerblue"><strong>Connections</strong></font></p><p>By creating instances of the PDO base class, connections can be established. It doesn’t matter which driver is used; the <strong>PDO class name</strong> is always used. The <strong>constructor</strong> accepts parameters for specifying the <font color="mediumslateblue">database source (DSN), username, password</font>. For example,</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$dsn</span> <span class="token operator">=</span> <span class="token string">'mysql:host='</span> <span class="token punctuation">.</span> <span class="token variable">$db_host</span> <span class="token punctuation">.</span> <span class="token string">';dbname='</span> <span class="token punctuation">.</span> <span class="token variable">$db_name</span> <span class="token punctuation">.</span> <span class="token string">';charset=utf8'</span><span class="token punctuation">;</span><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token variable">$dsn</span><span class="token punctuation">,</span> <span class="token variable">$db_user</span><span class="token punctuation">,</span> <span class="token variable">$db_pass</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>If the connection errors occur, a <font color="tomato"><em>PDOException</em></font> object will be thrown. To handle the error condition, a <em>try-catch</em> block can be used. For example,</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$dsn</span> <span class="token operator">=</span> <span class="token string">'mysql:localhost='</span> <span class="token punctuation">.</span> <span class="token variable">$db_host</span> <span class="token punctuation">.</span> <span class="token string">'; dbname='</span> <span class="token punctuation">.</span> <span class="token variable">$db_name</span> <span class="token punctuation">.</span> <span class="token string">'; charset=utf8'</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token variable">$dsn</span><span class="token punctuation">,</span> <span class="token variable">$db_user</span><span class="token punctuation">,</span> <span class="token variable">$db_pass</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PDOException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-Prepared-statements-and-stored-procedures"><a href="#2-Prepared-statements-and-stored-procedures" class="headerlink" title="2. Prepared statements and stored procedures"></a><font color="dodgerblue">2. Prepared statements and stored procedures</font></h4><p>To avoid <font color="tomato"><em>SQL injection</em></font>occurs, the <strong>prepared statements</strong> need to be used. They can be thought of as kind of complied template for the SQL that an applicaion wants to run, that can be customized using variable parameters. </p><p>The <strong>prepared statements</strong> bring two major benefits:</p><ul><li>The query only needs to be prepared once, but can be executed multiple times with the same or different parameters.</li><li>No SQL injection will occur.</li></ul><p>When using the <strong>prepared statments</strong>, it follows <code>prepare -&gt; bindValue -&gt; execute</code> procedure. For example,</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$sql</span> <span class="token operator">=</span> "<span class="token constant">SELECT</span> <span class="token operator">*</span>         <span class="token constant">FROM</span> user        <span class="token constant">WHERE</span> username <span class="token operator">=</span> <span class="token punctuation">:</span>username"<span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token string">':username'</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><font color="dodgerblue"><strong>Repeated inserts using prepared statements</strong></font><br>The following example shows how to repeat inserts using prepared statements. The <code>?</code> can be used as the placeholder.</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setCategories</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$ids</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"INSERT IGNORE INTO article_category (article_id, category_id VALUES "</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// be attention to the space in the end</span>    <span class="token variable">$values</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$ids</span> <span class="token keyword">as</span> <span class="token variable">$ad</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$values</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"({$this->id}, ?})"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">,</span> <span class="token variable">$values</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// implode - join array elements with a gluestring. Syntax: implode(string $glue, array $pieces): string</span>    <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$ids</span> <span class="token keyword">as</span> <span class="token variable">$i</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="dodgerblue"><strong>Fetch data using prepared statements</strong></font><br>The following example shows how to fetch data using prepared statements. The user input has automatically quoted, so there is no risk of a SQL injection attack.</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM article where id = ?"</span><span class="token punctuation">;</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setFetchMode</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_CLASS</span><span class="token punctuation">,</span> <span class="token string">'Article'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>If we need to get data from user input, we can also add validations like <code>isset($_GET[&#39;id&#39;])</code> and <code>is_numeric($_GET[&#39;id&#39;])</code></p><p><font color="dodgerblue"><strong>Call a stored procedure with an output parameter</strong></font></p><h4 id="3-PDO-class"><a href="#3-PDO-class" class="headerlink" title="3. PDO class"></a><font color="dodgerblue">3. PDO class</font></h4><p>Represents a connection between PHP and a database server.</p><p>Commonly used methods:</p><ul><li><font color="MEDIUMSEAGREEN"><code>PDO::__construct ( string $dsn [, string $username [, string $passwd [, array $options ]]] )</code></font> : Creates a PDO instance to represent a connection to the requested database.</li><li><font color="MEDIUMSEAGREEN"><code>PDO::prepare ( string $statement [, array $driver_options = array() ] ) : PDOStatement</code></font></li><li><font color="MEDIUMSEAGREEN"><code>PDO::query ( string $statement ) : PDOStatement</code></font>. E.g.<pre class=" language-php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> "<span class="token constant">SELECT</span> <span class="token operator">*</span>      <span class="token constant">FROM</span> category      <span class="token constant">ORDER</span> <span class="token constant">BY</span> name"<span class="token punctuation">;</span></code></pre></li></ul><p>$result = $conn-&gt;query($sql);</p><p>return $result-&gt;fetchAll(PDO::FETCH_ASSOC);</p><pre><code>- &lt;font color=&quot;MEDIUMSEAGREEN&quot;&gt;`PDO::query ( string $statement , int $fetch_style = PDO::FETCH_COLUMN , int $colno ) : PDOStatement`&lt;/font&gt;. E.g.``` phpreturn $conn-&gt;query(&quot;SELECT COUNT(*) FROM article&quot;)-&gt;fetchColumn();</code></pre><ul><li><font color="MEDIUMSEAGREEN"><code>PDO::lastInsertId ([ string $name = NULL ] ) : string</code></font> : returns the ID of the last inserted row or sequence value.<ul><li>If a sequence name was not specified for the name parameter, <code>PDO::lastInsertId()</code> returns a string representing the <em>row ID of the last row that was inserted into the database</em>.</li><li>If a sequence name was specified for the name parameter, <code>PDO::lastInsertId()</code> returns a string representing the <em>last value retrieved from the specified sequence object</em>. E.g.<details><summary>EXAMPLE</summary></details></li></ul></li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> "<span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token function">article</span> <span class="token punctuation">(</span>title<span class="token punctuation">,</span> content<span class="token punctuation">,</span> published_at<span class="token punctuation">)</span>                <span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token punctuation">:</span>title<span class="token punctuation">,</span> <span class="token punctuation">:</span>content<span class="token punctuation">,</span> <span class="token punctuation">:</span>published_at<span class="token punctuation">)</span>"<span class="token punctuation">;</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token string">':title'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">title</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token string">':content'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">published_at</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token string">':published_at'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token string">':published_at'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">published_at</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">lastInsertId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-PDOStatement"><a href="#4-PDOStatement" class="headerlink" title="4. PDOStatement"></a><font color="dodgerblue">4. PDOStatement</font></h4><p>Represents a prepared statement and, after the statement is executed, an associated result set.</p><p>Commonly used methods:</p><ul><li><font color="MEDIUMSEAGREEN"><code>PDOStatement::bindColumn ( mixed $column , mixed &amp;$param [, int $type [, int $maxlen [, mixed $driverdata ]]] ) : bool</code></font> : bind a column to a PHP available. E.g.</li></ul><details>    <summary>EXAMPLE</summary><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?</span> php<span class="token keyword">function</span> <span class="token function">readData</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">'SELECT name, colour, calories FROM fruit'</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Bind by column number */</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Bind by column name */</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token string">'calories'</span><span class="token punctuation">,</span> <span class="token variable">$cals</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_BOUND</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$name</span> <span class="token punctuation">.</span> <span class="token string">" "</span> <span class="token punctuation">.</span> <span class="token variable">$color</span> <span class="token punctuation">.</span> <span class="token string">" "</span> <span class="token punctuation">.</span> <span class="token variable">$cals</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PDOException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></details><ul><li><font color="MEDIUMSEAGREEN"><code>PDOStatement::bindParam ( mixed $parameter , mixed &amp;$variable [, int $data_type = PDO::PARAM_STR [, int $length [, mixed $driver_options ]]] ) : bool</code></font> : bind a parameter to the specified variable name. E.g.<pre class=" language-php"><code class="language-php"><span class="token variable">$calories</span> <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span><span class="token variable">$colour</span> <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span></code></pre></li></ul><p>/<em> Execute a prepared statement with named placeholder </em>/</p><p>$sql = ‘SELECT name, colour, calories<br>        FROM fruit<br>        WHERE calories &lt; :calories AND colour = :colour’;<br>$stmt = $conn-&gt;prepare($sql);<br>$stmt-&gt;bindParam(‘:calories’, $calories, PDO::PARAM_INT);<br>$stmt-&gt;bindParam(‘:colour’, $colour, PDO::PARAM_STR, 12);<br>$stmt-&gt;execute();</p><p>/<em> Execute a prepared statement with question mark placeholders </em>/<br>$stmt = $dbh-&gt;prepare(‘SELECT name, colour, calories<br>    FROM fruit<br>    WHERE calories &lt; ? AND colour = ?’);<br>$stmt-&gt;bindParam(1, $calories, PDO::PARAM_INT);<br>$stmt-&gt;bindParam(2, $colour, PDO::PARAM_STR, 12);<br>$stmt-&gt;execute();</p><pre><code>- &lt;font color=&quot;MEDIUMSEAGREEN&quot;&gt;`PDOStatement::bindValue ( mixed $parameter , mixed $value [, int $data_type = PDO::PARAM_STR ] ) : bool`&lt;/font&gt; : bind a value to a parameter&lt;font color=&quot;tomato&quot;&gt;**Difference between `bindParam` and `bindValue`**&lt;/font&gt;1. &lt;font color=&quot;tomato&quot;&gt;`bindParam`: only *variables* can be passed in; `bindValue`: both *variables* and *values* can be passed in.&lt;/font&gt; 2. &lt;font color=&quot;tomato&quot;&gt;`bindParam`: the variable is bound as a reference and will only be evaluated at the time that `PDOStatement:: execute()` is called.&lt;/font&gt;``` php$value = &#39;foo&#39;;$stmt = $conn-&gt;prepare(&#39;SELECT name FROM bar WHERE baz = :baz&#39;);$stmt-&gt;bindParam(&#39;:baz&#39;, $value); // use bindParam to bind the variable$value = &#39;foobarbaz&#39;;$s-&gt;execute(); // executed with WHERE baz = &#39;foobarbaz&#39;$value = &#39;foo&#39;;$stmt = $conn-&gt;prepare(&#39;SELECT name FROM bar WHERE baz = :baz&#39;);$stmt-&gt;bindValue(&#39;:baz&#39;, $value); // use bindValue to bind the variable&#39;s value$value = &#39;foobarbaz&#39;;$s-&gt;execute(); // executed with WHERE baz = &#39;foo&#39;</code></pre><ul><li><font color="MEDIUMSEAGREEN"><code>PDOStatement::fetch ([ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0 ]]] ) : mixed</code></font> : fetch the next row from a result set. <code>fetch_style</code> includes:<ul><li><code>PDO::FETCH_ASSOC</code>: returns an array indexed by column name as returned in result set. </li><li><code>PDO::FETCH_BOUND</code>: returns <strong>TRUE</strong> and assigns the values of the columns in result set to the PHP variables to which they were bound with the <code>PDOStatement::bindColumn()</code> method.</li><li><code>PDO::FETCH_CLASS</code>: returns a new instance of the requested class, mapping the columns of the result set to named properties in the class, and calling the constructor afterwards. <pre class=" language-php"><code class="language-php"><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setFetchMode</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_CLASS</span><span class="token punctuation">,</span> <span class="token string">'Article'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><details><summary>Examples</summary></details></li></ul></li></ul><pre class=" language-php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT name, color FROM fruit"</span><span class="token punctuation">;</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 1. PDO::FETCH_ASSOC */</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Array(    [name] => apple    [color] => red)*/</span><span class="token comment" spellcheck="true">/* 2. PDO::FETCH_BOTH */</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_BOTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Array(    [name] => banana    [0] => banana    [color] => yellow    [1] => yellow)*/</span></code></pre><ul><li><font color="MEDIUMSEAGREEN"><code>PDOStatement::fetchAll ([ int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array() ]]] ) : array</code></font> : return an array containing all of the result set rows.<details>  <summary>Examples</summary></details></li></ul><pre class=" language-php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT name, color FROM fruit"</span><span class="token punctuation">;</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 1. Fetch all remaining rows in a result set*/</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* $result: Array(    [0] => Array         (            [name] => apple            [0] => apple            [color] => red            [1] => red        )    [1] => ....)*/</span><span class="token comment" spellcheck="true">/* 2. Fetch all values of a single column from a result set*/</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_COLUMN</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* $result: Array(3)(    [0] => string(5) => apple    [1] => string(4) => pear    [2] => string(5) => grape)*/</span><span class="token comment" spellcheck="true">/* 3. Group all values by a single column */</span><span class="token variable">$insert</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO fruit(name, colour) VALUES (?, ?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$insert</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$insert</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"SELECT name, colour FROM fruit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Group values by the first column */</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_COLUMN</span><span class="token operator">|</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_GROUP</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* $result:array(3) {  ["apple"]=>  array(2) {    [0] => string(5) "green"    [1] => string(3) "red"  }  ["pear"]=>  array(2) {    [0] => string(5) "green"    [1] => string(6) "yellow"  }  ["watermelon"]=>  array(1) {    [0] => string(5) "pink"  }}*/</span><span class="token comment" spellcheck="true">/* 4. Instantiating a class for each result */</span><span class="token keyword">class</span> <span class="token class-name">fruit</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$color</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"SELECT name, color FROM fruit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_CLASS</span><span class="token punctuation">,</span> <span class="token string">"fruit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* $resultarray(3) {  [0]=>  object(fruit)#1 (2) {    ["name"]=>string(5) "apple"    ["colour"]=>string(5) "green"  }  [1]=>  object(fruit)#2 (2) {    ...  }  ...}*/</span></code></pre><ul><li><font color="MEDIUMSEAGREEN"><code>PDOStatement::fetchColumn ([ int $column_number = 0 ] ) : mixed</code></font> : return a single column from the next row of a result set or <font color="red"><strong>FALSE</strong></font> if there are no more rows. <font color="red"><strong>Note:</strong></font><br><code>PDOStatement::fetchColumn()</code> should not be used to retrieve <strong>boolean columns</strong>, as it is impossible to distinguish a value of FALSE from there being no more rows to retrieve. Use <code>PDOStatement::fetch()</code> instead.</li></ul><details>    <summary>Examples</summary><pre><code>$sql = &quot;SELECT name, color FROM fruit&quot;;$stmt = $conn-&gt;prepare($sql);$stmt-&gt;execute();$result = $stmt-&gt;fetchColumn(); &#x2F;* first col of first row : name = lemon * &#x2F;$result = $stmt-&gt;fetchColumn(1); &#x2F;\* second col of second row : color = red \*&#x2F;</code></pre></details><ul><li><code>PDOStatement::setFetchMode ( int $mode ) : bool</code> : set the default fetch mode for this statement.</li><li><code>PDOStatement::rowCount ( void ) : int</code> : return the number of rows affected by the last SQL statement.</li></ul><details>    <summary>Examples</summary><pre><code>$del = $dbh-&gt;prepare(&#39;DELETE FROM fruit&#39;);$del-&gt;execute();&#x2F;* Return number of rows that were deleted \*&#x2F;$count = $del-&gt;rowCount(); &#x2F;\* 9 \*&#x2F;</code></pre></details>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PHP-Data-Objects-PDO-Interface&quot;&gt;&lt;a href=&quot;#PHP-Data-Objects-PDO-Interface&quot; class=&quot;headerlink&quot; title=&quot;PHP Data Objects (PDO) Interface&quot;&gt;&lt;/a&gt;PHP Data Objects (PDO) Interface&lt;/h3&gt;&lt;a href=&quot;https://www.php.net/manual/en/book.pdo.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;official documentation&lt;/a&gt;

&lt;p&gt;&lt;font color=&quot;slateblue&quot;&gt;The &lt;strong&gt;PDO&lt;/strong&gt; extension defines a lightweight, consistent interface for accessing databases in PHP. Each database driver that implements the PDO interface can expose database-specific features as regular extension functions. It provides a &lt;em&gt;data-access&lt;/em&gt; abstracton layer, regardless of which database you’re using, you use the same functions to issue queries and fetch data.&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>PHP Study Notes - Overview</title>
    <link href="http://yoursite.com/2019/09/10/php-study-notes/"/>
    <id>http://yoursite.com/2019/09/10/php-study-notes/</id>
    <published>2019-09-10T15:11:06.000Z</published>
    <updated>2019-09-11T16:55:39.197Z</updated>
    
    <content type="html"><![CDATA[<p>In this series of PHP study notes, the following contents will be covered:</p><ol><li></li><li></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this series of PHP study notes, the following contents will be covered:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Flip Columns For Maximum Number of Equal Rows</title>
    <link href="http://yoursite.com/2019/08/15/leetcodeQ1072/"/>
    <id>http://yoursite.com/2019/08/15/leetcodeQ1072/</id>
    <published>2019-08-15T16:14:10.000Z</published>
    <updated>2019-08-15T16:45:27.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-1072-Flip-Columns-For-Maximum-Number-of-Equal-Rows"><a href="#LeetCode-Q-1072-Flip-Columns-For-Maximum-Number-of-Equal-Rows" class="headerlink" title="LeetCode Q 1072 - Flip Columns For Maximum Number of Equal Rows"></a>LeetCode Q 1072 - Flip Columns For Maximum Number of Equal Rows</h1><p>Given a matrix consisting of <code>0s</code> and <code>1s</code>, we may choose any number of columns in the matrix and flip every cell in that column.  Flipping a cell changes the value of that cell from <code>0</code> to <code>1</code> or from <code>1</code> to <code>0</code>.<br>Return the maximum number of rows that have all values equal after some number of flips.</p><p><strong>Example 1:</strong> <code>Input: [[0,1],[1,1]] ; Output: 1</code><br>Explanation: After flipping no values, 1 row has all values equal.<br><strong>Example 2:</strong> <code>Input: [[0,1],[1,0]] ; Output: 2</code><br>Explanation: After flipping values in the first column, both rows have equal values.<br><strong>Example 3:</strong> <code>Input: [[0,0,0],[0,0,1],[1,1,0]] ; Output: 2</code><br>Explanation: After flipping values in the first two columns, the last two rows have equal values.</p><p><strong>Note:</strong></p><ul><li><code>1 &lt;= matrix.length &lt;= 300</code></li><li><code>1 &lt;= matrix[i].length &lt;= 300</code></li><li>All <code>matrix[i]</code>.length’s are equal</li><li><code>matrix[i][j]</code> is <code>0</code> or <code>1</code><a id="more"></a></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>This problem is essentially wanting us to find rows with <strong><em>same</em></strong> or <strong><em>contrary</em></strong> patterns. For example,<br><img src="explanation.png" width="80%" height="80%"></p><p><strong>Code:</strong></p><pre><code>public int maxEqualRowsAfterFlips(int[][] matrix) {  &#x2F;&#x2F; key: pattern; value: number of rows have that pattern  Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();  for (int[] row: matrix) {    StringBuilder sb1 = new StringBuilder();    StringBuilder sb2 = new StringBuilder();    for (int n: row) {      sb1.append(n);      sb2.append(1 - n);    }    String s1 = sb1.toString();    String s2 = sb2.toString();    map.put(s1, map.getOrDefault(s1, 0) + 1);    map.put(s2, map.getOrDefault(s2, 0) + 1);  }  int res = 0;  for (int v: map.values()) res = Math.max(res, v);  return res;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-1072-Flip-Columns-For-Maximum-Number-of-Equal-Rows&quot;&gt;&lt;a href=&quot;#LeetCode-Q-1072-Flip-Columns-For-Maximum-Number-of-Equal-Rows&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 1072 - Flip Columns For Maximum Number of Equal Rows&quot;&gt;&lt;/a&gt;LeetCode Q 1072 - Flip Columns For Maximum Number of Equal Rows&lt;/h1&gt;&lt;p&gt;Given a matrix consisting of &lt;code&gt;0s&lt;/code&gt; and &lt;code&gt;1s&lt;/code&gt;, we may choose any number of columns in the matrix and flip every cell in that column.  Flipping a cell changes the value of that cell from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; or from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.&lt;br&gt;Return the maximum number of rows that have all values equal after some number of flips.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: [[0,1],[1,1]] ; Output: 1&lt;/code&gt;&lt;br&gt;Explanation: After flipping no values, 1 row has all values equal.&lt;br&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: [[0,1],[1,0]] ; Output: 2&lt;/code&gt;&lt;br&gt;Explanation: After flipping values in the first column, both rows have equal values.&lt;br&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: [[0,0,0],[0,0,1],[1,1,0]] ; Output: 2&lt;/code&gt;&lt;br&gt;Explanation: After flipping values in the first two columns, the last two rows have equal values.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= matrix.length &amp;lt;= 300&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= matrix[i].length &amp;lt;= 300&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All &lt;code&gt;matrix[i]&lt;/code&gt;.length’s are equal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matrix[i][j]&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Insufficient Nodes in Root to Leaf Paths</title>
    <link href="http://yoursite.com/2019/08/15/leetcodeQ1080/"/>
    <id>http://yoursite.com/2019/08/15/leetcodeQ1080/</id>
    <published>2019-08-15T15:54:13.000Z</published>
    <updated>2019-08-15T16:06:42.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-1080-Insufficient-Nodes-in-Root-to-Leaf-Paths"><a href="#LeetCode-Q-1080-Insufficient-Nodes-in-Root-to-Leaf-Paths" class="headerlink" title="LeetCode Q 1080 - Insufficient Nodes in Root to Leaf Paths"></a>LeetCode Q 1080 - Insufficient Nodes in Root to Leaf Paths</h1><p>Given the root of a binary tree, consider all root to leaf paths: paths from the root to any leaf.  (A leaf is a node with no children.)<br>A node is <strong>insufficient</strong> if every such root to leaf path intersecting this node has sum strictly less than limit.<br>Delete all insufficient nodes simultaneously, and return the root of the resulting binary tree.</p><p><strong>Example 1:</strong><br>Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1<br>Output: [1,2,3,4,null,null,7,8,9,null,14]<br><strong>Example 2:</strong><br>Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22<br>Output: [5,4,8,11,null,17,4,7,null,null,null,5]<br><strong>Example 3:</strong><br>Input: root = [1,2,-3,-5,null,4,null], limit = -1<br>Output: [1,null,-3,4]</p><p><strong>Note:</strong></p><ul><li>The given tree will have between 1 and 5000 nodes.</li><li><code>-10^5 &lt;= node.val &lt;= 10^5</code></li><li><code>-10^9 &lt;= limit &lt;= 10^9</code></li></ul><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code:</strong></p><pre><code>public TreeNode sufficientSubset(TreeNode root, int limit) {  return dfs(root, limit, 0);}&#x2F;&#x2F; bottom-up dfsprivate TreeNode dfs(TreeNode root, int limit, int sum) {  &#x2F;&#x2F; boundary case  if (root == null) return null;  &#x2F;&#x2F; encounter a leaf  if (root.left == null &amp;&amp; root.right == null) {    return root.val + sum &lt; limit ? null : root;  }  root.left = dfs(root.left, limit, sum + root.val);  root.right = dfs(root.right, limit, sum + root.val);  if (root.left == null &amp;&amp; root.right == null)     return null;  return root; }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-1080-Insufficient-Nodes-in-Root-to-Leaf-Paths&quot;&gt;&lt;a href=&quot;#LeetCode-Q-1080-Insufficient-Nodes-in-Root-to-Leaf-Paths&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 1080 - Insufficient Nodes in Root to Leaf Paths&quot;&gt;&lt;/a&gt;LeetCode Q 1080 - Insufficient Nodes in Root to Leaf Paths&lt;/h1&gt;&lt;p&gt;Given the root of a binary tree, consider all root to leaf paths: paths from the root to any leaf.  (A leaf is a node with no children.)&lt;br&gt;A node is &lt;strong&gt;insufficient&lt;/strong&gt; if every such root to leaf path intersecting this node has sum strictly less than limit.&lt;br&gt;Delete all insufficient nodes simultaneously, and return the root of the resulting binary tree.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1&lt;br&gt;Output: [1,2,3,4,null,null,7,8,9,null,14]&lt;br&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22&lt;br&gt;Output: [5,4,8,11,null,17,4,7,null,null,null,5]&lt;br&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;br&gt;Input: root = [1,2,-3,-5,null,4,null], limit = -1&lt;br&gt;Output: [1,null,-3,4]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The given tree will have between 1 and 5000 nodes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^5 &amp;lt;= node.val &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^9 &amp;lt;= limit &amp;lt;= 10^9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lexicographical Numbers</title>
    <link href="http://yoursite.com/2019/08/15/leetcodeQ386/"/>
    <id>http://yoursite.com/2019/08/15/leetcodeQ386/</id>
    <published>2019-08-15T15:42:16.000Z</published>
    <updated>2019-08-15T15:54:23.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-386-Lexicographical-Numbers"><a href="#LeetCode-Q-386-Lexicographical-Numbers" class="headerlink" title="LeetCode Q 386 - Lexicographical Numbers"></a>LeetCode Q 386 - Lexicographical Numbers</h1><p>Given an integer <code>n</code>, return <code>1 - n</code> in lexicographical order.<br>For example, given <code>13</code>, return: <code>[1,10,11,12,13,2,3,4,5,6,7,8,9]</code>.<br>Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1-Sort-O-nlogn"><a href="#Solution-1-Sort-O-nlogn" class="headerlink" title="Solution 1: Sort O(nlogn)"></a>Solution 1: Sort O(nlogn)</h3><p><strong>Code:</strong></p><pre><code>public List&lt;Integer&gt; lexicalOrder(int n) {  List&lt;Integer&gt; list = new ArrayList&lt;&gt;();    for (int i = 1; i &lt;= n; i++) list.add(i);  Collections.sort(list, (a, b) -&gt; {    return String.valueOf(a).compareTo(String.valueOf(b));  });  return list;}</code></pre><h3 id="Solution-2-DFS-O-n"><a href="#Solution-2-DFS-O-n" class="headerlink" title="Solution 2: DFS O(n)"></a>Solution 2: DFS O(n)</h3><p><strong>Code:</strong></p><pre><code>List&lt;Integer&gt; list;public List&lt;Integer&gt; lexicalOrder(int n) {  list = new ArrayList&lt;&gt;();    for (int i = 1; i &lt;= 9; i++) {    if (i &gt; n) break;    dfs(n, i);  }  return res;}private void dfs(int n, int currNum) {  res.add(current);  for (int i = 0; i &lt;= 9; i++) {    if (currNum * 10 + i &gt; n) break;    dfs(n, currNum * 10 + i);  }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-386-Lexicographical-Numbers&quot;&gt;&lt;a href=&quot;#LeetCode-Q-386-Lexicographical-Numbers&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 386 - Lexicographical Numbers&quot;&gt;&lt;/a&gt;LeetCode Q 386 - Lexicographical Numbers&lt;/h1&gt;&lt;p&gt;Given an integer &lt;code&gt;n&lt;/code&gt;, return &lt;code&gt;1 - n&lt;/code&gt; in lexicographical order.&lt;br&gt;For example, given &lt;code&gt;13&lt;/code&gt;, return: &lt;code&gt;[1,10,11,12,13,2,3,4,5,6,7,8,9]&lt;/code&gt;.&lt;br&gt;Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Shifting Letters</title>
    <link href="http://yoursite.com/2019/08/15/leetcodeQ848/"/>
    <id>http://yoursite.com/2019/08/15/leetcodeQ848/</id>
    <published>2019-08-15T15:32:24.000Z</published>
    <updated>2019-08-15T15:40:58.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-848-Shifting-Letters"><a href="#LeetCode-Q-848-Shifting-Letters" class="headerlink" title="LeetCode Q 848 - Shifting Letters"></a>LeetCode Q 848 - Shifting Letters</h1><p>We have a string <code>S</code> of lowercase letters, and an integer array shifts.<br>Call the shift of a letter, the next letter in the alphabet, (wrapping around so that <code>&#39;z&#39;</code> becomes <code>&#39;a&#39;</code>).<br>For example, <code>shift(&#39;a&#39;) = &#39;b&#39;</code>, <code>shift(&#39;t&#39;) = &#39;u&#39;</code>, and <code>shift(&#39;z&#39;) = &#39;a&#39;</code>.<br>Now for each <code>shifts[i] = x</code>, we want to shift the first <em>i+1</em> letters of <code>S</code>, <code>x</code> times.<br>Return the final string after all such shifts to <code>S</code> are applied.</p><p><strong>Example 1:</strong> <code>Input: S = &quot;abc&quot;, shifts = [3,5,9]</code> ; <code>Output: &quot;rpl&quot;</code><br>Explanation:<br>We start with “abc”.<br>After shifting the first 1 letters of S by 3, we have “dbc”.<br>After shifting the first 2 letters of S by 5, we have “igc”.<br>After shifting the first 3 letters of S by 9, we have “rpl”, the answer.</p><p><strong>Note:</strong></p><ul><li><code>1 &lt;= S.length = shifts.length &lt;= 20000</code></li><li><code>0 &lt;= shifts[i] &lt;= 10 ^ 9</code><a id="more"></a></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong><font color="tomato">Key Point:</font></strong><br>When accumulating the shift numbers, to avoid <strong>Integer Overflow</strong>, we store mod value in <code>shifts</code>.</p><p><strong>Code:</strong></p><pre><code>public String shiftingLetters(String S, int[] shifts) {  int len = shifts.length;  for (int i = len - 2; i &gt;= 0; i--) {    shifts[i] += shifts[i + 1];    shifts[i] %= 26;  }        char[] chs = S.toCharArray();  for (int i = 0; i &lt; len; i++) {    chs[i] = (char)((chs[i] - &#39;a&#39; + shifts[i]) % 26 + &#39;a&#39;);  }  return new String(chs);}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-848-Shifting-Letters&quot;&gt;&lt;a href=&quot;#LeetCode-Q-848-Shifting-Letters&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 848 - Shifting Letters&quot;&gt;&lt;/a&gt;LeetCode Q 848 - Shifting Letters&lt;/h1&gt;&lt;p&gt;We have a string &lt;code&gt;S&lt;/code&gt; of lowercase letters, and an integer array shifts.&lt;br&gt;Call the shift of a letter, the next letter in the alphabet, (wrapping around so that &lt;code&gt;&amp;#39;z&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;a&amp;#39;&lt;/code&gt;).&lt;br&gt;For example, &lt;code&gt;shift(&amp;#39;a&amp;#39;) = &amp;#39;b&amp;#39;&lt;/code&gt;, &lt;code&gt;shift(&amp;#39;t&amp;#39;) = &amp;#39;u&amp;#39;&lt;/code&gt;, and &lt;code&gt;shift(&amp;#39;z&amp;#39;) = &amp;#39;a&amp;#39;&lt;/code&gt;.&lt;br&gt;Now for each &lt;code&gt;shifts[i] = x&lt;/code&gt;, we want to shift the first &lt;em&gt;i+1&lt;/em&gt; letters of &lt;code&gt;S&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; times.&lt;br&gt;Return the final string after all such shifts to &lt;code&gt;S&lt;/code&gt; are applied.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: S = &amp;quot;abc&amp;quot;, shifts = [3,5,9]&lt;/code&gt; ; &lt;code&gt;Output: &amp;quot;rpl&amp;quot;&lt;/code&gt;&lt;br&gt;Explanation:&lt;br&gt;We start with “abc”.&lt;br&gt;After shifting the first 1 letters of S by 3, we have “dbc”.&lt;br&gt;After shifting the first 2 letters of S by 5, we have “igc”.&lt;br&gt;After shifting the first 3 letters of S by 9, we have “rpl”, the answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= S.length = shifts.length &amp;lt;= 20000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= shifts[i] &amp;lt;= 10 ^ 9&lt;/code&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Distant Barcodes</title>
    <link href="http://yoursite.com/2019/08/15/leetcodeq1054/"/>
    <id>http://yoursite.com/2019/08/15/leetcodeq1054/</id>
    <published>2019-08-15T14:53:35.000Z</published>
    <updated>2019-08-15T15:32:28.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-1054-Distant-Barcodes"><a href="#LeetCode-Q-1054-Distant-Barcodes" class="headerlink" title="LeetCode Q 1054 - Distant Barcodes"></a>LeetCode Q 1054 - Distant Barcodes</h1><p>In a warehouse, there is a row of barcodes, where the <em>i-th</em> barcode is <code>barcodes[i]</code>.<br>Rearrange the barcodes so that <strong>no two adjacent barcodes are equal</strong>.  You may return any answer, and it is guaranteed an answer exists.</p><p><strong>Example 1:</strong> <code>Input: [1,1,1,2,2,2] ; Output: [2,1,2,1,2,1]</code><br><strong>Example 2:</strong> <code>Input: [1,1,1,1,2,2,3,3] ; Output: [1,3,1,3,2,1,2,1]</code></p><p><strong>Note:</strong></p><ul><li><code>1 &lt;= barcodes.length &lt;= 10000</code></li><li><code>1 &lt;= barcodes[i] &lt;= 10000</code><a id="more"></a></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li>Use a <em>map</em> to count the times of different barcodes appear.</li><li>Use a <em>priority queue</em> which stores pairs of barcode and its appearance times, and the <em>priority queue</em> is sorted according to appearance times in an DESC order.</li><li>While the <em>pq</em> is not empty, do the iteration. Each time we pull two elements from the pq, add these two barcode to the result array, then update their appearance times by minus one. If the appearance time is still bigger than zero, we offer this barcode pair to the <em>pq</em> again.</li></ul><p><strong>Code:</strong></p><pre><code>public int[] rearrangeBarcodes(int[] barcodes) {  Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();    for (int bc: barcodes)     map.put(bc, map.getOrDefault(bc, 0) + 1);  Queue&lt;int[]&gt; pq = new PriorityQueue&lt;&gt;((a, b) -&gt; (b[1] - a[1]));  for (int key: map.keySet())    pq.offer(new int[]{key, map.get(key)});  int[] res = new int[barcodes.length]; int index = 0;  while (!pq.isEmpty()) {        List&lt;Integer&gt; temp = new ArrayList&lt;&gt;();        for (int k = 0; k &lt; 2 &amp;&amp; !pq.isEmpty(); k++) {      int[] curr = pq.poll();      res[index++] = curr[0];      map.put(curr[0], map.get(curr[0]) - 1);      temp.add(curr[0]);    }    for (int n: temp) {      if (map.get(n) &gt; 0)         pq.offer(new int[]{n, map.get(n)});    }    if (pq.isEmpty()) break;  }  return res;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-1054-Distant-Barcodes&quot;&gt;&lt;a href=&quot;#LeetCode-Q-1054-Distant-Barcodes&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 1054 - Distant Barcodes&quot;&gt;&lt;/a&gt;LeetCode Q 1054 - Distant Barcodes&lt;/h1&gt;&lt;p&gt;In a warehouse, there is a row of barcodes, where the &lt;em&gt;i-th&lt;/em&gt; barcode is &lt;code&gt;barcodes[i]&lt;/code&gt;.&lt;br&gt;Rearrange the barcodes so that &lt;strong&gt;no two adjacent barcodes are equal&lt;/strong&gt;.  You may return any answer, and it is guaranteed an answer exists.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: [1,1,1,2,2,2] ; Output: [2,1,2,1,2,1]&lt;/code&gt;&lt;br&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: [1,1,1,1,2,2,3,3] ; Output: [1,3,1,3,2,1,2,1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= barcodes.length &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= barcodes[i] &amp;lt;= 10000&lt;/code&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
