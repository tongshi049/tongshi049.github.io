<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tong Shi&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-24T22:58:09.139Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tong Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcodeQ377</title>
    <link href="http://yoursite.com/2019/04/24/leetcodeQ377/"/>
    <id>http://yoursite.com/2019/04/24/leetcodeQ377/</id>
    <published>2019-04-24T22:58:09.000Z</published>
    <updated>2019-04-24T22:58:09.139Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>leetcodeQ376</title>
    <link href="http://yoursite.com/2019/04/24/leetcodeQ376/"/>
    <id>http://yoursite.com/2019/04/24/leetcodeQ376/</id>
    <published>2019-04-24T22:38:24.000Z</published>
    <updated>2019-04-24T22:59:02.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lintcode-q-376-wiggle-subsequence"><a class="markdownIt-Anchor" href="#lintcode-q-376-wiggle-subsequence"></a> LintCode Q 376 - Wiggle Subsequence</h1><p>A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.<br>For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.<br>Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.</p><p>Example 1:<br><code>Input: [1,7,4,9,2,5] ; Output: 6</code><br>Explanation: The entire sequence is a wiggle sequence.<br>Example 2:<br><code>Input: [1,17,5,10,13,15,10,5,16,8] ; Output: 7</code><br>Explanation: There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].<br>Example 3:<br><code>Input: [1,2,3,4,5,6,7,8,9] ; Output: 2</code></p><p><strong>Follow up:</strong> Can you do it in <strong>O(n)</strong> time?</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution :</h2><h3 id="solution-1-traditional-dp"><a class="markdownIt-Anchor" href="#solution-1-traditional-dp"></a> Solution 1 : traditional DP</h3><p>We use two arrays to store the states.</p><ol><li><code>up[i]</code>: the <em><strong>ith</strong></em> number is the <strong>peak</strong>.</li><li><code>sell[i]</code>: the <em><strong>ith</strong></em> number is the <strong>vally</strong>.</li></ol><p>We update these two arrays depends on the following case:</p><ol><li><code>if (nums[i] &gt; nums[i - 1])</code>, which means the curr number is larger than its left, then we update <code>up[i] = Math.max(up[i - 1], down[i - 1] + 1)</code> and <code>down[i] keeps the same</code> (i.e. <code>down[i] = down[i - 1]</code>);</li><li><code>if (nums[i] &lt; nums[i - 1])</code>, which means the curr number is smaller than its left, then we update <code>down[i] = Math.max(down[i - 1], up[i - 1] + 1)</code> and <code>up[i] keeps the same</code> (i.e. <code>up[i] = up[i - 1]</code>);</li><li><code>if (nums[i] == nums[i - 1])</code>, we will neither update <code>up[i]</code> nor <code>sell[i]</code>, that is <code>up[i] = up[i - 1]</code> and <code>down[i] = down[i - 1]</code>.</li></ol><p><strong>Time Complexity: O(n)</strong><br><strong>Space Complexity: O(n)</strong></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wiggleMaxLength</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (nums.length == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] up = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length]; <span class="keyword">int</span>[] down = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">up[<span class="number">0</span>] = <span class="number">1</span>; down[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">up[i] = Math.max(up[i - <span class="number">1</span>], down[i - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">down[i] = down[i - <span class="number">1</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">down[i] = Math.max(down[i - <span class="number">1</span>], up[i - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">up[i] = up[i - <span class="number">1</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">up[i] = up[i - <span class="number">1</span>];</span><br><span class="line">down[i] = down[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Math.max(up[nums.length - <span class="number">1</span>], down[nums.length - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="solution-2-dp-optimized-space"><a class="markdownIt-Anchor" href="#solution-2-dp-optimized-space"></a> Solution 2 : DP Optimized Space</h3><p>Using <em><strong>up</strong></em> and <em><strong>down</strong></em> instead of <code>up[i]</code> and <code>down[i]</code>, optimizing the <strong>space complecity</strong> to be <strong>O(1)</strong>.</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wiggleMaxLength</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (nums.length == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> up = <span class="number">1</span>, down = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>])</span><br><span class="line">up = Math.max(up, down + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt; nums[i - <span class="number">1</span>])</span><br><span class="line">down = Math.max(down, up + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Math.max(up, down);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lintcode-q-376-wiggle-subsequence&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lintcode-q-376-wiggle-subsequence&quot;&gt;&lt;/a&gt; LintCode Q 376 - Wiggle Subsequence&lt;/h1&gt;
&lt;p&gt;A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.&lt;br&gt;
For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.&lt;br&gt;
Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;
&lt;code&gt;Input: [1,7,4,9,2,5] ; Output: 6&lt;/code&gt;&lt;br&gt;
Explanation: The entire sequence is a wiggle sequence.&lt;br&gt;
Example 2:&lt;br&gt;
&lt;code&gt;Input: [1,17,5,10,13,15,10,5,16,8] ; Output: 7&lt;/code&gt;&lt;br&gt;
Explanation: There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].&lt;br&gt;
Example 3:&lt;br&gt;
&lt;code&gt;Input: [1,2,3,4,5,6,7,8,9] ; Output: 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt; Can you do it in &lt;strong&gt;O(n)&lt;/strong&gt; time?&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Partition Equal Subset Sum</title>
    <link href="http://yoursite.com/2019/04/24/leetcodeQ416/"/>
    <id>http://yoursite.com/2019/04/24/leetcodeQ416/</id>
    <published>2019-04-24T22:19:44.000Z</published>
    <updated>2019-04-24T22:37:53.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lintcode-q-416-partition-equal-subset-sum"><a class="markdownIt-Anchor" href="#lintcode-q-416-partition-equal-subset-sum"></a> LintCode Q 416 - Partition Equal Subset Sum</h1><p>Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.<br><strong>Note:</strong></p><ul><li>Each of the array element will not exceed 100.</li><li>The array size will not exceed 200.</li></ul><p>Example 1:<br><code>Input: [1, 5, 11, 5] ; Output: true</code><br>Explanation: The array can be partitioned as [1, 5, 5] and [11].<br>Example 2:<br><code>Input: [1, 2, 3, 5] ; Output: false</code><br>Explanation: The array cannot be partitioned into equal sum subsets.</p><a id="more"></a><h2 id="solution-dp"><a class="markdownIt-Anchor" href="#solution-dp"></a> Solution : DP</h2><ol><li><p>We calculate the <strong>sum</strong> of the array, if the <strong>sum</strong> cannot divided by two, then directly returning <strong>false</strong>.</p></li><li><p>boolean array <code>dp[]</code> is used to store the sum values of the array. If <code>dp[sum / 2]</code> can be achieved, then we can return <strong>true</strong>.</p></li></ol><p><strong>State Transfer Function</strong><br><code>dp[i] = dp[i] || dp[i - nums[j]];</code> i: sum value;</p><p><strong>Time Complexity: O(kn)</strong><br><strong>Time Complexity: O(kn)</strong></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num: nums) sum += num;</span><br><span class="line"><span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[sum / <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = sum / <span class="number">2</span>; j &gt;= nums[i - <span class="number">1</span>]; j--)</span><br><span class="line">dp[j] = dp[j] || dp[j - nums[i - <span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[sum / <span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="#ff0066">Wrong Code:</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sum / <span class="number">2</span>; i++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num: nums) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= num) dp[i] = dp[i] || dp[i - num];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Since each num can only be used once, this code is <font color="#ff0066">wrong!!!</font></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lintcode-q-416-partition-equal-subset-sum&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lintcode-q-416-partition-equal-subset-sum&quot;&gt;&lt;/a&gt; LintCode Q 416 - Partition Equal Subset Sum&lt;/h1&gt;
&lt;p&gt;Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each of the array element will not exceed 100.&lt;/li&gt;
&lt;li&gt;The array size will not exceed 200.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example 1:&lt;br&gt;
&lt;code&gt;Input: [1, 5, 11, 5] ; Output: true&lt;/code&gt;&lt;br&gt;
Explanation: The array can be partitioned as [1, 5, 5] and [11].&lt;br&gt;
Example 2:&lt;br&gt;
&lt;code&gt;Input: [1, 2, 3, 5] ; Output: false&lt;/code&gt;&lt;br&gt;
Explanation: The array cannot be partitioned into equal sum subsets.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Target Sum</title>
    <link href="http://yoursite.com/2019/04/24/leetcodeQ494/"/>
    <id>http://yoursite.com/2019/04/24/leetcodeQ494/</id>
    <published>2019-04-24T22:03:16.000Z</published>
    <updated>2019-04-24T22:20:37.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lintcode-q-494-target-sum"><a class="markdownIt-Anchor" href="#lintcode-q-494-target-sum"></a> LintCode Q 494 - Target Sum</h1><p>You are given a list of non-negative integers, a1, a2, …, an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.<br>Find out how many ways to assign symbols to make sum of integers equal to target S.</p><p>Example 1:<br><code>Input: nums is [1, 1, 1, 1, 1], S is 3. ; Output: 5</code><br>Explanation:<br><code>-1+1+1+1+1 = 3 +1-1+1+1+1 = 3 +1+1-1+1+1 = 3 +1+1+1-1+1 = 3 +1+1+1+1-1 = 3</code><br>There are 5 ways to assign symbols to make the sum of nums be target 3.<br><strong>Note:</strong></p><ul><li>The length of the given array is positive and will not exceed 20.</li><li>The sum of elements in the given array will not exceed 1000.<br>Your output answer is guaranteed to be fitted in a 32-bit integer.</li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution :</h2><h3 id="solution-1-dfs-backtracking"><a class="markdownIt-Anchor" href="#solution-1-dfs-backtracking"></a> Solution 1 : DFS / backtracking</h3><p><strong>Time Complexity: O(2^n)</strong></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> res;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">backtrack(nums, S, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> S, <span class="keyword">int</span> index, <span class="keyword">int</span> currSum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index == nums.length) &#123;</span><br><span class="line"><span class="keyword">if</span> (currSum == S) res++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//explore</span></span><br><span class="line">backtrack(nums, S, index + <span class="number">1</span>, currSum + nums[index]);</span><br><span class="line">backtrack(nums, S, index + <span class="number">1</span>, currSum - nums[index]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="solution-2-dp"><a class="markdownIt-Anchor" href="#solution-2-dp"></a> Solution 2 : DP</h3><p><code>dp[i][j]</code> refers to the number of assignments which can lead to a sum of j upto the ith index.</p><p><strong>State Transfer Function</strong><br><code>dp[i][sum+nums[i]] = dp[i][sum+nums[i]]+dp[i-1][sum] dp[i][sum-nums[i]] = dp[i][sum-nums[i]]+dp[i-1][sum]</code></p><p><strong>Note:</strong> we add an offset sum to the second index to avoid negative index value.</p><p><strong>Time Complexity: O(kn)</strong><br><strong>Time Complexity: O(kn)</strong></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num: nums) sum += num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length][<span class="number">2</span> * sum + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][sum + nums[i]] = <span class="number">1</span>;</span><br><span class="line">dp[<span class="number">0</span>][sum - nums[i]] += <span class="number">1</span>; <span class="comment">// += not = !</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * sum + <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dp[i - <span class="number">1</span>][j] != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums[i];</span><br><span class="line">dp[i][j + n] += dp[i - <span class="number">1</span>][j];</span><br><span class="line">dp[i][j - n] += dp[i - <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[nums.length - <span class="number">1</span>][sum + S];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lintcode-q-494-target-sum&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lintcode-q-494-target-sum&quot;&gt;&lt;/a&gt; LintCode Q 494 - Target Sum&lt;/h1&gt;
&lt;p&gt;You are given a list of non-negative integers, a1, a2, …, an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.&lt;br&gt;
Find out how many ways to assign symbols to make sum of integers equal to target S.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;
&lt;code&gt;Input: nums is [1, 1, 1, 1, 1], S is 3. ; Output: 5&lt;/code&gt;&lt;br&gt;
Explanation:&lt;br&gt;
&lt;code&gt;-1+1+1+1+1 = 3 +1-1+1+1+1 = 3 +1+1-1+1+1 = 3 +1+1+1-1+1 = 3 +1+1+1+1-1 = 3&lt;/code&gt;&lt;br&gt;
There are 5 ways to assign symbols to make the sum of nums be target 3.&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The length of the given array is positive and will not exceed 20.&lt;/li&gt;
&lt;li&gt;The sum of elements in the given array will not exceed 1000.&lt;br&gt;
Your output answer is guaranteed to be fitted in a 32-bit integer.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="backtracking" scheme="http://yoursite.com/tags/backtracking/"/>
    
  </entry>
  
  <entry>
    <title>Palindromic Substrings</title>
    <link href="http://yoursite.com/2019/04/24/leetcodeQ647/"/>
    <id>http://yoursite.com/2019/04/24/leetcodeQ647/</id>
    <published>2019-04-24T21:54:37.000Z</published>
    <updated>2019-04-24T22:01:47.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lintcode-q-647-palindromic-substrings"><a class="markdownIt-Anchor" href="#lintcode-q-647-palindromic-substrings"></a> LintCode Q 647 - Palindromic Substrings</h1><p>Given a string, your task is to count how many palindromic substrings in this string. The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.</p><p>Example 1:<br><code>Input: &quot;abc&quot; ; Output: 3</code><br>Explanation: Three palindromic strings: “a”, “b”, “c”.<br>Example 2:<br><code>Input: &quot;aaa&quot; ; Output: 6</code><br>Explanation: Six palindromic strings: “a”, “a”, “a”, “aa”, “aa”, “aaa”.</p><p><strong>Note:</strong> The input string length won’t exceed 1000.</p><a id="more"></a><h2 id="solution-expand-around-center"><a class="markdownIt-Anchor" href="#solution-expand-around-center"></a> Solution : Expand Around Center</h2><p>Similar Question: <a href="/2019/04/22/leetcodeQ5/" title="Longest Palindromic Substring">Longest Palindromic Substring</a></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span>&lt; s.length(); i++) &#123;</span><br><span class="line">expandAroundCerter(s, i, i);</span><br><span class="line">expandAroundCerter(s, i, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expandAroundCerter</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (start &gt;= <span class="number">0</span> &amp;&amp; end &lt; s.length() </span><br><span class="line">&amp;&amp; s.charAt(start) == s.charAt(end)) &#123;</span><br><span class="line">  start--; end++; num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lintcode-q-647-palindromic-substrings&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lintcode-q-647-palindromic-substrings&quot;&gt;&lt;/a&gt; LintCode Q 647 - Palindromic Substrings&lt;/h1&gt;
&lt;p&gt;Given a string, your task is to count how many palindromic substrings in this string. The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;
&lt;code&gt;Input: &amp;quot;abc&amp;quot; ; Output: 3&lt;/code&gt;&lt;br&gt;
Explanation: Three palindromic strings: “a”, “b”, “c”.&lt;br&gt;
Example 2:&lt;br&gt;
&lt;code&gt;Input: &amp;quot;aaa&amp;quot; ; Output: 6&lt;/code&gt;&lt;br&gt;
Explanation: Six palindromic strings: “a”, “a”, “a”, “aa”, “aa”, “aaa”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The input string length won’t exceed 1000.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Best Time to Buy and Sell Stock with Transaction Fee</title>
    <link href="http://yoursite.com/2019/04/24/leetcodeQ714/"/>
    <id>http://yoursite.com/2019/04/24/leetcodeQ714/</id>
    <published>2019-04-24T21:15:14.000Z</published>
    <updated>2019-04-24T21:54:03.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lintcode-q-714-best-time-to-buy-and-sell-stock-with-transaction-fee"><a class="markdownIt-Anchor" href="#lintcode-q-714-best-time-to-buy-and-sell-stock-with-transaction-fee"></a> LintCode Q 714 - Best Time to Buy and Sell Stock with Transaction Fee</h1><p>Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.<br>You may complete <strong>as many transactions as you like</strong>, but you need to <strong>pay the transaction fee for each transaction</strong>. You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)<br>Return the <strong>maximum profit</strong> you can make.</p><p>Example 1:<br><code>Input: prices = [1, 3, 2, 8, 4, 9], fee = 2 ; Output: 8</code><br>Explanation: The maximum profit can be achieved by:</p><ul><li>Buying at prices[0] = 1</li><li>Selling at prices[3] = 8</li><li>Buying at prices[4] = 4</li><li>Selling at prices[5] = 9<br>The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.</li></ul><p><strong>Note:</strong></p><ul><li>0 &lt; prices.length &lt;= 50000.</li><li>0 &lt; prices[i] &lt; 50000.</li><li>0 &lt;= fee &lt; 50000.</li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution :</h2><h3 id="solution-traditional-dp"><a class="markdownIt-Anchor" href="#solution-traditional-dp"></a> Solution: traditional DP</h3><p>We use two arrays to store the states.</p><ol><li><code>buy[i]</code>: it represents we end with a <strong>buy</strong> action at day k (k &lt;= i).</li><li><code>sell[i]</code>: it represents we end with a <strong>sell</strong> action at day k (k &lt;= i).</li></ol><p><strong>Time Complexity: O(n)</strong><br><strong>Space Complexity: O(2n) -&gt; O(n)</strong></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] buy = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line"><span class="keyword">int</span>[] sell = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line">buy[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">buy[i] = Math.max(buy[i - <span class="number">1</span>], -prices[i] + sell[i - <span class="number">1</span>]);</span><br><span class="line">sell[i] = Math.max(sell[i - <span class="number">1</span>], prices[i] + buy[i] - fee);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sell[prices.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="solution-dp-optimized-space"><a class="markdownIt-Anchor" href="#solution-dp-optimized-space"></a> Solution: DP Optimized Space</h3><p>Since <code>buy[i]</code> and <code>sell[i]</code> only depends on <code>buy[i - 1]</code> and <code>sell[i - 1]</code> respectively, instead of using arrays we can just use to vars to store the states, which optimizing the <strong>space complecity</strong> to be <strong>O(1)</strong>.</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> buy = -prices[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">buy = Math.max(buy, sell - prices[i]);</span><br><span class="line">sell = Math.max(sell, prices[i] + buy - fee);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lintcode-q-714-best-time-to-buy-and-sell-stock-with-transaction-fee&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lintcode-q-714-best-time-to-buy-and-sell-stock-with-transaction-fee&quot;&gt;&lt;/a&gt; LintCode Q 714 - Best Time to Buy and Sell Stock with Transaction Fee&lt;/h1&gt;
&lt;p&gt;Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.&lt;br&gt;
You may complete &lt;strong&gt;as many transactions as you like&lt;/strong&gt;, but you need to &lt;strong&gt;pay the transaction fee for each transaction&lt;/strong&gt;. You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)&lt;br&gt;
Return the &lt;strong&gt;maximum profit&lt;/strong&gt; you can make.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;
&lt;code&gt;Input: prices = [1, 3, 2, 8, 4, 9], fee = 2 ; Output: 8&lt;/code&gt;&lt;br&gt;
Explanation: The maximum profit can be achieved by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buying at prices[0] = 1&lt;/li&gt;
&lt;li&gt;Selling at prices[3] = 8&lt;/li&gt;
&lt;li&gt;Buying at prices[4] = 4&lt;/li&gt;
&lt;li&gt;Selling at prices[5] = 9&lt;br&gt;
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 &amp;lt; prices.length &amp;lt;= 50000.&lt;/li&gt;
&lt;li&gt;0 &amp;lt; prices[i] &amp;lt; 50000.&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= fee &amp;lt; 50000.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Counting Bits</title>
    <link href="http://yoursite.com/2019/04/24/leetcodeQ338/"/>
    <id>http://yoursite.com/2019/04/24/leetcodeQ338/</id>
    <published>2019-04-24T20:03:00.000Z</published>
    <updated>2019-04-24T21:44:25.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lintcode-q-338-counting-bits"><a class="markdownIt-Anchor" href="#lintcode-q-338-counting-bits"></a> LintCode Q 338 - Counting Bits</h1><p>Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array.</p><p>Example 1: <code>Input: 2 ; Output: [0,1,1]</code><br>Example 2: <code>Input: 5 ; Output: [0,1,1,2,1,2]</code></p><p><strong>Follow up:</strong></p><ul><li>It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in <strong>linear time O(n)</strong> possibly in a single pass?</li><li>Space complexity should be O(n).</li><li>Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.</li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution :</h2><p>First, we try some examples to find the pattern.<br>`</p><table><thead><tr><th></th><th>binary</th><th>dp</th></tr></thead><tbody><tr><td>1</td><td>0001</td><td>1</td></tr><tr><td>2</td><td>0010</td><td>1</td></tr><tr><td>3</td><td>0011</td><td>2</td></tr><tr><td>4</td><td>0100</td><td>1</td></tr><tr><td>5</td><td>0101</td><td>2</td></tr><tr><td>6</td><td>0110</td><td>2</td></tr><tr><td>7</td><td>0111</td><td>3</td></tr><tr><td>8</td><td>1000</td><td>1</td></tr><tr><td>9</td><td>1001</td><td>2</td></tr><tr><td>10</td><td>1010</td><td>2</td></tr><tr><td>11</td><td>1011</td><td>3</td></tr><tr><td>12</td><td>1100</td><td>2</td></tr></tbody></table><p>We can find</p><ol><li>When the number is power of 2, i.e. (1, 2, 4, 8,…) then there is only <strong>one</strong> <em><strong>1</strong></em> in its binary representation.</li><li>A target can be divided into two numbers. One is <strong>the largeset number</strong> which is the power of <em><strong>2</strong></em> and at the same time <strong>less than target</strong>.<br>For example, 3 = 2 + 1; 10 = 8 + 2; 11 = 8 + 3.<br>The number of <em><strong>1s</strong></em> in this target is the <strong>sum</strong> of the number of <em><strong>1s</strong></em> in these two <strong>sub-numbers</strong>. Since one <strong>sum-number</strong> is power of <em><strong>2</strong></em>, the number of <em><strong>1s</strong></em> in it is <em><strong>1</strong></em>. Then, we can get the <strong>state transfer function as follows</strong><br><code>dp[i] = dp[i - num] + 1</code>, where num is the largeset number which is the power of 2 and at the same time less than target.<br>For example, <code>11 = 3 + 8, dp[11] = dp[3] + 1</code>;</li></ol><p><strong>Time Complexity: O(n)</strong><br><strong>Space Complexity: O(n)</strong></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[num + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">int</span> pow = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t = <span class="number">0</span>; i &lt;= num; i++, t++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == pow) &#123; <span class="comment">// update that largest power of 2 </span></span><br><span class="line">pow * = <span class="number">2</span>;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dp[i] = dp[t] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[num];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lintcode-q-338-counting-bits&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lintcode-q-338-counting-bits&quot;&gt;&lt;/a&gt; LintCode Q 338 - Counting Bits&lt;/h1&gt;
&lt;p&gt;Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array.&lt;/p&gt;
&lt;p&gt;Example 1: &lt;code&gt;Input: 2 ; Output: [0,1,1]&lt;/code&gt;&lt;br&gt;
Example 2: &lt;code&gt;Input: 5 ; Output: [0,1,1,2,1,2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in &lt;strong&gt;linear time O(n)&lt;/strong&gt; possibly in a single pass?&lt;/li&gt;
&lt;li&gt;Space complexity should be O(n).&lt;/li&gt;
&lt;li&gt;Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Coin Change</title>
    <link href="http://yoursite.com/2019/04/24/leetcodeQ322/"/>
    <id>http://yoursite.com/2019/04/24/leetcodeQ322/</id>
    <published>2019-04-24T19:46:44.000Z</published>
    <updated>2019-04-24T20:03:31.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lintcode-q-322-coin-change"><a class="markdownIt-Anchor" href="#lintcode-q-322-coin-change"></a> LintCode Q 322 - Coin Change</h1><p>You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.</p><p>Example 1:<br><code>Input: coins = [1, 2, 5], amount = 11 ; Output: 3</code><br>Explanation: 11 = 5 + 5 + 1<br>Example 2:<br><code>Input: coins = [2], amount = 3 ; Output: -1</code><br><strong>Note:</strong> You may assume that you have an infinite number of each kind of coin.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution :</h2><p><strong>Bottom-up DP Method</strong></p><p><strong>State Transfer Function:</strong><br><code>dp[i] = MIN(dp[i - coin] + 1), when dp[i - coin] has valid value.</code></p><p><strong>Time Complexity: O(kn), k: target sum, n: number of diff coins</strong><br><strong>Space Complexity: O(k)</strong></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (coins == <span class="keyword">null</span> || coins.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (amount == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> coin: coins) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= coin &amp;&amp; dp[i - coin] != Integer.MAX_VALUE)</span><br><span class="line">dp[i] = Math.min(dp[i], dp[i - coin] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[amount] == Integer.MAX_VALUE ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lintcode-q-322-coin-change&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lintcode-q-322-coin-change&quot;&gt;&lt;/a&gt; LintCode Q 322 - Coin Change&lt;/h1&gt;
&lt;p&gt;You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;
&lt;code&gt;Input: coins = [1, 2, 5], amount = 11 ; Output: 3&lt;/code&gt;&lt;br&gt;
Explanation: 11 = 5 + 5 + 1&lt;br&gt;
Example 2:&lt;br&gt;
&lt;code&gt;Input: coins = [2], amount = 3 ; Output: -1&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; You may assume that you have an infinite number of each kind of coin.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Range Sum Query 2D - Immutable</title>
    <link href="http://yoursite.com/2019/04/24/leetcodeQ304/"/>
    <id>http://yoursite.com/2019/04/24/leetcodeQ304/</id>
    <published>2019-04-24T15:04:40.000Z</published>
    <updated>2019-04-24T21:11:13.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lintcode-q-304-range-sum-query-2d-immutable"><a class="markdownIt-Anchor" href="#lintcode-q-304-range-sum-query-2d-immutable"></a> LintCode Q 304 - Range Sum Query 2D - Immutable</h1><p>Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).</p><p>Example:<br><code>Given matrix = [ [3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5] ] sumRegion(2, 1, 4, 3) -&gt; 8 sumRegion(1, 1, 2, 2) -&gt; 11 sumRegion(1, 2, 2, 4) -&gt; 12</code><br><strong>Note:</strong></p><ul><li>You may assume that the matrix does not change.</li><li>There are many calls to sumRegion function.</li><li>You may assume that row1 ≤ row2 and col1 ≤ col2.</li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution :</h2><p>This is similar to <a href="/2019/04/24/leetcodeQ303/" title="Range Sum Query - Immutable">Range Sum Query - Immutable</a>. To improve the efficiency, we record the sums in an 2D array. These sum values are<br><code>sum[r][c] = sum[r][c-1]+sum[r-1][c]-sum[r-1][c-1]+matrix[r][c]</code>.</p><p>Then, <strong>sum of rectangle</strong> can be obtained as:<br><code>sum[r2][c2] - sum[r2][c1-1] - sum[r1-1][c2] + sum[r1-1][r2-1]</code>.</p><p><strong>Time Complexity: O(m*n); m, n: number of rows and cols</strong><br><strong>Space Complexity: O(m*n)</strong></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] sum;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NumMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">sum = <span class="keyword">new</span> <span class="keyword">int</span>[matrix.length + <span class="number">1</span>][matrix[<span class="number">0</span>].length + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; matrix.length; r++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; matrix[<span class="number">0</span>].length; c++) &#123;</span><br><span class="line">sum[r+<span class="number">1</span>][c+<span class="number">1</span>] = sum[r+<span class="number">1</span>][c] + sum[r][c+<span class="number">1</span>] - sum[r][c] + matrix[r][c];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRegion</span><span class="params">(<span class="keyword">int</span> row1, <span class="keyword">int</span> col1, <span class="keyword">int</span> row2, <span class="keyword">int</span> col2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sum[row2+<span class="number">1</span>][col2+<span class="number">1</span>] - sum[row2+<span class="number">1</span>][col1] - sum[row1][col2+<span class="number">1</span>] + sum[row1][col1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lintcode-q-304-range-sum-query-2d-immutable&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lintcode-q-304-range-sum-query-2d-immutable&quot;&gt;&lt;/a&gt; LintCode Q 304 - Range Sum Query 2D - Immutable&lt;/h1&gt;
&lt;p&gt;Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;
&lt;code&gt;Given matrix = [ [3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5] ] sumRegion(2, 1, 4, 3) -&amp;gt; 8 sumRegion(1, 1, 2, 2) -&amp;gt; 11 sumRegion(1, 2, 2, 4) -&amp;gt; 12&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You may assume that the matrix does not change.&lt;/li&gt;
&lt;li&gt;There are many calls to sumRegion function.&lt;/li&gt;
&lt;li&gt;You may assume that row1 ≤ row2 and col1 ≤ col2.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Range Sum Query - Immutable</title>
    <link href="http://yoursite.com/2019/04/24/leetcodeQ303/"/>
    <id>http://yoursite.com/2019/04/24/leetcodeQ303/</id>
    <published>2019-04-24T14:57:39.000Z</published>
    <updated>2019-04-24T15:04:16.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lintcode-q-303-range-sum-query-immutable"><a class="markdownIt-Anchor" href="#lintcode-q-303-range-sum-query-immutable"></a> LintCode Q 303 - Range Sum Query - Immutable</h1><p>Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.</p><p>Example:<br><code>Given nums = [-2, 0, 3, -5, 2, -1] sumRange(0, 2) -&gt; 1 sumRange(2, 5) -&gt; -1 sumRange(0, 5) -&gt; -3</code><br><strong>Note:</strong></p><ul><li>You may assume that the <strong>array does not change</strong>.</li><li>There are <strong>many calls</strong> to <em>sumRange</em> function.</li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution :</h2><p>Since the array does not change and there are many calls to the <em>sumRange</em> function. Therefore, we consider to preprocess the array, calculating <code>Sum(nums[1], ... nums[i])</code> and storing these values in an array.</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] sum;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">sum = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums.length; i++)</span><br><span class="line">sum[i] = sum[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sum[j + <span class="number">1</span>] - sum[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lintcode-q-303-range-sum-query-immutable&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lintcode-q-303-range-sum-query-immutable&quot;&gt;&lt;/a&gt; LintCode Q 303 - Range Sum Query - Immutable&lt;/h1&gt;
&lt;p&gt;Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;
&lt;code&gt;Given nums = [-2, 0, 3, -5, 2, -1] sumRange(0, 2) -&amp;gt; 1 sumRange(2, 5) -&amp;gt; -1 sumRange(0, 5) -&amp;gt; -3&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You may assume that the &lt;strong&gt;array does not change&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;There are &lt;strong&gt;many calls&lt;/strong&gt; to &lt;em&gt;sumRange&lt;/em&gt; function.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Android Unlock Patterns</title>
    <link href="http://yoursite.com/2019/04/24/lintcodeQ909/"/>
    <id>http://yoursite.com/2019/04/24/lintcodeQ909/</id>
    <published>2019-04-24T14:52:14.000Z</published>
    <updated>2019-04-24T14:56:04.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lintcode-q-909-android-unlock-patterns"><a class="markdownIt-Anchor" href="#lintcode-q-909-android-unlock-patterns"></a> LintCode Q 909 - Android Unlock Patterns</h1><p>Given an Android 3x3 key lock screen and two integers m and n, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of m keys and maximum n keys.<br>Rules for a valid pattern:</p><ul><li>Each pattern must connect at least m keys and at most n keys.</li><li>All the keys must be distinct.</li><li>If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern. No jumps through non selected key is allowed.</li><li>The order of keys used matters.</li></ul><p>Example1<br><code>Input: m = 1, n = 1 ; Output: 9</code><br>Example2<br><code>Input: m = 1, n = 2 ; Output: 65</code></p><a id="more"></a><h2 id="solution-dfs-backtracking"><a class="markdownIt-Anchor" href="#solution-dfs-backtracking"></a> Solution : DFS / backtracking</h2><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfPatterns</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] skip = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">skip[<span class="number">1</span>][<span class="number">3</span>] = skip[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">skip[<span class="number">1</span>][<span class="number">7</span>] = skip[<span class="number">7</span>][<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">skip[<span class="number">3</span>][<span class="number">9</span>] = skip[<span class="number">9</span>][<span class="number">3</span>] = <span class="number">6</span>;</span><br><span class="line">skip[<span class="number">7</span>][<span class="number">9</span>] = skip[<span class="number">9</span>][<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">skip[<span class="number">1</span>][<span class="number">9</span>] = skip[<span class="number">9</span>][<span class="number">1</span>] = skip[<span class="number">3</span>][<span class="number">7</span>] = skip[<span class="number">7</span>][<span class="number">3</span>] = skip[<span class="number">2</span>][<span class="number">8</span>] = skip[<span class="number">8</span>][<span class="number">2</span>] = skip[<span class="number">4</span>][<span class="number">6</span>] = skip[<span class="number">6</span>][<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt;= n; i++) &#123;</span><br><span class="line">res += DFS(visited, skip, <span class="number">1</span>, i - <span class="number">1</span>) * <span class="number">4</span>;</span><br><span class="line">res += DFS(visited, skip, <span class="number">2</span>, i - <span class="number">1</span>) * <span class="number">4</span>;</span><br><span class="line">res += DFS(visited, skip, <span class="number">5</span>, i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">boolean</span> visited[], <span class="keyword">int</span>[][] skip, <span class="keyword">int</span> cur, <span class="keyword">int</span> remain)</span> </span>&#123;</span><br><span class="line"><span class="comment">// boundary cases</span></span><br><span class="line"><span class="keyword">if</span> (remain &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (remain == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//choose</span></span><br><span class="line">visited[cur] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//explore</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!visited[i] &amp;&amp; (skip[cur][i] == <span class="number">0</span> || visited[skip[cur][i]]))</span><br><span class="line">res += DFS(visited, skip, i, remain - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unchoose</span></span><br><span class="line">visited[cur] = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lintcode-q-909-android-unlock-patterns&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lintcode-q-909-android-unlock-patterns&quot;&gt;&lt;/a&gt; LintCode Q 909 - Android Unlock Patterns&lt;/h1&gt;
&lt;p&gt;Given an Android 3x3 key lock screen and two integers m and n, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of m keys and maximum n keys.&lt;br&gt;
Rules for a valid pattern:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each pattern must connect at least m keys and at most n keys.&lt;/li&gt;
&lt;li&gt;All the keys must be distinct.&lt;/li&gt;
&lt;li&gt;If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern. No jumps through non selected key is allowed.&lt;/li&gt;
&lt;li&gt;The order of keys used matters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example1&lt;br&gt;
&lt;code&gt;Input: m = 1, n = 1 ; Output: 9&lt;/code&gt;&lt;br&gt;
Example2&lt;br&gt;
&lt;code&gt;Input: m = 1, n = 2 ; Output: 65&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LintCode" scheme="http://yoursite.com/tags/LintCode/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="backtracking" scheme="http://yoursite.com/tags/backtracking/"/>
    
  </entry>
  
  <entry>
    <title>Paint Fence</title>
    <link href="http://yoursite.com/2019/04/23/lintcodeQ514/"/>
    <id>http://yoursite.com/2019/04/23/lintcodeQ514/</id>
    <published>2019-04-23T23:00:46.000Z</published>
    <updated>2019-04-23T23:13:20.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lintcode-q-514-paint-fence"><a class="markdownIt-Anchor" href="#lintcode-q-514-paint-fence"></a> LintCode Q 514 - Paint Fence</h1><p>There is a fence with n posts, each post can be painted with one of the k colors. You have to paint all the posts such that no more than two adjacent fence posts have the same color.<br>Return the total number of ways you can paint the fence.</p><p>Example 1:<br><code>Input: n=3, k=2 ; Output: 6</code><br>Explanation:</p><table><thead><tr><th></th><th>post1</th><th>post2</th><th>post3</th></tr></thead><tbody><tr><td>way1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>way2</td><td>0</td><td>1</td><td>0</td></tr><tr><td>way3</td><td>0</td><td>1</td><td>1</td></tr><tr><td>way4</td><td>1</td><td>0</td><td>0</td></tr><tr><td>way5</td><td>1</td><td>0</td><td>1</td></tr><tr><td>way6</td><td>1</td><td>1</td><td>0</td></tr></tbody></table><p>Example 2:<br><code>Input: n=2, k=2 ; Output: 4</code><br>Explanation:</p><table><thead><tr><th></th><th>post1</th><th>post2</th></tr></thead><tbody><tr><td>way1</td><td>0</td><td>0</td></tr><tr><td>way2</td><td>0</td><td>1</td></tr><tr><td>way3</td><td>1</td><td>0</td></tr><tr><td>way4</td><td>1</td><td>1</td></tr></tbody></table><p><strong>Notice:</strong> n and k are non-negative integers.</p><a id="more"></a><h2 id="solution-dp-sliding-array"><a class="markdownIt-Anchor" href="#solution-dp-sliding-array"></a> Solution : DP + Sliding Array</h2><ol><li>For post1: we have <em><strong>k</strong></em> choices;</li><li>For post2: we have <em><strong>k * k</strong></em> choices;</li><li>For post3:<ul><li>if its color is same as post 2, then we have <em><strong>k * (k - 1)</strong></em> choices;</li><li>if its color is diff with post 2, then we have <em><strong>k * k * (k - 1)</strong></em> choices;<br><font color="#06bcf9"><br>Therefore the state transfer function is <br><br><code>dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]);</code><br></font></li></ul></li></ol><p>At last we use the <strong>sliding array</strong> to optimze the space complexity.</p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numWays</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, k, k * k, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> dp[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> dp[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">dp[<span class="number">3</span>] = (k - <span class="number">1</span>) * (dp[<span class="number">1</span>] + dp[<span class="number">2</span>]);</span><br><span class="line">dp[<span class="number">1</span>] = dp[<span class="number">2</span>];</span><br><span class="line">dp[<span class="number">2</span>] = dp[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lintcode-q-514-paint-fence&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lintcode-q-514-paint-fence&quot;&gt;&lt;/a&gt; LintCode Q 514 - Paint Fence&lt;/h1&gt;
&lt;p&gt;There is a fence with n posts, each post can be painted with one of the k colors. You have to paint all the posts such that no more than two adjacent fence posts have the same color.&lt;br&gt;
Return the total number of ways you can paint the fence.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;
&lt;code&gt;Input: n=3, k=2 ; Output: 6&lt;/code&gt;&lt;br&gt;
Explanation:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;post1&lt;/th&gt;
&lt;th&gt;post2&lt;/th&gt;
&lt;th&gt;post3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;way1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;way2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;way3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;way4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;way5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;way6&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Example 2:&lt;br&gt;
&lt;code&gt;Input: n=2, k=2 ; Output: 4&lt;/code&gt;&lt;br&gt;
Explanation:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;post1&lt;/th&gt;
&lt;th&gt;post2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;way1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;way2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;way3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;way4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Notice:&lt;/strong&gt; n and k are non-negative integers.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Paint House</title>
    <link href="http://yoursite.com/2019/04/23/lintcodeQ515/"/>
    <id>http://yoursite.com/2019/04/23/lintcodeQ515/</id>
    <published>2019-04-23T21:53:34.000Z</published>
    <updated>2019-04-23T23:17:18.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lintcode-q-515-paint-house"><a class="markdownIt-Anchor" href="#lintcode-q-515-paint-house"></a> LintCode Q 515 - Paint House</h1><p>There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color, and you need to cost the least. Return the minimum cost.<br>The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on… Find the minimum cost to paint all houses.</p><p>Example 1:<br><code>Input: [[14,2,11],[11,14,5],[14,3,10]] ; Output: 10</code><br>Explanation: blue green blue, 2 + 5 + 3 = 10<br>Example 2:<br><code>Input: [[1,2,3],[1,4,6]] ; Output: 3</code><br>Notice: All costs are positive integers.</p><a id="more"></a><h2 id="solution-dp"><a class="markdownIt-Anchor" href="#solution-dp"></a> Solution : DP</h2><h3 id="solution-1"><a class="markdownIt-Anchor" href="#solution-1"></a> Solution 1</h3><p><strong>State Transfer Function:</strong><br><code>dp[i][0] = Math.min(dp[i-1][1], dp[i-1][2]) + costs[i][0]; dp[i][1] = Math.min(dp[i-1][0], dp[i-1][2]) + costs[i][1]; dp[i][2] = Math.min(dp[i-1][0], dp[i-1][1]) + costs[i][2];</code></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (costs.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = costs.length;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = costs[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>] = costs[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">2</span>] = costs[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    dp[i][<span class="number">0</span>] = Math.min(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">2</span>]) + costs[i][<span class="number">0</span>];</span><br><span class="line">    dp[i][<span class="number">1</span>] = Math.min(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">2</span>]) + costs[i][<span class="number">1</span>];</span><br><span class="line">    dp[i][<span class="number">2</span>] = Math.min(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>]) + costs[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Math.min(dp[n-<span class="number">1</span>][<span class="number">0</span>], Math.min(dp[n-<span class="number">1</span>][<span class="number">1</span>], dp[n-<span class="number">1</span>][<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="solution-2-optimizing-the-space-complexity-using-sliding-arrays"><a class="markdownIt-Anchor" href="#solution-2-optimizing-the-space-complexity-using-sliding-arrays"></a> Solution 2: Optimizing the space complexity using sliding arrays</h3><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (costs.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> old = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = costs[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>] = costs[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">2</span>] = costs[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; costs.length; i++) &#123;</span><br><span class="line">old = now;    <span class="comment">// old = 0 now = 1  or old = 1 now = 0</span></span><br><span class="line">now = <span class="number">1</span> - old;</span><br><span class="line">dp[now][<span class="number">0</span>] = Math.min(dp[old][<span class="number">1</span>], dp[old][<span class="number">2</span>]) + costs[i][<span class="number">0</span>];</span><br><span class="line">dp[now][<span class="number">1</span>] = Math.min(dp[old][<span class="number">0</span>], dp[old][<span class="number">2</span>]) + costs[i][<span class="number">1</span>];</span><br><span class="line">dp[now][<span class="number">2</span>] = Math.min(dp[old][<span class="number">0</span>], dp[old][<span class="number">1</span>]) + costs[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Math.min(dp[now][<span class="number">0</span>], Math.min(dp[now][<span class="number">1</span>], dp[now][<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#06bcf9">Sliding arrays is always used to save the space complexity.</font><br>**For example: **<br><strong>Tradition method for solving the Fibonacci problem</strong><br><code>int f[100]; f[0] = 0; f[1] = 1; f[2] = 1; for(int i = 3; i &lt;= n; ++i) f[i] = f[i - 1] + f[i - 2]; return f[n];</code><br><strong>Sliding array for solving the Fibonacci problem</strong><br><code>int f[3]; f[1] = 0; f[2] = 1; for(int i = 2; i &lt;= n; ++i) { f[0] = f[1]; f[1] = f[2]; f[2] = f[0] + f[1]; } return f[2];</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lintcode-q-515-paint-house&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lintcode-q-515-paint-house&quot;&gt;&lt;/a&gt; LintCode Q 515 - Paint House&lt;/h1&gt;
&lt;p&gt;There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color, and you need to cost the least. Return the minimum cost.&lt;br&gt;
The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on… Find the minimum cost to paint all houses.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;
&lt;code&gt;Input: [[14,2,11],[11,14,5],[14,3,10]] ; Output: 10&lt;/code&gt;&lt;br&gt;
Explanation: blue green blue, 2 + 5 + 3 = 10&lt;br&gt;
Example 2:&lt;br&gt;
&lt;code&gt;Input: [[1,2,3],[1,4,6]] ; Output: 3&lt;/code&gt;&lt;br&gt;
Notice: All costs are positive integers.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>House Robber II</title>
    <link href="http://yoursite.com/2019/04/23/leetcodeQ213/"/>
    <id>http://yoursite.com/2019/04/23/leetcodeQ213/</id>
    <published>2019-04-23T21:24:09.000Z</published>
    <updated>2019-04-23T21:35:16.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-213-house-robber-ii"><a class="markdownIt-Anchor" href="#leetcode-q-213-house-robber-ii"></a> LeetCode Q 213 - House Robber II</h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle</strong>. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.<br>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p><p>Example 1:<br><code>Input: [2,3,2] ; Output: 3</code><br>Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.<br>Example 2:<br><code>Input: [1,2,3,1] ; Output: 4</code><br>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.</p><a id="more"></a><h2 id="solution-dp"><a class="markdownIt-Anchor" href="#solution-dp"></a> Solution : DP</h2><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] dp1 = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span>[] dp2 = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line"></span><br><span class="line"><span class="comment">// including from the first house not the last house</span></span><br><span class="line">dp1[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length - <span class="number">1</span>; i++) </span><br><span class="line">dp1[i] = Math.max(dp1[i - <span class="number">1</span>], nums[i] + (i &gt;= <span class="number">2</span> ? dp1[i - <span class="number">2</span>] : <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// including from the last house not the first house</span></span><br><span class="line">dp2[<span class="number">0</span>] = <span class="number">0</span>; dp2[<span class="number">1</span>] = nums[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.length; i++) </span><br><span class="line">dp2[i] = Math.max(dp2[i - <span class="number">1</span>], nums[i] + dp2[i - <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Math.max(dp1[nums.length - <span class="number">2</span>], dp2[nums.length - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-213-house-robber-ii&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-213-house-robber-ii&quot;&gt;&lt;/a&gt; LeetCode Q 213 - House Robber II&lt;/h1&gt;
&lt;p&gt;You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are &lt;strong&gt;arranged in a circle&lt;/strong&gt;. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.&lt;br&gt;
Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;
&lt;code&gt;Input: [2,3,2] ; Output: 3&lt;/code&gt;&lt;br&gt;
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.&lt;br&gt;
Example 2:&lt;br&gt;
&lt;code&gt;Input: [1,2,3,1] ; Output: 4&lt;/code&gt;&lt;br&gt;
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>House Robber</title>
    <link href="http://yoursite.com/2019/04/23/leetcodeQ198/"/>
    <id>http://yoursite.com/2019/04/23/leetcodeQ198/</id>
    <published>2019-04-23T21:21:53.000Z</published>
    <updated>2019-04-23T23:15:29.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-198-house-robber"><a class="markdownIt-Anchor" href="#leetcode-q-198-house-robber"></a> LeetCode Q 198 - House Robber</h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.<br>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p><p>Example 1:<br><code>Input: [1,2,3,1] ; Output: 4</code><br>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.<br>Example 2:<br><code>Input: [2,7,9,3,1] ; Output: 12</code><br>Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12.</p><a id="more"></a><h2 id="solution-dp"><a class="markdownIt-Anchor" href="#solution-dp"></a> Solution : DP</h2><p><strong>State Transfer Function:</strong><br><code>dp[i] = Math.max(dp[i - 1], nums[i] + dp[i - 2])</code></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="comment">// boundary case 1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">dp[<span class="number">0</span>] = nums[<span class="number">0</span>]; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) </span><br><span class="line">dp[i] = Math.max(nums[i] + (i &gt;= <span class="number">2</span> ? dp[i - <span class="number">2</span>] : <span class="number">0</span>), dp[i - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[nums.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-198-house-robber&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-198-house-robber&quot;&gt;&lt;/a&gt; LeetCode Q 198 - House Robber&lt;/h1&gt;
&lt;p&gt;You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.&lt;br&gt;
Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;
&lt;code&gt;Input: [1,2,3,1] ; Output: 4&lt;/code&gt;&lt;br&gt;
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.&lt;br&gt;
Example 2:&lt;br&gt;
&lt;code&gt;Input: [2,7,9,3,1] ; Output: 12&lt;/code&gt;&lt;br&gt;
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Best Time to Buy and Sell Stock with Cooldown</title>
    <link href="http://yoursite.com/2019/04/23/leetcodeQ309/"/>
    <id>http://yoursite.com/2019/04/23/leetcodeQ309/</id>
    <published>2019-04-23T20:56:37.000Z</published>
    <updated>2019-04-23T21:13:46.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-123-best-time-to-buy-and-sell-stock-with-cooldown"><a class="markdownIt-Anchor" href="#leetcode-q-123-best-time-to-buy-and-sell-stock-with-cooldown"></a> LeetCode Q 123 - Best Time to Buy and Sell Stock with Cooldown</h1><p>Say you have an array for which the ith element is the price of a given stock on day i.<br>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:<br>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again). <strong>After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)</strong><br>Example:<br><code>Input: [1,2,3,0,2] ; Output: 3</code><br>Explanation: transactions = [buy, sell, cooldown, buy, sell]</p><a id="more"></a><h2 id="solution-dp"><a class="markdownIt-Anchor" href="#solution-dp"></a> Solution : DP</h2><p>We can use 4 varaibles to represent the transaction states until day <em><strong>i</strong></em>. They are <strong>buy, sell, hold, cooldown</strong>. Their relationship is shown as follows.<br><img src="leetcodeQ309-1.png" width="50%" height="50%"></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> buy = -prices[<span class="number">0</span>], hold = -prices[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> sell = <span class="number">0</span>, cooldown = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> price: prices) &#123;</span><br><span class="line"><span class="keyword">int</span> orig_hold = hold, orig_sell = sell;</span><br><span class="line">hold = Math.max(hold, buy);</span><br><span class="line">sell = Math.max(buy, orig_hold) + price;</span><br><span class="line">buy = cooldown - price;</span><br><span class="line">cooldown = Math.max(cooldown, orig_sell);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Math.max(sell, cooldown);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-123-best-time-to-buy-and-sell-stock-with-cooldown&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-123-best-time-to-buy-and-sell-stock-with-cooldown&quot;&gt;&lt;/a&gt; LeetCode Q 123 - Best Time to Buy and Sell Stock with Cooldown&lt;/h1&gt;
&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;br&gt;
Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:&lt;br&gt;
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again). &lt;strong&gt;After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)&lt;/strong&gt;&lt;br&gt;
Example:&lt;br&gt;
&lt;code&gt;Input: [1,2,3,0,2] ; Output: 3&lt;/code&gt;&lt;br&gt;
Explanation: transactions = [buy, sell, cooldown, buy, sell]&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Best Time to Buy and Sell Stock III</title>
    <link href="http://yoursite.com/2019/04/23/leetcodeQ123/"/>
    <id>http://yoursite.com/2019/04/23/leetcodeQ123/</id>
    <published>2019-04-23T20:40:01.000Z</published>
    <updated>2019-04-23T23:14:14.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-123-best-time-to-buy-and-sell-stock-iii"><a class="markdownIt-Anchor" href="#leetcode-q-123-best-time-to-buy-and-sell-stock-iii"></a> LeetCode Q 123 - Best Time to Buy and Sell Stock III</h1><p>Say you have an array for which the ith element is the price of a given stock on day i.<br>Design an algorithm to find the maximum profit. You may complete <strong>at most two transactions</strong>.<br>Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p><p>Example 1:<br><code>Input: [3,3,5,0,0,3,1,4] ; Output: 6</code><br>Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.<br>Example 2:<br><code>Input: [1,2,3,4,5] ; Output: 4</code><br>Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.<br>Example 3:<br><code>Input: [7,6,4,3,1] ; Output: 0</code><br>Explanation: In this case, no transaction is done, i.e. max profit = 0.</p><a id="more"></a><h2 id="solution-dp"><a class="markdownIt-Anchor" href="#solution-dp"></a> Solution : DP</h2><p><strong>State Transfer Function:</strong><br><code>dp[k][i] = Math.max(dp[k][i-1], prices[i]-prices[j]+dp[k-1][j-1]) j=[0,1,..i-1]</code></p><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][prices.length + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">2</span>; k++) &#123;</span><br><span class="line"><span class="keyword">int</span> max = -prices[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= prices.length; i++) &#123;</span><br><span class="line">max = Math.max(max, -prices[i] + dp[k - <span class="number">1</span>][i - <span class="number">1</span>]);</span><br><span class="line">dp[k][i] = Math.max(dp[k][i - <span class="number">1</span>], prices[i] + max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">2</span>][prices.length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Code: Optimize the Time Complexity to O(1)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> oneBuyCost = Integer.MIN_VALUE, oneBuyProfit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> twoBuyCost = Integer.MIN_VALUE, twoBuyProfit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> price: prices) &#123;</span><br><span class="line">oneBuyCost = Math.min(oneBuyCost, price);</span><br><span class="line">oneBuyProfit = Math.max(oneBuyProfit, price - oneBuyCost);</span><br><span class="line">twoBuyCost = Math.max(twoBuyCost, -price + oneBuyProfit);</span><br><span class="line">twoBuyProfit = Math.max(twoBuyProfit, price + twoBuyCost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> twoBuyProfit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here, the oneBuyCost keeps track of the lowest price, and oneBuyProfit keeps track of the biggest profit we could get.<br>Then the <strong>tricky</strong> part comes, how to handle the <strong>twoBuyCost</strong>? Why <code>twoBuyCost = Math.max(twoBuyCost, -price + oneBuyProfit);</code>? Suppose in real life, you have bought and sold a stock and made $100 dollar profit. When you want to purchase a stock which costs you $300 dollars, how would you think this? You must think, um, I have made $100 profit, so I think this $300 dollar stock is worth $200 FOR ME since I have hold $100 for free.<br>There we go, you got the idea how we calculate twoBuyCost!! We just minimize the cost again!! The twoBuyProfit is just making as much profit as possible.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-123-best-time-to-buy-and-sell-stock-iii&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-123-best-time-to-buy-and-sell-stock-iii&quot;&gt;&lt;/a&gt; LeetCode Q 123 - Best Time to Buy and Sell Stock III&lt;/h1&gt;
&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;br&gt;
Design an algorithm to find the maximum profit. You may complete &lt;strong&gt;at most two transactions&lt;/strong&gt;.&lt;br&gt;
Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;
&lt;code&gt;Input: [3,3,5,0,0,3,1,4] ; Output: 6&lt;/code&gt;&lt;br&gt;
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.&lt;br&gt;
Example 2:&lt;br&gt;
&lt;code&gt;Input: [1,2,3,4,5] ; Output: 4&lt;/code&gt;&lt;br&gt;
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.&lt;br&gt;
Example 3:&lt;br&gt;
&lt;code&gt;Input: [7,6,4,3,1] ; Output: 0&lt;/code&gt;&lt;br&gt;
Explanation: In this case, no transaction is done, i.e. max profit = 0.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Best Time to Buy and Sell Stock II</title>
    <link href="http://yoursite.com/2019/04/23/leetcodeQ122/"/>
    <id>http://yoursite.com/2019/04/23/leetcodeQ122/</id>
    <published>2019-04-23T19:35:43.000Z</published>
    <updated>2019-04-23T20:47:40.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-122-best-time-to-buy-and-sell-stock-ii"><a class="markdownIt-Anchor" href="#leetcode-q-122-best-time-to-buy-and-sell-stock-ii"></a> LeetCode Q 122 - Best Time to Buy and Sell Stock II</h1><p>Say you have an array for which the ith element is the price of a given stock on day i.<br>Design an algorithm to find the maximum profit. You may <strong>complete as many transactions as you like</strong> (i.e., buy one and sell one share of the stock multiple times).</p><p>Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p><p>Example 1:</p><p><code>Input: [7,1,5,3,6,4] ; Output: 7</code><br>Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.<br>Example 2:<br><code>Input: [1,2,3,4,5] ; Output: 4</code><br>Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.<br>Example 3:<br><code>Input: [7,6,4,3,1] ; Output: 0</code><br>Explanation: In this case, no transaction is done, i.e. max profit = 0.</p><a id="more"></a><h2 id="solution-dp"><a class="markdownIt-Anchor" href="#solution-dp"></a> Solution : DP</h2><p><strong>Code:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> profit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = i;</span><br><span class="line"><span class="keyword">while</span> (temp + <span class="number">1</span> &lt; prices.length &amp;&amp; prices[temp] &lt; prices[temp + <span class="number">1</span>]) </span><br><span class="line">temp++; </span><br><span class="line">profit += prices[temp] - prices[i];</span><br><span class="line">i = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-122-best-time-to-buy-and-sell-stock-ii&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-122-best-time-to-buy-and-sell-stock-ii&quot;&gt;&lt;/a&gt; LeetCode Q 122 - Best Time to Buy and Sell Stock II&lt;/h1&gt;
&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;br&gt;
Design an algorithm to find the maximum profit. You may &lt;strong&gt;complete as many transactions as you like&lt;/strong&gt; (i.e., buy one and sell one share of the stock multiple times).&lt;/p&gt;
&lt;p&gt;Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).&lt;/p&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Input: [7,1,5,3,6,4] ; Output: 7&lt;/code&gt;&lt;br&gt;
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.&lt;br&gt;
Example 2:&lt;br&gt;
&lt;code&gt;Input: [1,2,3,4,5] ; Output: 4&lt;/code&gt;&lt;br&gt;
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.&lt;br&gt;
Example 3:&lt;br&gt;
&lt;code&gt;Input: [7,6,4,3,1] ; Output: 0&lt;/code&gt;&lt;br&gt;
Explanation: In this case, no transaction is done, i.e. max profit = 0.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Best Time to Buy and Sell Stock</title>
    <link href="http://yoursite.com/2019/04/23/leetcodeQ121/"/>
    <id>http://yoursite.com/2019/04/23/leetcodeQ121/</id>
    <published>2019-04-23T19:30:54.000Z</published>
    <updated>2019-04-23T19:35:12.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-121-best-time-to-buy-and-sell-stock"><a class="markdownIt-Anchor" href="#leetcode-q-121-best-time-to-buy-and-sell-stock"></a> LeetCode Q 121 - Best Time to Buy and Sell Stock</h1><p>Say you have an array for which the ith element is the price of a given stock on day i.<br>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.<br>Note that you cannot sell a stock before you buy one.</p><p>Example 1:<br><code>Input: [7,1,5,3,6,4] ; Output: 5</code><br>Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Not 7-1 = 6, as selling price needs to be larger than buying price.<br>Example 2:<br><code>Input: [7,6,4,3,1] ; Output: 0</code><br>Explanation: In this case, no transaction is done, i.e. max profit = 0.</p><a id="more"></a><h2 id="solution-dp"><a class="markdownIt-Anchor" href="#solution-dp"></a> Solution : DP</h2><p><strong>Code: Use Array</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> buy = <span class="number">0</span>, sell = <span class="number">0</span>, profit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (prices[i] &lt; prices[buy]) buy = i;</span><br><span class="line"><span class="keyword">if</span> (prices[i] &gt; prices[sell]) sell = i;</span><br><span class="line"><span class="keyword">if</span> (buy &gt; sell) sell = buy;</span><br><span class="line">profit = Math.max(profit, prices[sell] - prices[buy]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-121-best-time-to-buy-and-sell-stock&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-121-best-time-to-buy-and-sell-stock&quot;&gt;&lt;/a&gt; LeetCode Q 121 - Best Time to Buy and Sell Stock&lt;/h1&gt;
&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;br&gt;
If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.&lt;br&gt;
Note that you cannot sell a stock before you buy one.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;
&lt;code&gt;Input: [7,1,5,3,6,4] ; Output: 5&lt;/code&gt;&lt;br&gt;
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Not 7-1 = 6, as selling price needs to be larger than buying price.&lt;br&gt;
Example 2:&lt;br&gt;
&lt;code&gt;Input: [7,6,4,3,1] ; Output: 0&lt;/code&gt;&lt;br&gt;
Explanation: In this case, no transaction is done, i.e. max profit = 0.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Triangle</title>
    <link href="http://yoursite.com/2019/04/23/leetcodeQ120/"/>
    <id>http://yoursite.com/2019/04/23/leetcodeQ120/</id>
    <published>2019-04-23T19:09:17.000Z</published>
    <updated>2019-04-23T23:18:27.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-120-triangle"><a class="markdownIt-Anchor" href="#leetcode-q-120-triangle"></a> LeetCode Q 120 - Triangle</h1><p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p><p>For example, given the following triangle<br><code>[ [2], [3,4], [6,5,7], [4,1,8,3] ]</code><br>The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).</p><p><strong>Note:</strong> Bonus point if you are able to do this using only <strong>O(n)</strong> extra space, where n is the total number of rows in the triangle.</p><a id="more"></a><h2 id="solution-dp"><a class="markdownIt-Anchor" href="#solution-dp"></a> Solution : DP</h2><p><strong>We build the path from bottom to top.</strong><br><strong>State Transfer Function:</strong><br><code>dp[j] = Math.min(dp[j], dp[j + 1]) + list.get(j);</code></p><p><strong>Code: Use Array</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (triangle == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[triangle.size()];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.length; i++) </span><br><span class="line">dp[i] = triangle.get(triangle.size() - <span class="number">1</span>).get(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = triangle.size() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">List&lt;Integer&gt; list = triangle.get(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; list.size(); j++)</span><br><span class="line">dp[j] = Math.min(dp[j], dp[j + <span class="number">1</span>]) + list.get(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Code: Use ArrayList</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = triangle.size();</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(triangle.get(n-<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">list.set(j, triangle.get(i).get(j) + Math.min(list.get(j), list.get(j + <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-120-triangle&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-120-triangle&quot;&gt;&lt;/a&gt; LeetCode Q 120 - Triangle&lt;/h1&gt;
&lt;p&gt;Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.&lt;/p&gt;
&lt;p&gt;For example, given the following triangle&lt;br&gt;
&lt;code&gt;[ [2], [3,4], [6,5,7], [4,1,8,3] ]&lt;/code&gt;&lt;br&gt;
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Bonus point if you are able to do this using only &lt;strong&gt;O(n)&lt;/strong&gt; extra space, where n is the total number of rows in the triangle.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
</feed>
