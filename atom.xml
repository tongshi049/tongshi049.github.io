<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TongTong Shi&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-08T18:13:36.506Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tong Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Encode important configuration information with DES</title>
    <link href="http://yoursite.com/2019/08/08/coding-PropertyPlaceholderConfigurer/"/>
    <id>http://yoursite.com/2019/08/08/coding-PropertyPlaceholderConfigurer/</id>
    <published>2019-08-08T17:33:30.000Z</published>
    <updated>2019-08-08T18:13:36.506Z</updated>
    
    <content type="html"><![CDATA[<p>In some projects, we exposed our username and password of mySql in file <code>.properties</code>, which is not safe. To solve this issue, in this post we will introduct, 1) how to use <em><strong>DES</strong></em> to encode and decode information, 2) how to customized the resolution of <code>${...}</code> placeholders against local properties based on class <code>PropertyPlaceholderConfigurer</code>.</p><a id="more"></a><h2 id="font-colordodgerblue1-des-font"><a class="markdownIt-Anchor" href="#font-colordodgerblue1-des-font"></a> <font color="dodgerblue">1. DES </font></h2><p>The <strong>Data Encryption Standard (DES)</strong> is a symmetric-key algorithm for the encryption of data. To encrypt our important information, we need to write a <code>DESUtil</code> at first, which is responsible to encrypt and decrypt strings. In <code>DESUtil</code> we first need to generate a key for encrption. Then we can write <code>getEncryptString(...)</code> and <code>getDecryptString(...)</code> methods. The code in <code>DESUtil</code> is shown as follows.</p><details><summary>CODE</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DES algorithm for Encoding and Decoding configuration properties in our project</span></span><br><span class="line"><span class="comment"> * It is a symmetric Security algorithm,</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DESUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Key key;</span><br><span class="line">    <span class="comment">//setting key</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String KEY_STR = <span class="string">"mykey"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String CHARSETNAME = <span class="string">"UTF-8"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String ALGORITHM = <span class="string">"DES"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * generate key for encoding</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// create a generator instance for generating code using DES algorithm</span></span><br><span class="line">            KeyGenerator generator = KeyGenerator.getInstance(ALGORITHM);</span><br><span class="line">            <span class="comment">// Using SHA1 security strategy</span></span><br><span class="line">            SecureRandom secureRandom = SecureRandom.getInstance(<span class="string">"SHA1PRNG"</span>);</span><br><span class="line">            <span class="comment">// Setting seed</span></span><br><span class="line">            secureRandom.setSeed(KEY_STR.getBytes());</span><br><span class="line">            generator.init(secureRandom);</span><br><span class="line">            key = generator.generateKey();</span><br><span class="line">            generator = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * To Encrypt a String</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str:String need to Encrypt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getEncryptString</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//BASE64 Encoding, receiving byte[] array and change it to String</span></span><br><span class="line">        BASE64Encoder base64Decoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Encoding way:UTF-8</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = str.getBytes(CHARSETNAME);</span><br><span class="line">            <span class="comment">// create a cipher based on DES algorithm</span></span><br><span class="line">            Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">            <span class="comment">// using generated key to init the cipher</span></span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">            <span class="comment">// get the encrypted bytes</span></span><br><span class="line">            <span class="keyword">byte</span>[] doFinal = cipher.doFinal(bytes);</span><br><span class="line">            <span class="comment">// return the encrypted String</span></span><br><span class="line">            <span class="keyword">return</span> base64Decoder.encode(doFinal);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span>handle exception</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDecryptString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        BASE64Decoder base64Decoder = <span class="keyword">new</span> BASE64Decoder();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//Encoding way:UTF-8</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = base64Decoder.decodeBuffer(str);</span><br><span class="line">            <span class="comment">//get he cipher instance</span></span><br><span class="line">            Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">            <span class="comment">// using the generated key</span></span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE,key);</span><br><span class="line">            <span class="comment">// get the decoded byte stream</span></span><br><span class="line">            <span class="keyword">byte</span>[] doFinal = cipher.doFinal(bytes);</span><br><span class="line">            <span class="comment">// change it to string using UTF_8 charset</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(doFinal,CHARSETNAME);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span>handle exception</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(getEncryptString(<span class="string">"work"</span>));</span><br><span class="line">        System.out.println(getEncryptString(<span class="string">"Tahm233!"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="font-colordodgerblue2-propertyplaceholderconfigurerfont"><a class="markdownIt-Anchor" href="#font-colordodgerblue2-propertyplaceholderconfigurerfont"></a> <font color="dodgerblue">2. PropertyPlaceholderConfigurer</font></h2><p><code>PlaceholderConfigurer</code>(org.springframework.beans.factory.config) subclass that resolves <code>${...}</code> placeholders against local properties and/or system properties and environment variables.</p><p>To enable encryption and decryption of placeholders in our configuration files with <strong>DES</strong>, first we create a class <code>EncryptPropertyPlaceholderConfigurer</code> which extends <code>PlaceholderConfigurer</code>. In this class, we override method <code>convertProperty</code> to realizing the convertion using DES.</p><details><summary>CODE</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptPropertyPlaceholderConfigurer</span> <span class="keyword">extends</span> <span class="title">PropertyPlaceholderConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// all the String need to decryptStirng</span></span><br><span class="line">    <span class="keyword">private</span> String[] encryptPropNames = &#123;<span class="string">"jdbc.username"</span>,<span class="string">"jdbc.password"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * return the property value of the corresponding property value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> propertyName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> propertyValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">convertProperty</span><span class="params">(String propertyName, String propertyValue)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(isEncryptProp(propertyName))&#123;</span><br><span class="line">            String decryptValue = DESUtil.getDecryptString(propertyValue);</span><br><span class="line">            <span class="keyword">return</span> decryptValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> propertyValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * verify if that property has encrypted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> propertyName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEncryptProp</span><span class="params">(String propertyName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String encryptPropName:encryptPropNames)&#123;</span><br><span class="line">            <span class="keyword">if</span>(propertyName.equals(encryptPropName)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>Then we need to create a bean to tell spring use created <code>EncryptPropertyPlaceholderConfigurer</code> to reolve system properties. Previous, we only appoint the location where to find <code>${...}</code> placeholders like</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-holder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Now we define a bean like this.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.example.o2o.util.EncryptPropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:jdbc.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:redis.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In some projects, we exposed our username and password of mySql in file &lt;code&gt;.properties&lt;/code&gt;, which is not safe. To solve this issue, in this post we will introduct, 1) how to use &lt;em&gt;&lt;strong&gt;DES&lt;/strong&gt;&lt;/em&gt; to encode and decode information, 2) how to customized the resolution of &lt;code&gt;${...}&lt;/code&gt; placeholders against local properties based on class &lt;code&gt;PropertyPlaceholderConfigurer&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Project" scheme="http://yoursite.com/tags/Project/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="PropertyPlaceholderConfigurer" scheme="http://yoursite.com/tags/PropertyPlaceholderConfigurer/"/>
    
  </entry>
  
  <entry>
    <title>Video Stitching</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ1024/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ1024/</id>
    <published>2019-08-07T21:04:56.000Z</published>
    <updated>2019-08-07T21:22:12.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1024-video-stitching"><a class="markdownIt-Anchor" href="#leetcode-q-1024-video-stitching"></a> LeetCode Q 1024 - Video Stitching</h1><p>You are given a series of video clips from a sporting event that lasted <code>T</code> seconds.  These video clips can be overlapping with each other and have varied lengths.<br>Each video clip <code>clips[i]</code> is an interval: it starts at time <code>clips[i][0]</code> and ends at time <code>clips[i][1]</code>.  We can cut these clips into segments freely: for example, a clip <code>[0, 7]</code> can be cut into segments <code>[0, 1] + [1, 3] + [3, 7]</code>.<br>Return the <strong>minimum</strong> number of clips needed so that we can cut the clips into segments that cover the entire sporting event (<code>[0, T]</code>).  If the task is <strong>impossible</strong>, return <code>-1</code>.</p><p><strong>Example 1:</strong> <code>Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10 ; Output: 3</code><br>Explanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.<br>Then, we can reconstruct the sporting event as follows:<br>We cut [1,9] into segments [1,2] + [2,8] + [8,9].<br>Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].<br><strong>Example 2:</strong> <code>Input: clips = [[0,1],[1,2]], T = 5 ; Output: -1</code><br>Explanation: We can’t cover [0,5] with only [0,1] and [0,2].<br><strong>Example 3:</strong> <code>Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9 ; Output: 3</code><br>Explanation: We can take clips [0,4], [4,7], and [6,9].<br><strong>Example 4:</strong> <code>Input: clips = [[0,4],[2,8]], T = 5 ; Output: 2</code><br>Explanation: Notice you can have extra video after the event ends.</p><p><strong>Note:</strong></p><ul><li><code>1 &lt;= clips.length &lt;= 100</code></li><li><code>0 &lt;= clips[i][0], clips[i][1] &lt;= 100</code></li><li><code>0 &lt;= T &lt;= 100</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><h2 id="solution-1-sorting"><a class="markdownIt-Anchor" href="#solution-1-sorting"></a> Solution 1: Sorting</h2><p><strong>Code:</strong></p><figure class="highlight angelscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> videoStitching(<span class="built_in">int</span>[][] clips, <span class="built_in">int</span> T) &#123;</span><br><span class="line">  Arrays.sort(clips, (a, b) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">0</span>] == b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> len = clips.length;</span><br><span class="line">  <span class="keyword">if</span> (clips[<span class="number">0</span>][<span class="number">0</span>] != <span class="number">0</span> || clips[len - <span class="number">1</span>][<span class="number">1</span>] &lt; T) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">int</span> curEnd = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (curEnd &lt; clips[i][<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">int</span> maxEnd = curMax;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len &amp;&amp; clips[i][<span class="number">0</span>] &lt;= curEnd) &#123;</span><br><span class="line">      maxEnd = Math.max(maxEnd, clips[i++][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    curEnd = maxEnd;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (curEnd &gt;= T) <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="solution-2-dp-todo"><a class="markdownIt-Anchor" href="#solution-2-dp-todo"></a> Solution 2: DP (TODO)</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1024-video-stitching&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1024-video-stitching&quot;&gt;&lt;/a&gt; LeetCode Q 1024 - Video Stitching&lt;/h1&gt;
&lt;p&gt;You are given a series of video clips from a sporting event that lasted &lt;code&gt;T&lt;/code&gt; seconds.  These video clips can be overlapping with each other and have varied lengths.&lt;br&gt;
Each video clip &lt;code&gt;clips[i]&lt;/code&gt; is an interval: it starts at time &lt;code&gt;clips[i][0]&lt;/code&gt; and ends at time &lt;code&gt;clips[i][1]&lt;/code&gt;.  We can cut these clips into segments freely: for example, a clip &lt;code&gt;[0, 7]&lt;/code&gt; can be cut into segments &lt;code&gt;[0, 1] + [1, 3] + [3, 7]&lt;/code&gt;.&lt;br&gt;
Return the &lt;strong&gt;minimum&lt;/strong&gt; number of clips needed so that we can cut the clips into segments that cover the entire sporting event (&lt;code&gt;[0, T]&lt;/code&gt;).  If the task is &lt;strong&gt;impossible&lt;/strong&gt;, return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10 ; Output: 3&lt;/code&gt;&lt;br&gt;
Explanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.&lt;br&gt;
Then, we can reconstruct the sporting event as follows:&lt;br&gt;
We cut [1,9] into segments [1,2] + [2,8] + [8,9].&lt;br&gt;
Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: clips = [[0,1],[1,2]], T = 5 ; Output: -1&lt;/code&gt;&lt;br&gt;
Explanation: We can’t cover [0,5] with only [0,1] and [0,2].&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9 ; Output: 3&lt;/code&gt;&lt;br&gt;
Explanation: We can take clips [0,4], [4,7], and [6,9].&lt;br&gt;
&lt;strong&gt;Example 4:&lt;/strong&gt; &lt;code&gt;Input: clips = [[0,4],[2,8]], T = 5 ; Output: 2&lt;/code&gt;&lt;br&gt;
Explanation: Notice you can have extra video after the event ends.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= clips.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= clips[i][0], clips[i][1] &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= T &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Matrix Cells in Distance Order</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ1030/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ1030/</id>
    <published>2019-08-07T20:10:03.000Z</published>
    <updated>2019-08-07T21:17:28.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1030-matrix-cells-in-distance-order"><a class="markdownIt-Anchor" href="#leetcode-q-1030-matrix-cells-in-distance-order"></a> LeetCode Q 1030 - Matrix Cells in Distance Order</h1><p>We are given a matrix with <code>R</code> rows and <code>C</code> columns has cells with integer coordinates <code>(r, c)</code>, where <code>0 &lt;= r &lt; R</code> and <code>0 &lt;= c &lt; C</code>.<br>Additionally, we are given a cell in that matrix with coordinates <code>(r0, c0)</code>.<br>Return the coordinates of all cells in the matrix, sorted by their distance from <code>(r0, c0)</code> from smallest distance to largest distance. Here, the distance between two cells <code>(r1, c1)</code> and <code>(r2, c2)</code> is the Manhattan distance, <code>|r1 - r2| + |c1 - c2|</code>.  (You may return the answer in any order that satisfies this condition.)</p><p><strong>Example 1:</strong> <code>Input: R = 1, C = 2, r0 = 0, c0 = 0 ; Output: [[0,0],[0,1]]</code><br>Explanation: The distances from <code>(r0, c0)</code> to other cells are: <code>[0,1]</code><br><strong>Example 2:</strong> <code>Input: R = 2, C = 2, r0 = 0, c0 = 1 ; Output: [[0,1],[0,0],[1,1],[1,0]]</code><br>Explanation: The distances from <code>(r0, c0)</code> to other cells are: <code>[0,1,1,2]</code><br>The answer <code>[[0,1],[1,1],[0,0],[1,0]]</code> would also be accepted as correct.<br><strong>Example 3:</strong> <code>Input: R = 2, C = 3, r0 = 1, c0 = 2 ; Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]</code><br>Explanation: The distances from <code>(r0, c0)</code> to other cells are: <code>[0,1,1,2,2,3]</code><br>There are other answers that would also be accepted as correct, such as <code>[[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]</code>.</p><p><strong>Note:</strong></p><ul><li><code>1 &lt;= R &lt;= 100</code></li><li><code>1 &lt;= C &lt;= 100</code></li><li><code>0 &lt;= r0 &lt; R</code></li><li><code>0 &lt;= c0 &lt; C</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight markdown"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private static final int[] DIRS = new int[]&#123;1, 0, -1, 0, 1&#125;;</span><br><span class="line">public int[<span class="string">\</span>][<span class="symbol"></span>] allCellsDistOrder(int R, int C, int r0, int c0) &#123;</span><br><span class="line">  int[<span class="string">\</span>][<span class="symbol"></span>] res = new int[<span class="string">R * C</span>][<span class="symbol">2</span>];</span><br><span class="line">  </span><br><span class="line">  Queue<span class="xml"><span class="tag">&lt;<span class="name">int[]</span>&gt;</span></span> que = new LinkedList<span class="xml"><span class="tag">&lt;&gt;</span></span>();</span><br><span class="line">  boolean[<span class="string">\</span>][<span class="symbol"></span>] visited = new boolean[<span class="string">R</span>][<span class="symbol">C</span>];</span><br><span class="line">  </span><br><span class="line">  que.offer(new int[]&#123;r0, c0&#125;);</span><br><span class="line">  visited[<span class="string">r0</span>][<span class="symbol">c0</span>] = true;</span><br><span class="line">  </span><br><span class="line">  int index = 0;</span><br><span class="line">  </span><br><span class="line">  while (!que.isEmpty()) &#123;</span><br><span class="line"><span class="code">    int[] curr = que.poll();</span></span><br><span class="line"><span class="code">    res[index++] = curr;</span></span><br><span class="line"><span class="code">    for (int i = 0; i &lt; 4; i++) &#123;</span></span><br><span class="line"><span class="code">      int nr = curr[0] + DIRS[i], nc = curr[1] + DIRS[i + 1];</span></span><br><span class="line"><span class="code">      if (nr &lt; R &amp;&amp; nr &gt;= 0 &amp;&amp; nc &lt; C &amp;&amp; nc &gt;= 0 &amp;&amp; !visited[nr][nc]) &#123;</span></span><br><span class="line"><span class="code">        que.offer(new int[]&#123;nr, nc&#125;);</span></span><br><span class="line"><span class="code">        visited[nr\][nc] = true;</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1030-matrix-cells-in-distance-order&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1030-matrix-cells-in-distance-order&quot;&gt;&lt;/a&gt; LeetCode Q 1030 - Matrix Cells in Distance Order&lt;/h1&gt;
&lt;p&gt;We are given a matrix with &lt;code&gt;R&lt;/code&gt; rows and &lt;code&gt;C&lt;/code&gt; columns has cells with integer coordinates &lt;code&gt;(r, c)&lt;/code&gt;, where &lt;code&gt;0 &amp;lt;= r &amp;lt; R&lt;/code&gt; and &lt;code&gt;0 &amp;lt;= c &amp;lt; C&lt;/code&gt;.&lt;br&gt;
Additionally, we are given a cell in that matrix with coordinates &lt;code&gt;(r0, c0)&lt;/code&gt;.&lt;br&gt;
Return the coordinates of all cells in the matrix, sorted by their distance from &lt;code&gt;(r0, c0)&lt;/code&gt; from smallest distance to largest distance. Here, the distance between two cells &lt;code&gt;(r1, c1)&lt;/code&gt; and &lt;code&gt;(r2, c2)&lt;/code&gt; is the Manhattan distance, &lt;code&gt;|r1 - r2| + |c1 - c2|&lt;/code&gt;.  (You may return the answer in any order that satisfies this condition.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: R = 1, C = 2, r0 = 0, c0 = 0 ; Output: [[0,0],[0,1]]&lt;/code&gt;&lt;br&gt;
Explanation: The distances from &lt;code&gt;(r0, c0)&lt;/code&gt; to other cells are: &lt;code&gt;[0,1]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: R = 2, C = 2, r0 = 0, c0 = 1 ; Output: [[0,1],[0,0],[1,1],[1,0]]&lt;/code&gt;&lt;br&gt;
Explanation: The distances from &lt;code&gt;(r0, c0)&lt;/code&gt; to other cells are: &lt;code&gt;[0,1,1,2]&lt;/code&gt;&lt;br&gt;
The answer &lt;code&gt;[[0,1],[1,1],[0,0],[1,0]]&lt;/code&gt; would also be accepted as correct.&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: R = 2, C = 3, r0 = 1, c0 = 2 ; Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]&lt;/code&gt;&lt;br&gt;
Explanation: The distances from &lt;code&gt;(r0, c0)&lt;/code&gt; to other cells are: &lt;code&gt;[0,1,1,2,2,3]&lt;/code&gt;&lt;br&gt;
There are other answers that would also be accepted as correct, such as &lt;code&gt;[[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= R &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= C &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= r0 &amp;lt; R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= c0 &amp;lt; C&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Queue" scheme="http://yoursite.com/tags/Queue/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Convert BST to Greater Tree</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ538/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ538/</id>
    <published>2019-08-07T20:02:03.000Z</published>
    <updated>2019-08-07T20:10:04.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-538-convert-bst-to-greater-tree"><a class="markdownIt-Anchor" href="#leetcode-q-538-convert-bst-to-greater-tree"></a> LeetCode Q 538 - Convert BST to Greater Tree</h1><p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p><p><strong>Example:</strong> <code>Input: [5, 2, 13] ; Output: [18, 20, 13]</code></p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight axapta"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> TreeNode convertBST(TreeNode root) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">  dfs(root);</span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> dfs(TreeNode n) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  dfs(n.right);</span><br><span class="line">  <span class="keyword">sum</span> += n.val;</span><br><span class="line">  n.val = <span class="keyword">sum</span>;</span><br><span class="line">  dfs(n.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-538-convert-bst-to-greater-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-538-convert-bst-to-greater-tree&quot;&gt;&lt;/a&gt; LeetCode Q 538 - Convert BST to Greater Tree&lt;/h1&gt;
&lt;p&gt;Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Input: [5, 2, 13] ; Output: [18, 20, 13]&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Diameter of Binary Tree</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ543/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ543/</id>
    <published>2019-08-07T19:55:05.000Z</published>
    <updated>2019-08-07T19:59:58.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-543-diameter-of-binary-tree"><a class="markdownIt-Anchor" href="#leetcode-q-543-diameter-of-binary-tree"></a> LeetCode Q 543 - Diameter of Binary Tree</h1><p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p><p><strong>Example:</strong> <code>input:[1,2,3,4,5]</code><br>Return 3, which is the length of the path <code>[4,2,1,3]</code> or <code>[5,2,1,3]</code>.</p><p><strong>Note:</strong> The length of path between two nodes is represented by the number of edges between them.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight angelscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> diameterOfBinaryTree(TreeNode root) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  dfs(root);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> dfs(TreeNode n) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">int</span> left = dfs(n.left), right = dfs(n.right);</span><br><span class="line">  res = Math.max(res, left + right);</span><br><span class="line">  <span class="keyword">return</span> Math.max(left, right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-543-diameter-of-binary-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-543-diameter-of-binary-tree&quot;&gt;&lt;/a&gt; LeetCode Q 543 - Diameter of Binary Tree&lt;/h1&gt;
&lt;p&gt;Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;input:[1,2,3,4,5]&lt;/code&gt;&lt;br&gt;
Return 3, which is the length of the path &lt;code&gt;[4,2,1,3]&lt;/code&gt; or &lt;code&gt;[5,2,1,3]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The length of path between two nodes is represented by the number of edges between them.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Tilt</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ563/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ563/</id>
    <published>2019-08-07T19:50:22.000Z</published>
    <updated>2019-08-07T19:54:29.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-563-binary-tree-tilt"><a class="markdownIt-Anchor" href="#leetcode-q-563-binary-tree-tilt"></a> LeetCode Q 563 - Binary Tree Tilt</h1><p>Given a binary tree, return the tilt of the whole tree.<br>The tilt of a tree node is defined as the absolute difference between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.<br>The tilt of the whole tree is defined as the sum of all nodes’ tilt.</p><p><strong>Example:</strong> <code>Input: [1, 2, 3] ; Output: 1</code><br>Explanation:<br>Tilt of node 2 : 0<br>Tilt of node 3 : 0<br>Tilt of node 1 : |2-3| = 1<br>Tilt of binary tree : 0 + 0 + 1 = 1</p><p><strong>Note:</strong></p><ul><li>The sum of node values in any subtree won’t exceed the range of 32-bit integer.</li><li>All the tilt values won’t exceed the range of 32-bit integer.</li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight vbscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> findTilt(TreeNode root) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) return <span class="number">0</span>;</span><br><span class="line">  dfs(root);</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> dfs(TreeNode root) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) return <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">int</span> <span class="built_in">left</span> = dfs(root.<span class="built_in">left</span>), <span class="built_in">right</span> = dfs(root.<span class="built_in">right</span>);</span><br><span class="line">  res += Math.<span class="built_in">abs</span>(<span class="built_in">left</span> - <span class="built_in">right</span>);</span><br><span class="line">  reutrn root.val + <span class="built_in">left</span> + <span class="built_in">right</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-563-binary-tree-tilt&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-563-binary-tree-tilt&quot;&gt;&lt;/a&gt; LeetCode Q 563 - Binary Tree Tilt&lt;/h1&gt;
&lt;p&gt;Given a binary tree, return the tilt of the whole tree.&lt;br&gt;
The tilt of a tree node is defined as the absolute difference between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.&lt;br&gt;
The tilt of the whole tree is defined as the sum of all nodes’ tilt.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;Input: [1, 2, 3] ; Output: 1&lt;/code&gt;&lt;br&gt;
Explanation:&lt;br&gt;
Tilt of node 2 : 0&lt;br&gt;
Tilt of node 3 : 0&lt;br&gt;
Tilt of node 1 : |2-3| = 1&lt;br&gt;
Tilt of binary tree : 0 + 0 + 1 = 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sum of node values in any subtree won’t exceed the range of 32-bit integer.&lt;/li&gt;
&lt;li&gt;All the tilt values won’t exceed the range of 32-bit integer.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Subtree of Another Tree</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ572/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ572/</id>
    <published>2019-08-07T19:25:31.000Z</published>
    <updated>2019-08-07T19:36:03.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-572-subtree-of-another-tree"><a class="markdownIt-Anchor" href="#leetcode-q-572-subtree-of-another-tree"></a> LeetCode Q 572 - Subtree of Another Tree</h1><p>Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node’s descendants. The tree s could also be considered as a subtree of itself.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight reasonml"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public boolean is<span class="constructor">Subtree(TreeNode <span class="params">s</span>, TreeNode <span class="params">t</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (s<span class="operator"> == </span>null<span class="operator"> &amp;&amp; </span>t<span class="operator"> == </span>null) return <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (s<span class="operator"> == </span>null<span class="operator"> || </span>t<span class="operator"> == </span>null) return <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (s.<span class="keyword">val</span><span class="operator"> == </span>t.<span class="keyword">val</span><span class="operator"> &amp;&amp; </span>is<span class="constructor">Same(<span class="params">s</span>, <span class="params">t</span>)</span>)</span><br><span class="line">    return <span class="literal">true</span>;</span><br><span class="line">  </span><br><span class="line">  return is<span class="constructor">Subtree(<span class="params">s</span>.<span class="params">left</span>, <span class="params">t</span>)</span><span class="operator"> || </span>is<span class="constructor">Subtree(<span class="params">s</span>.<span class="params">right</span>, <span class="params">t</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> boolean is<span class="constructor">Same(TreeNode <span class="params">s</span>, TreeNode <span class="params">t</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (s<span class="operator"> == </span>null<span class="operator"> &amp;&amp; </span>t<span class="operator"> == </span>null) return <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (s<span class="operator"> == </span>null<span class="operator"> || </span>t<span class="operator"> == </span>null<span class="operator"> || </span>s.<span class="keyword">val</span> != t.<span class="keyword">val</span>) return <span class="literal">false</span>;</span><br><span class="line">  return is<span class="constructor">Same(<span class="params">s</span>.<span class="params">left</span>, <span class="params">t</span>.<span class="params">left</span>)</span><span class="operator"> &amp;&amp; </span>is<span class="constructor">Same(<span class="params">s</span>.<span class="params">right</span>, <span class="params">t</span>.<span class="params">right</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-572-subtree-of-another-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-572-subtree-of-another-tree&quot;&gt;&lt;/a&gt; LeetCode Q 572 - Subtree of Another Tree&lt;/h1&gt;
&lt;p&gt;Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node’s descendants. The tree s could also be considered as a subtree of itself.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Coloring A Border</title>
    <link href="http://yoursite.com/2019/08/07/leetcodeQ1034/"/>
    <id>http://yoursite.com/2019/08/07/leetcodeQ1034/</id>
    <published>2019-08-07T18:06:33.000Z</published>
    <updated>2019-08-07T19:14:27.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1134-coloring-a-border"><a class="markdownIt-Anchor" href="#leetcode-q-1134-coloring-a-border"></a> LeetCode Q 1134 - Coloring A Border</h1><p>Given a 2-dimensional grid of integers, each value in the grid represents the color of the grid square at that location.<br>Two squares belong to the same connected component if and only if they <strong>have the same color</strong> and are <strong>next to each other in any of the 4 directions.</strong><br>The border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).<br>Given a square at location <code>(r0, c0)</code> in the grid and a color, color the border of the connected component of that square with the given color, and return the final grid.</p><p><strong>Example 1:</strong> <code>Input: grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3 ; Output: [[3, 3], [3, 2]]</code><br><strong>Example 2:</strong> <code>Input: grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3 ; Output: [[1, 3, 3], [2, 3, 3]]</code><br><strong>Example 3:</strong> <code>Input: grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2 ; Output: [[2, 2, 2], [2, 1, 2], [2, 2, 2]]</code></p><p><strong>Note:</strong></p><ul><li><code>1 &lt;= grid.length &lt;= 50</code></li><li><code>1 &lt;= grid[0].length &lt;= 50</code></li><li><code>1 &lt;= grid[i][j] &lt;= 1000</code></li><li><code>0 &lt;= r0 &lt; grid.length</code></li><li><code>0 &lt;= c0 &lt; grid[0].length</code></li><li><code>1 &lt;= color &lt;= 1000</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p>Step 1: Find borders and color them with <code>-color</code>;<br>Step 2: Color borders.</p><p><strong>Code:</strong></p><figure class="highlight markdown"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">private static final int[] DIRS = &#123;1, 0, -1, 0, 1&#125;;</span><br><span class="line">public int[<span class="string"></span>][<span class="symbol"></span>] colorBorder(int[<span class="string">\</span>][<span class="symbol"></span>] grid, int r0, int c0, int color) &#123;</span><br><span class="line">  dfs(grid, r0, c0, grid[<span class="string">r0\</span>][<span class="symbol">c0</span>]);</span><br><span class="line">  for (int r = 0; r <span class="xml"><span class="tag">&lt; <span class="attr">grid.length</span>; <span class="attr">r</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">    for (int c = 0; c <span class="tag">&lt; <span class="attr">grid</span>[<span class="attr">0</span>]<span class="attr">.length</span>; <span class="attr">c</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">      if (grid[r\][c] <span class="tag">&lt; <span class="attr">0</span>) <span class="attr">grid</span>[<span class="attr">r</span>\][<span class="attr">c</span>] = <span class="string">color;</span></span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  return grid;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">private void dfs(int[\][] grid, int r, int c, int color) &#123;</span></span><br><span class="line"><span class="xml">  if (r <span class="tag">&lt; <span class="attr">0</span> || <span class="attr">r</span> &gt;</span></span>= grid.length || c <span class="xml"><span class="tag">&lt; <span class="attr">0</span> || <span class="attr">c</span> &gt;</span></span>= grid[<span class="string">0</span>].length || grid[<span class="string">r\</span>][<span class="symbol">c</span>] != color) return;</span><br><span class="line"></span><br><span class="line">  grid[<span class="string">r</span>][<span class="symbol">c</span>] = -color;</span><br><span class="line">  for (int i = 0; i <span class="xml"><span class="tag">&lt; <span class="attr">4</span>; <span class="attr">i</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">    dfs(grid, r + DIRS[i], c + DIRS[i + 1], color);</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  if ( r &gt;</span> 0 &amp;&amp; r <span class="xml"><span class="tag">&lt; <span class="attr">grid.length</span> <span class="attr">-</span> <span class="attr">1</span> &amp;&amp; <span class="attr">c</span> &gt;</span></span> 0 &amp;&amp; c <span class="xml"><span class="tag">&lt; <span class="attr">grid</span>[<span class="attr">0</span>]<span class="attr">.length</span> <span class="attr">-</span> <span class="attr">1</span></span></span></span><br><span class="line"><span class="xml">    &amp;&amp; color = Math.abs(grid[r - 1][c]) &amp;&amp; color = Math.abs(grid[r + 1][c])</span></span><br><span class="line"><span class="xml">    &amp;&amp; color = Math.abs(grid[r][c - 1]) &amp;&amp; color = Math.abs(grid[r][c + 1]))</span></span><br><span class="line"><span class="xml">    grid[r][c] = color;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1134-coloring-a-border&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1134-coloring-a-border&quot;&gt;&lt;/a&gt; LeetCode Q 1134 - Coloring A Border&lt;/h1&gt;
&lt;p&gt;Given a 2-dimensional grid of integers, each value in the grid represents the color of the grid square at that location.&lt;br&gt;
Two squares belong to the same connected component if and only if they &lt;strong&gt;have the same color&lt;/strong&gt; and are &lt;strong&gt;next to each other in any of the 4 directions.&lt;/strong&gt;&lt;br&gt;
The border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).&lt;br&gt;
Given a square at location &lt;code&gt;(r0, c0)&lt;/code&gt; in the grid and a color, color the border of the connected component of that square with the given color, and return the final grid.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3 ; Output: [[3, 3], [3, 2]]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3 ; Output: [[1, 3, 3], [2, 3, 3]]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2 ; Output: [[2, 2, 2], [2, 1, 2], [2, 2, 2]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= grid.length &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= grid[0].length &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= grid[i][j] &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= r0 &amp;lt; grid.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= c0 &amp;lt; grid[0].length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= color &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Minimum Cost Tree From Leaf Values</title>
    <link href="http://yoursite.com/2019/08/05/leetcodeQ1130/"/>
    <id>http://yoursite.com/2019/08/05/leetcodeQ1130/</id>
    <published>2019-08-05T14:22:00.000Z</published>
    <updated>2019-08-07T18:07:07.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1130-minimum-cost-tree-from-leaf-values"><a class="markdownIt-Anchor" href="#leetcode-q-1130-minimum-cost-tree-from-leaf-values"></a> LeetCode Q 1130 - Minimum Cost Tree From Leaf Values</h1><p>Given an array arr of positive integers, consider all binary trees such that:</p><ul><li>Each node has either 0 or 2 children;</li><li>The values of arr correspond to the values of each leaf in an in-order traversal of the tree.  (Recall that a node is a leaf if and only if it has 0 children.)</li><li>The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.</li></ul><p>Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node.  It is guaranteed this sum fits into a 32-bit integer.</p><p><strong>Example 1:</strong> <code>Input: arr = [6,2,4] ; Output: 32</code><br>Explanation: There are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32.</p><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= arr.length &lt;= 40</code></li><li><code>1 &lt;= arr[i] &lt;= 15</code></li><li>It is guaranteed that the answer fits into a <code>32-bit</code> signed integer (ie. it is less than <code>2^31</code>).</li></ul><a id="more"></a><h2 id="solution-greedy"><a class="markdownIt-Anchor" href="#solution-greedy"></a> Solution: Greedy</h2><p>Each time we pick locally maxinum value. And then recursivly call the helper method. Since we watn to greedily combine the smaller elements and then combine them with larger number at last.</p><p><strong>Code:</strong></p><figure class="highlight angelscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> mctFromLeafValues(<span class="built_in">int</span>[] arr) &#123;</span><br><span class="line">  dfs(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> dfs(<span class="built_in">int</span>[] arr, <span class="built_in">int</span> low, <span class="built_in">int</span> high) &#123;</span><br><span class="line">  <span class="keyword">if</span> (low &gt; high) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (low == high) <span class="keyword">return</span> arr[low];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (low + <span class="number">1</span> == high) &#123;</span><br><span class="line">    res += arr[low] * arr[high];</span><br><span class="line">    <span class="keyword">return</span> Math.max(arr[low], arr[high]);</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> maxIndex = low;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = low; i &lt;= high; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[maxIndex])</span><br><span class="line">      maxIndex = i;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">int</span> left = backtrack(arr, low, maxIndex - <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">int</span> right = backtrack(arr, maxIndex + <span class="number">1</span>, high);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (left != <span class="number">0</span>) res += left * arr[maxIndex];</span><br><span class="line">  <span class="keyword">if</span> (right != <span class="number">0</span>) res += right * arr[maxIndex];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1130-minimum-cost-tree-from-leaf-values&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1130-minimum-cost-tree-from-leaf-values&quot;&gt;&lt;/a&gt; LeetCode Q 1130 - Minimum Cost Tree From Leaf Values&lt;/h1&gt;
&lt;p&gt;Given an array arr of positive integers, consider all binary trees such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each node has either 0 or 2 children;&lt;/li&gt;
&lt;li&gt;The values of arr correspond to the values of each leaf in an in-order traversal of the tree.  (Recall that a node is a leaf if and only if it has 0 children.)&lt;/li&gt;
&lt;li&gt;The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node.  It is guaranteed this sum fits into a 32-bit integer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: arr = [6,2,4] ; Output: 32&lt;/code&gt;&lt;br&gt;
Explanation: There are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= arr.length &amp;lt;= 40&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= arr[i] &amp;lt;= 15&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It is guaranteed that the answer fits into a &lt;code&gt;32-bit&lt;/code&gt; signed integer (ie. it is less than &lt;code&gt;2^31&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Greedy" scheme="http://yoursite.com/tags/Greedy/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Shortest Path with Alternating Colors</title>
    <link href="http://yoursite.com/2019/08/05/leetcodeQ1129/"/>
    <id>http://yoursite.com/2019/08/05/leetcodeQ1129/</id>
    <published>2019-08-05T13:50:10.000Z</published>
    <updated>2019-08-05T14:21:21.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1128-shortest-path-with-alternating-colors"><a class="markdownIt-Anchor" href="#leetcode-q-1128-shortest-path-with-alternating-colors"></a> LeetCode Q 1128 - Shortest Path with Alternating Colors</h1><p>Consider a directed graph, with nodes labelled <code>0, 1, ..., n-1</code>.  In this graph, each edge is either <em>red</em> or <em>blue</em>, and there could be self-edges or parallel edges.<br>Each <code>[i, j]</code> in <em>red_edges</em> denotes a <em>red</em> directed edge from node <code>i</code> to node <code>j</code>.  Similarly, each <code>[i, j]</code> in <em>blue_edges</em> denotes a <em>blue</em> directed edge from node <code>i</code> to node <code>j</code>.<br>Return an array answer of length <code>n</code>, where each <code>answer[X]</code> is the length of the <strong>shortest path</strong> from node 0 to node <code>X</code> such that the edge colors alternate along the path (or <code>-1</code> if such a path doesn’t exist).</p><p><strong>Example 1:</strong> <code>Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = [] ; Output: [0,1,-1]</code><br><strong>Example 2:</strong> <code>Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]] ; Output: [0,1,-1]</code><br><strong>Example 3:</strong> <code>Input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]] ; Output: [0,-1,-1]</code><br><strong>Example 4:</strong> <code>Input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]] ; Output: [0,1,2]</code><br><strong>Example 5:</strong> <code>Input: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]] ; Output: [0,1,1]</code></p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 100</code></li><li><code>red_edges.length &lt;= 400</code></li><li><code>blue_edges.length &lt;= 400</code></li><li><code>red_edges[i].length == blue_edges[i].length == 2</code></li><li><code>0 &lt;= red_edges[i][j], blue_edges[i][j] &lt; n</code></li></ul><a id="more"></a><h2 id="solution-bfs-choose-next-node-from-map-with-different-color"><a class="markdownIt-Anchor" href="#solution-bfs-choose-next-node-from-map-with-different-color"></a> Solution: BFS, choose next node from map with different color.</h2><p><strong>Code:</strong></p><figure class="highlight processing"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> RED = <span class="number">1</span>, BLUE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span>[] shortestAlternatingPaths(<span class="built_in">int</span> n, <span class="built_in">int</span>[\][] red_edges, <span class="built_in">int</span>[\][] blue_edges) &#123;</span><br><span class="line">  </span><br><span class="line">  Map&lt;Integer, Set&lt;Integer&gt;&gt; redMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">  Map&lt;Integer, Set&lt;Integer&gt;&gt; blueMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    redMap.put(i, <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">    blueMap.put(i, <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> re: red_edges) &#123;</span><br><span class="line">    redMap.<span class="built_in">get</span>(re[<span class="number">0</span>]).<span class="built_in">add</span>(re[<span class="number">1</span>]);</span><br><span class="line">    redMap.<span class="built_in">get</span>(re[<span class="number">1</span>]).<span class="built_in">add</span>(re[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> be: blue_edges) &#123;</span><br><span class="line">    blueMap.<span class="built_in">get</span>(be[<span class="number">0</span>]).<span class="built_in">add</span>(be[<span class="number">1</span>]);</span><br><span class="line">    blueMap.<span class="built_in">get</span>(be[<span class="number">1</span>]).<span class="built_in">add</span>(be[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span>[] res = <span class="keyword">new</span> <span class="built_in">int</span>[n];</span><br><span class="line">  Arrays.<span class="built_in">fill</span>(res, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">  Queue&lt;<span class="built_in">int</span>[]&gt; que = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// node, color (1: red, 2: blue)</span></span><br><span class="line">  que.offer(<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;); que.offer(<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">  <span class="built_in">int</span> <span class="built_in">dist</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  Set&lt;<span class="keyword">String</span>&gt; seen = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">size</span> = que.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">int</span>[] curr = que.poll();</span><br><span class="line">      <span class="built_in">int</span> node = curr[<span class="number">0</span>], <span class="built_in">color</span> = curr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (seen.contains(node+<span class="string">" "</span>+<span class="built_in">color</span>)) <span class="keyword">continue</span>;</span><br><span class="line">      seen.<span class="built_in">add</span>(node + <span class="string">" "</span> + <span class="built_in">color</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (res[node] == <span class="number">-1</span>) res[node] = <span class="built_in">dist</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">color</span> == RED || <span class="built_in">color</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> next: blueMap.<span class="built_in">get</span>(<span class="built_in">color</span>)) &#123;</span><br><span class="line">          que.offer(<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;next, BLUE&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">color</span> == BLUE || <span class="built_in">color</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> next: redMap.<span class="built_in">get</span>(<span class="built_in">color</span>)) &#123;</span><br><span class="line">          que.offer(<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;next, RED&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dist</span>++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1128-shortest-path-with-alternating-colors&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1128-shortest-path-with-alternating-colors&quot;&gt;&lt;/a&gt; LeetCode Q 1128 - Shortest Path with Alternating Colors&lt;/h1&gt;
&lt;p&gt;Consider a directed graph, with nodes labelled &lt;code&gt;0, 1, ..., n-1&lt;/code&gt;.  In this graph, each edge is either &lt;em&gt;red&lt;/em&gt; or &lt;em&gt;blue&lt;/em&gt;, and there could be self-edges or parallel edges.&lt;br&gt;
Each &lt;code&gt;[i, j]&lt;/code&gt; in &lt;em&gt;red_edges&lt;/em&gt; denotes a &lt;em&gt;red&lt;/em&gt; directed edge from node &lt;code&gt;i&lt;/code&gt; to node &lt;code&gt;j&lt;/code&gt;.  Similarly, each &lt;code&gt;[i, j]&lt;/code&gt; in &lt;em&gt;blue_edges&lt;/em&gt; denotes a &lt;em&gt;blue&lt;/em&gt; directed edge from node &lt;code&gt;i&lt;/code&gt; to node &lt;code&gt;j&lt;/code&gt;.&lt;br&gt;
Return an array answer of length &lt;code&gt;n&lt;/code&gt;, where each &lt;code&gt;answer[X]&lt;/code&gt; is the length of the &lt;strong&gt;shortest path&lt;/strong&gt; from node 0 to node &lt;code&gt;X&lt;/code&gt; such that the edge colors alternate along the path (or &lt;code&gt;-1&lt;/code&gt; if such a path doesn’t exist).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = [] ; Output: [0,1,-1]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]] ; Output: [0,1,-1]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]] ; Output: [0,-1,-1]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 4:&lt;/strong&gt; &lt;code&gt;Input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]] ; Output: [0,1,2]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 5:&lt;/strong&gt; &lt;code&gt;Input: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]] ; Output: [0,1,1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;red_edges.length &amp;lt;= 400&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blue_edges.length &amp;lt;= 400&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;red_edges[i].length == blue_edges[i].length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= red_edges[i][j], blue_edges[i][j] &amp;lt; n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="Graph" scheme="http://yoursite.com/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>Number of Equivalent Domino Pairs</title>
    <link href="http://yoursite.com/2019/08/05/leetcodeQ1128/"/>
    <id>http://yoursite.com/2019/08/05/leetcodeQ1128/</id>
    <published>2019-08-05T13:27:59.000Z</published>
    <updated>2019-08-05T13:49:18.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-1128-number-of-equivalent-domino-pairs"><a class="markdownIt-Anchor" href="#leetcode-q-1128-number-of-equivalent-domino-pairs"></a> LeetCode Q 1128 - Number of Equivalent Domino Pairs</h1><p>Given a list of dominoes, <code>dominoes[i] = [a, b]</code> is equivalent to <code>dominoes[j] = [c, d]</code> if and only if either (<code>a==c</code> and <code>b==d</code>), or (<code>a==d</code> and <code>b==c</code>) - that is, one domino can be rotated to be equal to another domino.<br>Return the number of pairs <code>(i, j)</code> for which <code>0 &lt;= i &lt; j &lt; dominoes.length</code>, and <code>dominoes[i]</code> is equivalent to dominoes[j].</p><p><strong>Example 1:</strong> <code>Input: dominoes = [[1,2],[2,1],[3,4],[5,6]] ; Output: 1</code></p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= dominoes.length &lt;= 40000</code></li><li><code>1 &lt;= dominoes[i][j] &lt;= 9</code></li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><ul><li>Traverse the dominoes array, count the number of same pairs.</li><li>Use <strong><a href="https://en.wikipedia.org/wiki/Combination" target="_blank" rel="noopener">Combination</a></strong> to get the result.</li></ul><p><strong>Code:</strong></p><figure class="highlight processing"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> numEquivDominoPairs(<span class="built_in">int</span>[][] dominoes) &#123;</span><br><span class="line">  Map&lt;Integer, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> d: dominoes) &#123;</span><br><span class="line">    <span class="built_in">int</span> a = d[<span class="number">0</span>], b = d[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">key</span> = Math.<span class="built_in">max</span>(a, b) * <span class="number">10</span> + Math.<span class="built_in">min</span>(a, b);</span><br><span class="line">    <span class="built_in">map</span>.put(<span class="built_in">key</span>, <span class="built_in">map</span>.getOrDefault(<span class="built_in">key</span>, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> <span class="built_in">key</span>: <span class="built_in">map</span>.keySet()) &#123;</span><br><span class="line">    <span class="built_in">int</span> v = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">    res += v * (v - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-1128-number-of-equivalent-domino-pairs&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-1128-number-of-equivalent-domino-pairs&quot;&gt;&lt;/a&gt; LeetCode Q 1128 - Number of Equivalent Domino Pairs&lt;/h1&gt;
&lt;p&gt;Given a list of dominoes, &lt;code&gt;dominoes[i] = [a, b]&lt;/code&gt; is equivalent to &lt;code&gt;dominoes[j] = [c, d]&lt;/code&gt; if and only if either (&lt;code&gt;a==c&lt;/code&gt; and &lt;code&gt;b==d&lt;/code&gt;), or (&lt;code&gt;a==d&lt;/code&gt; and &lt;code&gt;b==c&lt;/code&gt;) - that is, one domino can be rotated to be equal to another domino.&lt;br&gt;
Return the number of pairs &lt;code&gt;(i, j)&lt;/code&gt; for which &lt;code&gt;0 &amp;lt;= i &amp;lt; j &amp;lt; dominoes.length&lt;/code&gt;, and &lt;code&gt;dominoes[i]&lt;/code&gt; is equivalent to dominoes[j].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: dominoes = [[1,2],[2,1],[3,4],[5,6]] ; Output: 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= dominoes.length &amp;lt;= 40000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= dominoes[i][j] &amp;lt;= 9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Binary Tree</title>
    <link href="http://yoursite.com/2019/07/25/leetcodeQ654/"/>
    <id>http://yoursite.com/2019/07/25/leetcodeQ654/</id>
    <published>2019-07-25T20:42:06.000Z</published>
    <updated>2019-07-25T20:54:58.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-654-maximum-binary-tree"><a class="markdownIt-Anchor" href="#leetcode-q-654-maximum-binary-tree"></a> LeetCode Q 654 - Maximum Binary Tree</h1><p>Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:</p><ul><li>The root is the maximum number in the array.</li><li>The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.</li><li>The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.<br>Construct the maximum tree by the given array and output the root node of this tree.</li></ul><p><strong>Example 1:</strong> <code>Input: [3,2,1,6,0,5] ; Output: return the tree root node representing the following tree: [6, 3, 5, null, 2, 0, null, null, null, null, 1]</code></p><p><strong>Note:</strong> The size of the given array will be in the range [1,1000].</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><h2 id="solution-1-recursion"><a class="markdownIt-Anchor" href="#solution-1-recursion"></a> Solution 1: Recursion</h2><p><strong>Code:</strong></p><figure class="highlight vbscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode constructMaximumBinaryTree(<span class="built_in">int</span>[] nums) &#123;</span><br><span class="line">  return dfs(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode dfs(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> <span class="built_in">left</span>, <span class="built_in">int</span> <span class="built_in">right</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">left</span> &gt; <span class="built_in">right</span>) return <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">left</span> == <span class="built_in">right</span>) return <span class="keyword">new</span> TreeNode(nums[<span class="built_in">left</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> maxIndex = <span class="built_in">left</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="built_in">left</span>; i &lt;= <span class="built_in">right</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] &gt; nums[maxIndex]) maxIndex = i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TreeNode n = <span class="keyword">new</span> TreeNode(nums[maxIndex]);</span><br><span class="line">  n.<span class="built_in">left</span> = dfs(nums, <span class="built_in">left</span>, maxIndex - <span class="number">1</span>);</span><br><span class="line">  n.<span class="built_in">left</span> = dfs(nums, maxIndex + <span class="number">1</span>, <span class="built_in">right</span>);</span><br><span class="line"></span><br><span class="line">  return n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="solution-2-iteration-monotonous-stack"><a class="markdownIt-Anchor" href="#solution-2-iteration-monotonous-stack"></a> Solution 2: Iteration (Monotonous Stack)</h2><p><strong>Code:</strong></p><figure class="highlight cpp"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">constructMaximumBinaryTree</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">  Deque&lt;TreeNode&gt; <span class="built_in">stack</span> = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) &#123;</span><br><span class="line">    TreeNode curr = <span class="keyword">new</span> TreeNode(num);</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">stack</span>.isEmpty() &amp;&amp; <span class="built_in">stack</span>.peek().val &lt; num) &#123;</span><br><span class="line">      curr.left = <span class="built_in">stack</span>.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty()) <span class="built_in">stack</span>.peek().right = curr;</span><br><span class="line">    <span class="built_in">stack</span>.push(curr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">stack</span>.removeLast();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-654-maximum-binary-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-654-maximum-binary-tree&quot;&gt;&lt;/a&gt; LeetCode Q 654 - Maximum Binary Tree&lt;/h1&gt;
&lt;p&gt;Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The root is the maximum number in the array.&lt;/li&gt;
&lt;li&gt;The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.&lt;/li&gt;
&lt;li&gt;The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.&lt;br&gt;
Construct the maximum tree by the given array and output the root node of this tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: [3,2,1,6,0,5] ; Output: return the tree root node representing the following tree: [6, 3, 5, null, 2, 0, null, null, null, null, 1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The size of the given array will be in the range [1,1000].&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Monotonous Stack" scheme="http://yoursite.com/tags/Monotonous-Stack/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Width of Binary Tree</title>
    <link href="http://yoursite.com/2019/07/25/leetcodeQ662/"/>
    <id>http://yoursite.com/2019/07/25/leetcodeQ662/</id>
    <published>2019-07-25T20:14:20.000Z</published>
    <updated>2019-08-07T21:44:05.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-662-maximum-width-of-binary-tree"><a class="markdownIt-Anchor" href="#leetcode-q-662-maximum-width-of-binary-tree"></a> LeetCode Q 662- Maximum Width of Binary Tree</h1><p>Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.</p><p>The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.</p><p><strong>Example 1:</strong> <code>Input:[1, 3, 2, 5, 3, null, 9] ; Output: 4</code><br>Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).<br><strong>Example 2:</strong> <code>Input:[1,3,null,5,3] ; Output: 2</code><br>Explanation: The maximum width existing in the third level with the length 2 (5,3).<br><strong>Example 3:</strong> <code>Input: [1,3,2,5] ; Output: 2</code><br>Explanation: The maximum width existing in the second level with the length 2 (3,2).</p><p><strong>Note:</strong> Answer will in the range of 32-bit signed integer.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p>We enhance the node TreeNode with an index, indicating its position in a layer. We do the BFS traversing the tree from layer to layer. On each layer, find the difference between indexes of the left most not-null node and right most not-null node. If we cannot find a not-null node, we finish our traverse.</p><p><strong>Code:</strong></p><figure class="highlight reasonml"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Pair &#123;</span><br><span class="line">  <span class="built_in">int</span> index;</span><br><span class="line">  TreeNode node;</span><br><span class="line">  public <span class="constructor">Pair(TreeNode <span class="params">node</span>, <span class="params">int</span> <span class="params">index</span>)</span> &#123;</span><br><span class="line">    this.index = index; this.node = node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">public <span class="built_in">int</span> width<span class="constructor">OfBinaryTree(TreeNode <span class="params">root</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  Queue&lt;Pair&gt; que = <span class="keyword">new</span> LinkedList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">  que.offer(<span class="keyword">new</span> <span class="constructor">Pair(<span class="params">root</span>, 0)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!que.is<span class="constructor">Empty()</span>) &#123;</span><br><span class="line">    <span class="built_in">int</span> left = -<span class="number">1</span>, right = -<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> size = que.size<span class="literal">()</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">      Pair p = que.poll<span class="literal">()</span>;</span><br><span class="line">      <span class="keyword">if</span> (p.node<span class="operator"> == </span>null) continue;</span><br><span class="line">      <span class="keyword">if</span> (left<span class="operator"> == </span>-<span class="number">1</span>) left = p.index;</span><br><span class="line">      right = p.index;</span><br><span class="line">      que.offer(<span class="keyword">new</span> <span class="constructor">Pair(<span class="params">p</span>.<span class="params">node</span>.<span class="params">left</span>, 2 <span class="operator">*</span> <span class="params">index</span>)</span>);</span><br><span class="line">      que.offer(<span class="keyword">new</span> <span class="constructor">Pair(<span class="params">p</span>.<span class="params">node</span>.<span class="params">right</span>, 2 <span class="operator">*</span> <span class="params">index</span> + 1)</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left<span class="operator"> == </span>-<span class="number">1</span>) break;</span><br><span class="line">    res = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(res, right - left + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-662-maximum-width-of-binary-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-662-maximum-width-of-binary-tree&quot;&gt;&lt;/a&gt; LeetCode Q 662- Maximum Width of Binary Tree&lt;/h1&gt;
&lt;p&gt;Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.&lt;/p&gt;
&lt;p&gt;The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input:[1, 3, 2, 5, 3, null, 9] ; Output: 4&lt;/code&gt;&lt;br&gt;
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input:[1,3,null,5,3] ; Output: 2&lt;/code&gt;&lt;br&gt;
Explanation: The maximum width existing in the third level with the length 2 (5,3).&lt;br&gt;
&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;code&gt;Input: [1,3,2,5] ; Output: 2&lt;/code&gt;&lt;br&gt;
Explanation: The maximum width existing in the second level with the length 2 (3,2).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Answer will in the range of 32-bit signed integer.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Trim a Binary Search Tree</title>
    <link href="http://yoursite.com/2019/07/25/leetcodeQ669/"/>
    <id>http://yoursite.com/2019/07/25/leetcodeQ669/</id>
    <published>2019-07-25T20:04:24.000Z</published>
    <updated>2019-07-25T20:07:33.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-669-trim-a-binary-search-tree"><a class="markdownIt-Anchor" href="#leetcode-q-669-trim-a-binary-search-tree"></a> LeetCode Q 669- Trim a Binary Search Tree</h1><p>Given a binary search tree and the lowest and highest boundaries as <code>L</code> and <code>R</code>, trim the tree so that all its elements lies in <code>[L, R] (R &gt;= L)</code>. You might need to change the root of the tree, so the result should return the new root of the trimmed binary search tree.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight reasonml"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public TreeNode trim<span class="constructor">BST(TreeNode <span class="params">root</span>, <span class="params">int</span> L, <span class="params">int</span> R)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (root<span class="operator"> == </span>null) return root;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root.<span class="keyword">val</span> &lt; L) return trim<span class="constructor">BST(<span class="params">root</span>.<span class="params">right</span>, L, R)</span>;</span><br><span class="line">  <span class="keyword">if</span> (root.<span class="keyword">val</span> &gt; R) return trim<span class="constructor">BST(<span class="params">root</span>.<span class="params">left</span>, L, R)</span>;</span><br><span class="line"></span><br><span class="line">  root.left = trim<span class="constructor">BST(<span class="params">root</span>.<span class="params">left</span>, L, R)</span>;</span><br><span class="line">  root.right = trim<span class="constructor">BST(<span class="params">root</span>.<span class="params">right</span>, L, R)</span>;</span><br><span class="line"></span><br><span class="line">  return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-669-trim-a-binary-search-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-669-trim-a-binary-search-tree&quot;&gt;&lt;/a&gt; LeetCode Q 669- Trim a Binary Search Tree&lt;/h1&gt;
&lt;p&gt;Given a binary search tree and the lowest and highest boundaries as &lt;code&gt;L&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt;, trim the tree so that all its elements lies in &lt;code&gt;[L, R] (R &amp;gt;= L)&lt;/code&gt;. You might need to change the root of the tree, so the result should return the new root of the trimmed binary search tree.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="BST" scheme="http://yoursite.com/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>Second Minimum Node In a Binary Tree</title>
    <link href="http://yoursite.com/2019/07/25/leetcodeQ671/"/>
    <id>http://yoursite.com/2019/07/25/leetcodeQ671/</id>
    <published>2019-07-25T20:01:31.000Z</published>
    <updated>2019-07-25T20:08:10.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-671-second-minimum-node-in-a-binary-tree"><a class="markdownIt-Anchor" href="#leetcode-q-671-second-minimum-node-in-a-binary-tree"></a> LeetCode Q 671- Second Minimum Node In a Binary Tree</h1><p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node’s value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.<br>Given such a binary tree, you need to output the second minimum value in the set made of all the nodes’ value in the whole tree.<br>If no such second minimum value exists, output -1 instead.</p><p><strong>Example 1:</strong> <code>Input: [2, 2, 5, null, null, 5, 7] ; Output: 5</code><br>Explanation: The smallest value is 2, the second smallest value is 5.<br><strong>Example 2:</strong> <code>Input: [2, 2, 2] ; Output: -1</code><br>Explanation: The smallest value is 2, but there isn’t any second smallest value.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight xquery"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Integer<span class="built_in"> min</span>, seMin;</span><br><span class="line">public int findSecondMinimumValue(TreeNode<span class="built_in"> root</span>) &#123;</span><br><span class="line">  dfs<span class="built_in">(root</span>);</span><br><span class="line">  <span class="keyword">return</span> seMin == null ? -<span class="number">1</span> : seMin;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">private void dfs (TreeNode<span class="built_in"> root</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">(root</span> == null) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">(min</span> == null) &#123;</span><br><span class="line">   <span class="built_in"> min</span> =<span class="built_in"> root</span>.val;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">(root</span>.val &lt;<span class="built_in"> min</span>) &#123;</span><br><span class="line">    seMin =<span class="built_in"> min</span>;</span><br><span class="line">   <span class="built_in"> min</span> =<span class="built_in"> root</span>.val;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((seMin == null &amp;&amp;<span class="built_in"> root</span>.val !=<span class="built_in"> min</span>) || </span><br><span class="line">             (seMin != null &amp;&amp;<span class="built_in"> root</span>.val &lt; seMin &amp;&amp;<span class="built_in"> root</span>.val !=<span class="built_in"> min</span>)) &#123;</span><br><span class="line">    seMin =<span class="built_in"> root</span>.val;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  dfs<span class="built_in">(root</span>.left);</span><br><span class="line">  dfs<span class="built_in">(root</span>.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-671-second-minimum-node-in-a-binary-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-671-second-minimum-node-in-a-binary-tree&quot;&gt;&lt;/a&gt; LeetCode Q 671- Second Minimum Node In a Binary Tree&lt;/h1&gt;
&lt;p&gt;Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node’s value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.&lt;br&gt;
Given such a binary tree, you need to output the second minimum value in the set made of all the nodes’ value in the whole tree.&lt;br&gt;
If no such second minimum value exists, output -1 instead.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: [2, 2, 5, null, null, 5, 7] ; Output: 5&lt;/code&gt;&lt;br&gt;
Explanation: The smallest value is 2, the second smallest value is 5.&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: [2, 2, 2] ; Output: -1&lt;/code&gt;&lt;br&gt;
Explanation: The smallest value is 2, but there isn’t any second smallest value.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Longest Univalue Path</title>
    <link href="http://yoursite.com/2019/07/25/leetcodeQ687/"/>
    <id>http://yoursite.com/2019/07/25/leetcodeQ687/</id>
    <published>2019-07-25T19:47:03.000Z</published>
    <updated>2019-07-25T20:08:17.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-687-longest-univalue-path"><a class="markdownIt-Anchor" href="#leetcode-q-687-longest-univalue-path"></a> LeetCode Q 687- Longest Univalue Path</h1><p>Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.<br>The length of path between two nodes is represented by the number of edges between them.</p><p><strong>Example 1:</strong> <code>Input: [5,4,5,1,1,null,5] ; Output: 2</code><br><strong>Example 2:</strong> <code>Input: [1,4,5,4,4,null,5] ; Output: 2</code></p><p><strong>Note:</strong> The given binary tree has not more than 10000 nodes. The height of the tree is not more than 1000.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight angelscript"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> longestUnivaluePath(TreeNode root) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">  dfs(root);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> dfs(TreeNode root) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> maxLen = <span class="number">0</span>, len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> l = dfs(root.left), r = dfs(root.right);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root.left != <span class="literal">null</span> &amp;&amp; root.val == root.left.val) &#123;</span><br><span class="line">    maxLen += l + <span class="number">1</span>; len = l + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root.right != <span class="literal">null</span> &amp;&amp; root.val == root.right.val) &#123;</span><br><span class="line">    maxLen += r + <span class="number">1</span>; len = Math.max(len, r + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res = Math.max(res, maxLen);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-687-longest-univalue-path&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-687-longest-univalue-path&quot;&gt;&lt;/a&gt; LeetCode Q 687- Longest Univalue Path&lt;/h1&gt;
&lt;p&gt;Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.&lt;br&gt;
The length of path between two nodes is represented by the number of edges between them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: [5,4,5,1,1,null,5] ; Output: 2&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: [1,4,5,4,4,null,5] ; Output: 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The given binary tree has not more than 10000 nodes. The height of the tree is not more than 1000.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Lowest Common Ancestor of a Binary Search Tree</title>
    <link href="http://yoursite.com/2019/07/25/leetcodeQ235/"/>
    <id>http://yoursite.com/2019/07/25/leetcodeQ235/</id>
    <published>2019-07-25T19:39:06.000Z</published>
    <updated>2019-07-25T19:43:06.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-235-lowest-common-ancestor-of-a-binary-search-tree"><a class="markdownIt-Anchor" href="#leetcode-q-235-lowest-common-ancestor-of-a-binary-search-tree"></a> LeetCode Q 235- Lowest Common Ancestor of a Binary Search Tree</h1><p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.<br>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”</p><p><strong>Example 1:</strong> <code>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 ; Output: 6</code><br>Explanation: The LCA of nodes 2 and 8 is 6.<br><strong>Example 2:</strong> <code>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 ; Output: 2</code><br>Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.</p><p><strong>Note:</strong></p><ul><li>All of the nodes’ values will be unique.</li><li>p and q are different and both values will exist in the BST.</li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code:</strong></p><figure class="highlight kotlin"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (p.<span class="keyword">val</span> &gt; q.<span class="keyword">val</span>) <span class="keyword">return</span> lowestCommonAncestor(root, q, p);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!(root.<span class="keyword">val</span> &gt; p.<span class="keyword">val</span> &amp;&amp; root.<span class="keyword">val</span> &lt; q.<span class="keyword">val</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root.<span class="keyword">val</span> &lt; p.<span class="keyword">val</span>) root = root.right;</span><br><span class="line">    <span class="keyword">if</span> (root.<span class="keyword">val</span> &gt; q.<span class="keyword">val</span>) root = root.left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-235-lowest-common-ancestor-of-a-binary-search-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-235-lowest-common-ancestor-of-a-binary-search-tree&quot;&gt;&lt;/a&gt; LeetCode Q 235- Lowest Common Ancestor of a Binary Search Tree&lt;/h1&gt;
&lt;p&gt;Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.&lt;br&gt;
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;code&gt;Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 ; Output: 6&lt;/code&gt;&lt;br&gt;
Explanation: The LCA of nodes 2 and 8 is 6.&lt;br&gt;
&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;code&gt;Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 ; Output: 2&lt;/code&gt;&lt;br&gt;
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All of the nodes’ values will be unique.&lt;/li&gt;
&lt;li&gt;p and q are different and both values will exist in the BST.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="BST" scheme="http://yoursite.com/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>Insert into a Binary Search Tree</title>
    <link href="http://yoursite.com/2019/07/25/leetcodeQ701/"/>
    <id>http://yoursite.com/2019/07/25/leetcodeQ701/</id>
    <published>2019-07-25T19:06:17.000Z</published>
    <updated>2019-07-25T19:20:45.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-701-insert-into-a-binary-search-tree"><a class="markdownIt-Anchor" href="#leetcode-q-701-insert-into-a-binary-search-tree"></a> LeetCode Q 701 - Insert into a Binary Search Tree</h1><p>Given the root node of a binary search tree (BST) and a value to be inserted into the tree, insert the value into the BST. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.</p><p>Note that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.</p><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code: Recursion</strong></p><figure class="highlight reasonml"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public TreeNode insert<span class="constructor">IntoBST(TreeNode <span class="params">root</span>, <span class="params">int</span> <span class="params">val</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (root<span class="operator"> == </span>null) return <span class="keyword">new</span> <span class="constructor">TreeNode(<span class="params">val</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root.<span class="keyword">val</span> &gt; <span class="keyword">val</span>) root.left = insert<span class="constructor">IntoBST(<span class="params">root</span>.<span class="params">left</span>, <span class="params">val</span>)</span>;</span><br><span class="line">  <span class="keyword">if</span> (root.<span class="keyword">val</span> &lt; <span class="keyword">val</span>) root.right = insert<span class="constructor">IntoBST(<span class="params">root</span>.<span class="params">right</span>, <span class="params">val</span>)</span>;</span><br><span class="line"></span><br><span class="line">  return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Code: Iteration</strong></p><figure class="highlight kotlin"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode insertIntoBST(TreeNode root, int <span class="keyword">val</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> new TreeNode(<span class="keyword">val</span>);</span><br><span class="line">  </span><br><span class="line">  TreeNode n = new TreeNode(<span class="keyword">val</span>);</span><br><span class="line">  </span><br><span class="line">  TreeNode curr = root;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (curr.<span class="keyword">val</span> &lt; <span class="keyword">val</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (curr.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        curr = curr.right;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        curr.right = n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (curr.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        curr = curr.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        curr.left = n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-701-insert-into-a-binary-search-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-701-insert-into-a-binary-search-tree&quot;&gt;&lt;/a&gt; LeetCode Q 701 - Insert into a Binary Search Tree&lt;/h1&gt;
&lt;p&gt;Given the root node of a binary search tree (BST) and a value to be inserted into the tree, insert the value into the BST. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.&lt;/p&gt;
&lt;p&gt;Note that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="BST" scheme="http://yoursite.com/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>Minimum Distance Between BST Nodes</title>
    <link href="http://yoursite.com/2019/07/25/leetcodeQ783/"/>
    <id>http://yoursite.com/2019/07/25/leetcodeQ783/</id>
    <published>2019-07-25T18:54:15.000Z</published>
    <updated>2019-07-25T19:05:07.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-q-783-minimum-distance-between-bst-nodes"><a class="markdownIt-Anchor" href="#leetcode-q-783-minimum-distance-between-bst-nodes"></a> LeetCode Q 783 - Minimum Distance Between BST Nodes</h1><p>Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.</p><p><strong>Example :</strong> <code>Input: root = [4,2,6,1,3,null,null] ; Output: 1</code><br>Explanation: while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.</p><p><strong>Note:</strong></p><ul><li>The size of the BST will be between 2 and 100.</li><li>The BST is always valid, each node’s value is an integer, and each node’s value is different.</li></ul><a id="more"></a><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution:</h2><p><strong>Code: DFS</strong></p><figure class="highlight aspectj"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Integer res = Integer.MAX_VALUE, prev = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">minDiffInBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">  dfs(root);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  dfs(root.left);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (prev != <span class="keyword">null</span>) res = Math.max(res, root.val - prev);</span><br><span class="line"></span><br><span class="line">  prev = root.val;</span><br><span class="line"></span><br><span class="line">  dfs(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Code: Recursion</strong></p><figure class="highlight reasonml"><figcaption><span>lang: java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Integer res = Integer.MAX_VALUE, prev = null;</span><br><span class="line">public <span class="built_in">int</span> min<span class="constructor">DiffInBST(TreeNode <span class="params">root</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (root.left != null) min<span class="constructor">DiffInBST(<span class="params">root</span>.<span class="params">left</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (prev != null) res = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>abs(res, root.<span class="keyword">val</span> - prev);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root.right != null) min<span class="constructor">DiffInBST(<span class="params">root</span>.<span class="params">right</span>)</span>;</span><br><span class="line">  </span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-q-783-minimum-distance-between-bst-nodes&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#leetcode-q-783-minimum-distance-between-bst-nodes&quot;&gt;&lt;/a&gt; LeetCode Q 783 - Minimum Distance Between BST Nodes&lt;/h1&gt;
&lt;p&gt;Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt; &lt;code&gt;Input: root = [4,2,6,1,3,null,null] ; Output: 1&lt;/code&gt;&lt;br&gt;
Explanation: while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The size of the BST will be between 2 and 100.&lt;/li&gt;
&lt;li&gt;The BST is always valid, each node’s value is an integer, and each node’s value is different.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="BST" scheme="http://yoursite.com/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Master-Slave Replication</title>
    <link href="http://yoursite.com/2019/07/24/db-master-slave-replication/"/>
    <id>http://yoursite.com/2019/07/24/db-master-slave-replication/</id>
    <published>2019-07-24T14:33:05.000Z</published>
    <updated>2019-07-24T18:24:44.628Z</updated>
    
    <content type="html"><![CDATA[<p>In this post, we will introduce how to setting up matser-slave replication in MySQL. First why we want to use MySQL master-slave replication is in our application, the times users read data is much more than the times they edit data. To make our database more effiecient, we want to use master-slave replication, seperating read and write operations.</p><a id="more"></a><h2 id="font-colordodgerbluewhat-is-master-slave-replicationfont"><a class="markdownIt-Anchor" href="#font-colordodgerbluewhat-is-master-slave-replicationfont"></a> <font color="dodgerblue">What is master-slave replication?</font></h2><p>MySQL replication is a process that enables data from one MySQL database server(the master) to be copied automatically to one or more MySQL database servers(the slaves). It is a <strong>one-way replication(from master to slave)</strong>, only the master database is used for the write operations, while read operations are spread on multiple slave databases.</p><h2 id="font-colordodgerblueits-advantagesfont"><a class="markdownIt-Anchor" href="#font-colordodgerblueits-advantagesfont"></a> <font color="dodgerblue">Its advantages</font></h2><ul><li>Analytic applications can read from the slave(s) without impacting the master</li><li>Backups of the entire database of relatively no impact on the master</li><li>Slaves can be taken offline and sync back to the master without any downtime</li></ul><h2 id="font-colordodgerblueprinciplefont"><a class="markdownIt-Anchor" href="#font-colordodgerblueprinciplefont"></a> <font color="dodgerblue">Principle</font></h2><img src="mysql-replication-principle.png" width="60%" height="60%"><p>The above image explains the principle of master-slave replication.</p><ul><li><strong>Step 1:</strong> The data changes in master database server firstly are written in <strong>mysql’s binary log</strong>.</li><li><strong>Step 2:</strong> The <strong>master’s binary log</strong> is read by the <strong>slave’s IO thread</strong> and then written to <strong>slave’s relay log</strong>.</li><li><strong>Step 3:</strong> <strong>Slave’s SQL thread</strong> reads the <strong>relay log</strong> and write it to <strong>slave database server</strong>.</li></ul><h2 id="font-colordodgerbluesetting-up-stepsfont"><a class="markdownIt-Anchor" href="#font-colordodgerbluesetting-up-stepsfont"></a> <font color="dodgerblue">Setting up steps</font></h2><p>Next, we will explain how to realize MySql master-slave replication on both database and code levels.</p><h3 id="font-colormediumslateblue1-modify-database-configurationsfont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue1-modify-database-configurationsfont"></a> <font color="MEDIUMSLATEBLUE">1. Modify Database configurations</font></h3><p><font color="MEDIUMSEAGREEN"><strong>Step 1: Create master and slave database servers</strong></font></p><p>The version of master database must be lower or equal than that of ther slave database. So we use <em>MySQL 5.7</em> as the <em>master</em> database and <em>MySQL 8.0</em> as the <em>slave</em> database.</p><p><font color="MEDIUMSEAGREEN"><strong>Step 2: Configurate master and slave database servers</strong></font></p><p>We need to configurate <font color="orange"><strong>1) Binary log, 2) Relay log, and 3) assign the master server to the slave server</strong>.</font></p><ul><li><strong>Configurate binary log</strong>: in <code>C:\ProgramData\MySQL\MySQL Server 5.7\my.ini</code>, do modification like this.</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span>=<span class="number">3308</span></span><br><span class="line"><span class="comment"># Server Id.</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1</span></span><br><span class="line"><span class="comment"># Binary Logging.</span></span><br><span class="line"><span class="attr">log-bin</span>=master-bin</span><br><span class="line"><span class="attr">log-bin-index</span>=master-bin.index</span><br></pre></td></tr></table></figure><ul><li><strong>Configurate Relay log</strong>: in <code>C:\ProgramData\MySQL\MySQL Server 8.0\my.ini</code>, do modification like this.</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># Server Id.</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">relay-log-index</span>=slave-relay-bin.index</span><br><span class="line"><span class="attr">relay-log</span>=slave-relay-bin</span><br></pre></td></tr></table></figure><p>After modifying <code>my.ini</code> files, we need to restart the servers. We can use command shell command <code>net stop server_name; net start server_name</code>.</p><ul><li><strong>Assign master server to slave server</strong>.</li></ul><p>Go to the <strong>master server</strong>, check its status.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">MASTER</span> <span class="keyword">STATUS</span>;</span><br></pre></td></tr></table></figure><img src="masterstatus.png" width="80%" height="80%"><p>Then create replication.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">user</span> repl;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'repl'</span>@<span class="string">'127.0.0.1'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mysql'</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><p>Go to the <strong>slave server</strong>. And type in the following command.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> master_host=<span class="string">'127.0.0.1'</span>,master_port=<span class="number">3308</span>,master_user=<span class="string">'repl'</span>,master_password=<span class="string">'mysql'</span>,master_log_file=<span class="string">'master-bin.000001'</span>,master_log_pos=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">slave</span>;</span><br></pre></td></tr></table></figure><p>We can now check the slave status.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SLAVE</span> <span class="keyword">STATUS</span> \G;</span><br></pre></td></tr></table></figure><img src="slavestatus.png" width="80%" height="80%"><p>By now, we have completed the configuration of master-slave replication.</p><p><font color="MEDIUMSEAGREEN"><strong>Step 3: Assigning CRUD privileges to master and slave servers</strong></font></p><p>In <strong>master server</strong>, we create a new user <code>work</code>, and grant it <strong>CRUD</strong> privileges.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">select</span>, <span class="keyword">insert</span>, <span class="keyword">update</span>, <span class="keyword">delete</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'work'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'230230'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure><p>For <strong>slave server</strong>, we do the following.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">user</span>  <span class="string">'work'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'230230'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'work'</span>@<span class="string">'%'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br></pre></td></tr></table></figure><h3 id="font-colormediumslateblue2-configuration-master-salve-replication-in-our-appfont"><a class="markdownIt-Anchor" href="#font-colormediumslateblue2-configuration-master-salve-replication-in-our-appfont"></a> <font color="MEDIUMSLATEBLUE">2. Configuration master-salve replication in our app</font></h3><ul><li><ol><li>Create <code>DynamicDataSource</code> class that extends <code>AbstractRoutingDataSource</code> and override <code>determinCurrentLookupKey()</code> method.</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DynamicDataSourceHolder.getDbType();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>Create a class <code>DynamicDataSourceHolder</code> used to store info of variables like <code>DB_MATER, DB_SLAVE</code>.</li></ol></li></ul><summary> CLICK TO SEE MORE<details> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(DynamicDataSourceHolder.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Ensure thread safe</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_MASTER = <span class="string">"master"</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_SLAVE = <span class="string">"slave"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDbType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String db = contextHolder.get();</span><br><span class="line">    <span class="keyword">if</span> (db == <span class="keyword">null</span>) db = DB_MASTER;</span><br><span class="line">    <span class="keyword">return</span> db;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Set db type</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">setDbType</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">    logger.debug(<span class="string">"Using Data Source:"</span> + str);</span><br><span class="line">    contextHolder.set(str);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Clear connections</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDbType</span><span class="params">()</span></span>&#123;</span><br><span class="line">    contextHolder.remove();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details></summary><ul><li><ol start="3"><li>Create a class <code>DynamicDataSourceInterceptor</code> which implements <code>Mybatis Interceptor</code>. Override <code>Interceptor</code> method which assigns different operations to master server or slave servers. Override <code>plugin</code> method, which tells the created interceptor only intercept <code>Executor</code> (i.e. CRUD SQL info).</li></ol></li></ul><summary> CLICK TO SEE MORE<details> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(type = Executor.class, method = <span class="string">"update"</span>, args = &#123;MappedStatement.class, Object.class&#125;),</span><br><span class="line">        <span class="meta">@Signature</span>(type = Executor.class, method = <span class="string">"query"</span>, args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(DynamicDataSourceInterceptor.class);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">".*insert\\u0020.*|.*delete\\u0020.*|.*update\\u0020.*"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">//true if the method is transactional</span></span><br><span class="line">    <span class="keyword">boolean</span> synchronizationActive = TransactionSynchronizationManager.isActualTransactionActive();</span><br><span class="line">    Object[] objects = invocation.getArgs();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// the first arguments are insert, select ,delete,...</span></span><br><span class="line">    MappedStatement ms = (MappedStatement) objects[<span class="number">0</span>];</span><br><span class="line">    String lookupKey = DynamicDataSourceHolder.DB_MASTER;</span><br><span class="line">    <span class="keyword">if</span> (!synchronizationActive) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ms.getSqlCommandType().equals(SqlCommandType.SELECT)) &#123;</span><br><span class="line">        <span class="comment">// if use generated primary key, should use master server. </span></span><br><span class="line">        <span class="comment">// Cos next operation will use this primary key to update other info</span></span><br><span class="line">        <span class="keyword">if</span> (ms.getId().contains((SelectKeyGenerator.SELECT_KEY_SUFFIX))) &#123;</span><br><span class="line">          lookupKey = DynamicDataSourceHolder.DB_MASTER;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          BoundSql boundSql = ms.getSqlSource().getBoundSql(objects[<span class="number">1</span>]);</span><br><span class="line">          <span class="comment">// sql statement compressed and for the convenience of Regular Express Matching.</span></span><br><span class="line">          String sql = boundSql.getSql().toLowerCase(Locale.CANADA)</span><br><span class="line">                               .replace(<span class="string">"[\\t\\n\\r]"</span>, <span class="string">" "</span>);</span><br><span class="line">          <span class="keyword">if</span> (sql.matches(REGEX)) &#123;</span><br><span class="line">            lookupKey = DynamicDataSourceHolder.DB_MASTER;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lookupKey = DynamicDataSourceHolder.DB_SLAVE;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      lookupKey = DynamicDataSourceHolder.DB_MASTER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.debug(<span class="string">"Setting Method[&#123;&#125;] use[&#123;&#125;] Stratege, SqlCommandType [&#123;&#125;].."</span>, ms.getId(), lookupKey, ms.getSqlCommandType().name());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set up the MySQL Server  type</span></span><br><span class="line">    DynamicDataSourceHolder.setDbType(lookupKey);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// continue to process the sql statement</span></span><br><span class="line">    <span class="keyword">return</span> invocation.proceed();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Return object or its proxy after intercepting.</span></span><br><span class="line"><span class="comment">   * Only intercept Executor object(CRUD SQL info);</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Executor) <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details></summary><ul><li><ol start="4"><li>In <code>mybatis.xml</code>, configurate the created <code>DynamicDataSourceInterceptor</code> as a plugin.</li></ol></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.example.o2o.dao.split.DynamicDataSourceInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li>Edit jdbc properties including different urls for master and slave servers.</li></ol></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.slave.url</span>=<span class="string">jdbc:mysql://localhost:3306/o2odb?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.master.url</span>=<span class="string">jdbc:mysql://localhost:3308/o2odb?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">sysTJbQiw8g= #(work)</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">yxhZD/edEzCAyXoBoTkTRQ==</span></span><br></pre></td></tr></table></figure><ul><li><ol start="6"><li>Edit <code>dataSource</code> bean in <code>spring-dao.xml</code>.</li></ol><ul><li>Let <code>C3P0 data source</code> bean become an <code>abstractDataSource</code>, so both the master and slave servers can extend it.</li><li>Create <code>master</code> and <code>slave bean</code> which extends <code>abstractDataSource</code>, configurate their <code>url</code>, <code>driverClass</code>, <code>username</code>, and <code>password</code>.</li><li>Create <code>dynamicDataSource</code> bean, using the class <code>DynamicDataSource</code> we created. And inject <code>master</code> and <code>slave</code> bean in <code>Map&lt;Object, Object&gt; targetDataSources</code> of this bean.</li><li>Configurate proxy <code>LazyConnectionDataSourceProxy</code>. Inject created <code>dynamicDataSource</code> in it to let the connection of master or slave server is created at runtime according to the SQL statment.</li></ul></li></ul><summary> CLICK TO SEE MORE<details> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"abstractDataSource"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">abstract</span> = <span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Master /Slave DataSource--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"master"</span> <span class="attr">parent</span>=<span class="string">"abstractDataSource"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--connection pool attrs--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.master.url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"slave"</span> <span class="attr">parent</span>=<span class="string">"abstractDataSource"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--connection pool attrs--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.slave.url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Configure Dynarmic Data Routing Data Source --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"dynamicDataSource"</span> <span class="attr">class</span>= <span class="string">"com.example.o2o.dao.split.DynamicDataSource"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Map&lt;Object, Object&gt; targetDataSources; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetDataSources"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">"master"</span> <span class="attr">key</span>=<span class="string">"master"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">"slave"</span> <span class="attr">key</span>=<span class="string">"slave"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Evaluate DataSource when it is needed at runtime, lazy connection/evaluation--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"dataSource"</span> <span class="attr">class</span> =<span class="string">"org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"dynamicDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></details></summary><p>Now, we have completed the whole setting up procedure of master-slave replication. It’s a little complicated. But following the above steps I think we can ultimately fix it. Hope this post would be helpful.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this post, we will introduce how to setting up matser-slave replication in MySQL. First why we want to use MySQL master-slave replication is in our application, the times users read data is much more than the times they edit data. To make our database more effiecient, we want to use master-slave replication, seperating read and write operations.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
</feed>
