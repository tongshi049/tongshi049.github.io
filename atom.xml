<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tong Shi&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-10T16:40:54.246Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tong Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ugly Number II</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ264/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ264/</id>
    <published>2019-04-10T16:23:40.000Z</published>
    <updated>2019-04-10T16:40:54.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-263-Ugly-Number-II"><a href="#LeetCode-Q-263-Ugly-Number-II" class="headerlink" title="LeetCode Q 263 - Ugly Number II"></a>LeetCode Q 263 - Ugly Number II</h1><p>Write a program to find the n-th ugly number.</p><p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code: Method 1</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">List&lt;Integer&gt; uglys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">uglys.add(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// p2, p3 &amp; p5 share the same queue: uglys</span></span><br><span class="line"><span class="keyword">int</span> p2 = <span class="number">0</span>, p3 = <span class="number">0</span>, p5 = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> lastNumber = uglys.get(i - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (uglys.get(p2) * <span class="number">2</span> &lt;= lastNumber) p2++;</span><br><span class="line"><span class="keyword">while</span> (uglys.get(p3) * <span class="number">3</span> &lt;= lastNumber) p3++;</span><br><span class="line"><span class="keyword">while</span> (uglys.get(p5) * <span class="number">5</span> &lt;= lastNumber) p5++;</span><br><span class="line">uglys.add(Math.min(Math.min(uglys.get(p2) * <span class="number">2</span>, uglys.get(p3) * <span class="number">3</span>), uglys.get(p5) * <span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uglys.get(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Code: Set + Heap</strong><br><strong>Note:</strong> Since num * 2, num2 = num * 3, num3 = num * 5 has a potential to cause integer overflow, we need to use Long to store the number.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); </span></span><br><span class="line">    Set&lt;Long&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    PriorityQueue&lt;Long&gt; que = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">    que.offer(<span class="number">1L</span>); set.add(<span class="number">1L</span>);</span><br><span class="line">    <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        num = que.poll();</span><br><span class="line">        <span class="keyword">long</span> num1 = num * <span class="number">2</span>, num2 = num * <span class="number">3</span>, num3 = num * <span class="number">5</span>; <span class="comment">// integer overflow</span></span><br><span class="line">        <span class="keyword">if</span> (set.add(num1)) que.offer(num1);</span><br><span class="line">        <span class="keyword">if</span> (set.add(num2)) que.offer(num2);</span><br><span class="line">        <span class="keyword">if</span> (set.add(num3)) que.offer(num3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-263-Ugly-Number-II&quot;&gt;&lt;a href=&quot;#LeetCode-Q-263-Ugly-Number-II&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 263 - Ugly Number II&quot;&gt;&lt;/a&gt;LeetCode Q 263 - Ugly Number II&lt;/h1&gt;&lt;p&gt;Write a program to find the n-th ugly number.&lt;/p&gt;
&lt;p&gt;Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Heap" scheme="http://yoursite.com/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>Ugly Number</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ263/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ263/</id>
    <published>2019-04-10T16:23:14.000Z</published>
    <updated>2019-04-10T16:28:38.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-263-Ugly-Number"><a href="#LeetCode-Q-263-Ugly-Number" class="headerlink" title="LeetCode Q 263 - Ugly Number"></a>LeetCode Q 263 - Ugly Number</h1><p>Write a program to check whether a given number is an ugly number.</p><p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code: Recursive approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span> || n == <span class="number">3</span> || n == <span class="number">5</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> isUgly(n / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">0</span>) <span class="keyword">return</span> isUgly(n / <span class="number">3</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">5</span> == <span class="number">0</span>) <span class="keyword">return</span> isUgly(n / <span class="number">5</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Code: Iterative approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (n &gt;= <span class="number">2</span> &amp;&amp; n % <span class="number">2</span> == <span class="number">0</span>) n /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (n &gt;= <span class="number">3</span> &amp;&amp; n % <span class="number">3</span> == <span class="number">0</span>) n /= <span class="number">3</span>; </span><br><span class="line"><span class="keyword">while</span> (n &gt;= <span class="number">5</span> &amp;&amp; n % <span class="number">5</span> == <span class="number">0</span>) n /= <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-263-Ugly-Number&quot;&gt;&lt;a href=&quot;#LeetCode-Q-263-Ugly-Number&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 263 - Ugly Number&quot;&gt;&lt;/a&gt;LeetCode Q 263 - Ugly Number&lt;/h1&gt;&lt;p&gt;Write a program to check whether a given number is an ugly number.&lt;/p&gt;
&lt;p&gt;Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Missing Number</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ268/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ268/</id>
    <published>2019-04-10T16:18:25.000Z</published>
    <updated>2019-04-10T16:22:57.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-268-Missing-Number"><a href="#LeetCode-Q-268-Missing-Number" class="headerlink" title="LeetCode Q 268 - Missing Number"></a>LeetCode Q 268 - Missing Number</h1><p>Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code: Recursive approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num: nums) sum += num;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">1</span> + nums.length) * num.length / <span class="number">2</span> - sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-268-Missing-Number&quot;&gt;&lt;a href=&quot;#LeetCode-Q-268-Missing-Number&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 268 - Missing Number&quot;&gt;&lt;/a&gt;LeetCode Q 268 - Missing Number&lt;/h1&gt;&lt;p&gt;Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Add Digits</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ258/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ258/</id>
    <published>2019-04-10T16:14:32.000Z</published>
    <updated>2019-04-10T16:17:48.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-258-Add-Digits"><a href="#LeetCode-Q-258-Add-Digits" class="headerlink" title="LeetCode Q 258 - Add Digits"></a>LeetCode Q 258 - Add Digits</h1><p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code: Recursive approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (num / <span class="number">10</span> == <span class="number">0</span>) <span class="keyword">return</span> num;</span><br><span class="line"><span class="keyword">int</span> newNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">newNum += num % <span class="number">10</span>;</span><br><span class="line">num /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> addDigits(newNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Code: Iterative approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (num &gt;= <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> newNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">newNum += num % <span class="number">10</span>;</span><br><span class="line">num /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num = newNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-258-Add-Digits&quot;&gt;&lt;a href=&quot;#LeetCode-Q-258-Add-Digits&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 258 - Add Digits&quot;&gt;&lt;/a&gt;LeetCode Q 258 - Add Digits&lt;/h1&gt;&lt;p&gt;Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Power of Two</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ231/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ231/</id>
    <published>2019-04-10T16:07:32.000Z</published>
    <updated>2019-04-10T16:14:12.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-231-Power-of-Two"><a href="#LeetCode-Q-231-Power-of-Two" class="headerlink" title="LeetCode Q 231 - Power of Two"></a>LeetCode Q 231 - Power of Two</h1><p>Given an integer, write a function to determine if it is a power of two.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code: Recursive approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">0</span> || n % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> isPowerOfTwo(n / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Code: Iterative approach</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span> (n % <span class="number">2</span> == <span class="number">0</span>) n /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-231-Power-of-Two&quot;&gt;&lt;a href=&quot;#LeetCode-Q-231-Power-of-Two&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 231 - Power of Two&quot;&gt;&lt;/a&gt;LeetCode Q 231 - Power of Two&lt;/h1&gt;&lt;p&gt;Given an integer, write a function to determine if it is a power of two.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Basic Calculator II</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ227/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ227/</id>
    <published>2019-04-10T15:58:59.000Z</published>
    <updated>2019-04-10T16:06:31.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-227-Basic-Calculator-II"><a href="#LeetCode-Q-227-Basic-Calculator-II" class="headerlink" title="LeetCode Q 227 - Basic Calculator II"></a>LeetCode Q 227 - Basic Calculator II</h1><p>Implement a basic calculator to evaluate a simple expression string.</p><p>The expression string contains only non-negative integers, +, -, *, / operators and empty spaces. The integer division should truncate toward zero.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>We use a stack to store numbers during calculation.</p><ul><li>When we meet a <strong>‘+’</strong> or <strong>‘-‘</strong>, we push <strong>num</strong> or <strong>-num</strong> into the stack, then update the sign and num;</li><li>When we meet a <strong>‘*‘</strong> or <strong>‘/‘</strong>, we <strong>multiply</strong> or <strong>divide the popped number from stacknum by num</strong>, then push the result into the stack, then update the sign and num.</li></ul><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.trim().length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>; <span class="keyword">char</span> sign = <span class="string">'+'</span>;</span><br><span class="line">    </span><br><span class="line">    s = s.trim();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">' '</span>) <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(s.charAt(i))) </span><br><span class="line">           num = <span class="number">10</span> * num + s.charAt(i) - <span class="string">'0'</span>; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( !Character.isDigit(s.charAt(i)) || i == s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sign == <span class="string">'+'</span>) stack.push(num);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">'-'</span>) stack.push(-num);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">'*'</span>) stack.push(stack.pop() * num);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">'/'</span>) stack.push(stack.pop() / num);</span><br><span class="line">            sign = s.charAt(i);</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : stack) res += i;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-227-Basic-Calculator-II&quot;&gt;&lt;a href=&quot;#LeetCode-Q-227-Basic-Calculator-II&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 227 - Basic Calculator II&quot;&gt;&lt;/a&gt;LeetCode Q 227 - Basic Calculator II&lt;/h1&gt;&lt;p&gt;Implement a basic calculator to evaluate a simple expression string.&lt;/p&gt;
&lt;p&gt;The expression string contains only non-negative integers, +, -, *, / operators and empty spaces. The integer division should truncate toward zero.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Basic Calculator</title>
    <link href="http://yoursite.com/2019/04/10/leetcodeQ224/"/>
    <id>http://yoursite.com/2019/04/10/leetcodeQ224/</id>
    <published>2019-04-10T15:51:50.000Z</published>
    <updated>2019-04-10T16:06:49.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-224-Basic-Calculator"><a href="#LeetCode-Q-224-Basic-Calculator" class="headerlink" title="LeetCode Q 224 - Basic Calculator"></a>LeetCode Q 224 - Basic Calculator</h1><p>Implement a basic calculator to evaluate a simple expression string.</p><p>The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The <strong>key point</strong> is how we deal with <strong>“( )”</strong>. </p><ul><li>Whenever we encounter a ‘(‘, we push the current number and sign into stack.</li><li>Whenever we encounter a ‘)’, we pop the sign and number in the stack and do the calculation.</li></ul><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, sign = <span class="number">1</span>, temp = <span class="number">0</span>;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">' '</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(s.charAt(i))) &#123;</span><br><span class="line">            temp = temp * <span class="number">10</span> + (s.charAt(i) - <span class="string">'0'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'+'</span>) &#123;</span><br><span class="line">            res += sign * temp; sign = <span class="number">1</span>; temp = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'-'</span>) &#123;</span><br><span class="line">            res += sign * temp; sign = -<span class="number">1</span>; temp = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">            stack.push(res); stack.push(sign);</span><br><span class="line">            res = <span class="number">0</span>; sign = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">')'</span>) &#123;</span><br><span class="line">            res += sign * temp; temp = <span class="number">0</span>;</span><br><span class="line">            res *= stack.pop(); res += stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (temp != <span class="number">0</span>)</span><br><span class="line">        res += sign * temp;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-224-Basic-Calculator&quot;&gt;&lt;a href=&quot;#LeetCode-Q-224-Basic-Calculator&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 224 - Basic Calculator&quot;&gt;&lt;/a&gt;LeetCode Q 224 - Basic Calculator&lt;/h1&gt;&lt;p&gt;Implement a basic calculator to evaluate a simple expression string.&lt;/p&gt;
&lt;p&gt;The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Excel Sheet Column Number</title>
    <link href="http://yoursite.com/2019/04/09/leetcode171/"/>
    <id>http://yoursite.com/2019/04/09/leetcode171/</id>
    <published>2019-04-09T16:03:26.000Z</published>
    <updated>2019-04-09T17:11:26.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-171-Excel-Sheet-Column-Number"><a href="#LeetCode-Q-171-Excel-Sheet-Column-Number" class="headerlink" title="LeetCode Q 171 - Excel Sheet Column Number"></a>LeetCode Q 171 - Excel Sheet Column Number</h1><p>Given a column title as appear in an Excel sheet, return its corresponding column number.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Algorithm</strong><br>Bases Convert</p><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">res = res * <span class="number">26</span> + (s.charAt(i) - <span class="string">'A'</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-171-Excel-Sheet-Column-Number&quot;&gt;&lt;a href=&quot;#LeetCode-Q-171-Excel-Sheet-Column-Number&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 171 - Excel Sheet Column Number&quot;&gt;&lt;/a&gt;LeetCode Q 171 - Excel Sheet Column Number&lt;/h1&gt;&lt;p&gt;Given a column title as appear in an Excel sheet, return its corresponding column number.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Excel Sheet Column Title</title>
    <link href="http://yoursite.com/2019/04/09/leetcode168/"/>
    <id>http://yoursite.com/2019/04/09/leetcode168/</id>
    <published>2019-04-09T16:00:22.000Z</published>
    <updated>2019-04-09T17:11:54.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-168-Excel-Sheet-Column-Title"><a href="#LeetCode-Q-168-Excel-Sheet-Column-Title" class="headerlink" title="LeetCode Q 168 - Excel Sheet Column Title"></a>LeetCode Q 168 - Excel Sheet Column Title</h1><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Algorithm</strong><br>Bases Convert</p><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">n--;</span><br><span class="line">sb.append((<span class="keyword">char</span>)(n % <span class="number">26</span> + <span class="string">'A'</span>));</span><br><span class="line">n /= <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-168-Excel-Sheet-Column-Title&quot;&gt;&lt;a href=&quot;#LeetCode-Q-168-Excel-Sheet-Column-Title&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 168 - Excel Sheet Column Title&quot;&gt;&lt;/a&gt;LeetCode Q 168 - Excel Sheet Column Title&lt;/h1&gt;&lt;p&gt;Given a positive integer, return its corresponding column title as appear in an Excel sheet.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Factorial Trailing Zeroes</title>
    <link href="http://yoursite.com/2019/04/09/leetcode172/"/>
    <id>http://yoursite.com/2019/04/09/leetcode172/</id>
    <published>2019-04-09T15:44:55.000Z</published>
    <updated>2019-04-09T17:12:00.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-172-Factorial-Trailing-Zeroes"><a href="#LeetCode-Q-172-Factorial-Trailing-Zeroes" class="headerlink" title="LeetCode Q 172 - Factorial Trailing Zeroes"></a>LeetCode Q 172 - Factorial Trailing Zeroes</h1><p>Given an integer n, return the number of trailing zeroes in n!.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Algorithm</strong><br>The number of tailing zeroes is related to the number of divisors 2 and 5. And 2 is smaller than 5, so this number is determined by the number of divisor 5.<br>Therefore, we calculate the number in 1 ~ n, which is multiplication of 5, 25, 125, 625,…</p><p><strong>Code: Method 1 (Not Correct)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt;= n) &#123;</span><br><span class="line">res += n / num;</span><br><span class="line">num *= <span class="number">5</span>;  <span class="comment">// this will cause integer overflow </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>Code: Method 2</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">res += n / <span class="number">5</span>;</span><br><span class="line">n /= <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-172-Factorial-Trailing-Zeroes&quot;&gt;&lt;a href=&quot;#LeetCode-Q-172-Factorial-Trailing-Zeroes&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 172 - Factorial Trailing Zeroes&quot;&gt;&lt;/a&gt;LeetCode Q 172 - Factorial Trailing Zeroes&lt;/h1&gt;&lt;p&gt;Given an integer n, return the number of trailing zeroes in n!.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Happy Number</title>
    <link href="http://yoursite.com/2019/04/09/leetcode202/"/>
    <id>http://yoursite.com/2019/04/09/leetcode202/</id>
    <published>2019-04-09T15:40:59.000Z</published>
    <updated>2019-04-09T17:12:05.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-202-Happy-Number"><a href="#LeetCode-Q-202-Happy-Number" class="headerlink" title="LeetCode Q 202 - Happy Number"></a>LeetCode Q 202 - Happy Number</h1><p>Write an algorithm to determine if a number is “happy”<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!set.add(n))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">n = getNextNumber(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getNextNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">res += (n % <span class="number">10</span>) ^ (n % <span class="number">10</span>);</span><br><span class="line">n /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-202-Happy-Number&quot;&gt;&lt;a href=&quot;#LeetCode-Q-202-Happy-Number&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 202 - Happy Number&quot;&gt;&lt;/a&gt;LeetCode Q 202 - Happy Number&lt;/h1&gt;&lt;p&gt;Write an algorithm to determine if a number is “happy”&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Count Primes</title>
    <link href="http://yoursite.com/2019/04/09/leetcode204/"/>
    <id>http://yoursite.com/2019/04/09/leetcode204/</id>
    <published>2019-04-09T15:38:37.000Z</published>
    <updated>2019-04-09T17:12:13.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-204-Count-Primes"><a href="#LeetCode-Q-204-Count-Primes" class="headerlink" title="LeetCode Q 204 - Count Primes"></a>LeetCode Q 204 - Count Primes</h1><p>Count the number of prime numbers less than a non-negative number, n.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span>[] notPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notPrime[i]) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">2</span>; num * i &lt; n; num++) </span><br><span class="line">                notPrime[num * i] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-204-Count-Primes&quot;&gt;&lt;a href=&quot;#LeetCode-Q-204-Count-Primes&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 204 - Count Primes&quot;&gt;&lt;/a&gt;LeetCode Q 204 - Count Primes&lt;/h1&gt;&lt;p&gt;Count the number of prime numbers less than a non-negative number, n.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Rectangle Overlap</title>
    <link href="http://yoursite.com/2019/04/09/leetcodeQ836/"/>
    <id>http://yoursite.com/2019/04/09/leetcodeQ836/</id>
    <published>2019-04-09T15:29:24.000Z</published>
    <updated>2019-04-09T17:14:03.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-836-Rectangle-Overlap"><a href="#LeetCode-Q-836-Rectangle-Overlap" class="headerlink" title="LeetCode Q 836 - Rectangle Overlap"></a>LeetCode Q 836 - Rectangle Overlap</h1><p>A rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) are the coordinates of its bottom-left corner, and (x2, y2) are the coordinates of its top-right corner.<br>Given two (axis-aligned) rectangles, return whether they overlap.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRectangleOverlap</span><span class="params">(<span class="keyword">int</span>[] rec1, <span class="keyword">int</span>[] rec2)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (Math.max(rec1[<span class="number">0</span>], rec2[<span class="number">0</span>]) &lt; Math.min(rec1[<span class="number">2</span>], rec2[<span class="number">2</span>]) </span><br><span class="line">       &amp;&amp; Math.max(rec1[<span class="number">1</span>], rec2[<span class="number">1</span>]) &lt; Math.min(rec1[<span class="number">3</span>], rec2[<span class="number">3</span>]))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="LeetCode-Q-223-Rectangle-Area"><a href="#LeetCode-Q-223-Rectangle-Area" class="headerlink" title="LeetCode Q 223 - Rectangle Area"></a>LeetCode Q 223 - Rectangle Area</h1><p>Find the total area covered by two rectilinear rectangles in a 2D plane.<br>Each rectangle is defined by its bottom left corner and top right corner as shown in the figure.</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">computeArea</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C, <span class="keyword">int</span> D, <span class="keyword">int</span> E, <span class="keyword">int</span> F, <span class="keyword">int</span> G, <span class="keyword">int</span> H)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = (C - A) * (D - B) + (G - E) * (H - F);</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> left = Math.max(A, E);</span><br><span class="line">    <span class="keyword">int</span> right = Math.min(C, G);</span><br><span class="line">    <span class="keyword">int</span> top = Math.min(D, H);</span><br><span class="line">    <span class="keyword">int</span> bottom = Math.max(B, F);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> overlap = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right &amp;&amp; bottom &lt; top)</span><br><span class="line">        overlap = (right - left) * (top - bottom);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res - overlap;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-836-Rectangle-Overlap&quot;&gt;&lt;a href=&quot;#LeetCode-Q-836-Rectangle-Overlap&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 836 - Rectangle Overlap&quot;&gt;&lt;/a&gt;LeetCode Q 836 - Rectangle Overlap&lt;/h1&gt;&lt;p&gt;A rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) are the coordinates of its bottom-left corner, and (x2, y2) are the coordinates of its top-right corner.&lt;br&gt;Given two (axis-aligned) rectangles, return whether they overlap.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Multiply Strings</title>
    <link href="http://yoursite.com/2019/04/08/leetcodeQ43/"/>
    <id>http://yoursite.com/2019/04/08/leetcodeQ43/</id>
    <published>2019-04-08T17:11:35.000Z</published>
    <updated>2019-04-09T17:13:31.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-43-Multiply-Strings"><a href="#LeetCode-Q-43-Multiply-Strings" class="headerlink" title="LeetCode Q 43 - Multiply Strings"></a>LeetCode Q 43 - Multiply Strings</h1><p>Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><img src="/2019/04/08/leetcodeQ43/solution.jpg" title="Algorithm"><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">multiply</span><span class="params">(String num1, String num2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (num1.equals(<span class="string">"0"</span>) || num2.equals(<span class="string">"0"</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line"><span class="keyword">int</span> len1 = num1.length(), len2 = num2.length();</span><br><span class="line"><span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[len1 + len2 - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len2; j++) &#123;</span><br><span class="line">num[i + j] += (num1.charAt(i) - <span class="string">'0'</span>) * (num2.charAt(j) - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = num.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">int</span> origin = num[i] + carry;</span><br><span class="line">carry = origin / <span class="number">10</span>;</span><br><span class="line">num[i] = origin % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">if</span> (carry != <span class="number">0</span>)</span><br><span class="line">sb.append((<span class="keyword">char</span>) (carry + <span class="string">'0'</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">sb.append((<span class="keyword">char</span>) (arr[i] + <span class="string">'0'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-43-Multiply-Strings&quot;&gt;&lt;a href=&quot;#LeetCode-Q-43-Multiply-Strings&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 43 - Multiply Strings&quot;&gt;&lt;/a&gt;LeetCode Q 43 - Multiply Strings&lt;/h1&gt;&lt;p&gt;Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Sqrt(x)</title>
    <link href="http://yoursite.com/2019/04/08/leetcodeQ69/"/>
    <id>http://yoursite.com/2019/04/08/leetcodeQ69/</id>
    <published>2019-04-08T17:00:44.000Z</published>
    <updated>2019-04-09T17:13:53.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-69-Sqrt-x"><a href="#LeetCode-Q-69-Sqrt-x" class="headerlink" title="LeetCode Q 69 - Sqrt(x)"></a>LeetCode Q 69 - Sqrt(x)</h1><p>Implement int sqrt(int x).<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Basic idea is to check every number from 1 to n / 2, to see<br><code>if ((i * i == x) || (i * i &lt; x) &amp;&amp; ((i+1) * (i+1) &gt; x))</code><br>We can improve the efficiency by using binary search.</p><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">1</span>, right = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (mid == x / mid) <span class="comment">//use mid * mid &gt; x has a potential to cause overflow</span></span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mid &gt; x / mid)</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (mid + <span class="number">1</span> &gt; x / (mid + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-69-Sqrt-x&quot;&gt;&lt;a href=&quot;#LeetCode-Q-69-Sqrt-x&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 69 - Sqrt(x)&quot;&gt;&lt;/a&gt;LeetCode Q 69 - Sqrt(x)&lt;/h1&gt;&lt;p&gt;Implement int sqrt(int x).&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Pow(x, n)</title>
    <link href="http://yoursite.com/2019/04/08/leetcodeQ50/"/>
    <id>http://yoursite.com/2019/04/08/leetcodeQ50/</id>
    <published>2019-04-08T16:39:42.000Z</published>
    <updated>2019-04-09T17:13:34.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-50-Pow-x-n"><a href="#LeetCode-Q-50-Pow-x-n" class="headerlink" title="LeetCode Q 50 - Pow(x, n)"></a>LeetCode Q 50 - Pow(x, n)</h1><p>Implement pow(x, n), which calculates x raised to the power n.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Basic idea is to utilize simple multiplication. We do x <em> x </em> x <em> x </em> … n times. This approach has a potential to cause time limit exceeds, when n is very large.<br>Instead we can utilize redouble the x, say </p><ul><li>for n = 2, we do x * x</li><li>for n = 4, we do x <em> x, then do (x </em> x) <em> (x </em> x)…<br>if n is odd, then multipy an additional tempX.<br>Next, we will solve this question recursively and iteratively<br><strong>Code: Recursive Method</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">x = <span class="number">1</span> / x;</span><br><span class="line">n = -n;</span><br><span class="line"><span class="keyword">if</span> (-n == Integer.MIN_VALUE)</span><br><span class="line"><span class="keyword">return</span> x * myPower(x, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span> ? myPow(x * x, n / <span class="number">2</span>) : myPow(x * x, n / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Code: Iterative Method</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isNegative = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">x = <span class="number">1</span> / x;</span><br><span class="line">n = -(n + <span class="number">1</span>); <span class="comment">// Avoid overflow when n == MIN_VALUE</span></span><br><span class="line">isNegative <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">1</span>, temp = x;</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) </span><br><span class="line">ans *= temp;</span><br><span class="line">temp *= temp;</span><br><span class="line">n /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-50-Pow-x-n&quot;&gt;&lt;a href=&quot;#LeetCode-Q-50-Pow-x-n&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 50 - Pow(x, n)&quot;&gt;&lt;/a&gt;LeetCode Q 50 - Pow(x, n)&lt;/h1&gt;&lt;p&gt;Implement pow(x, n), which calculates x raised to the power n.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Multiplication" scheme="http://yoursite.com/tags/Multiplication/"/>
    
  </entry>
  
  <entry>
    <title>Divide Two Integers</title>
    <link href="http://yoursite.com/2019/04/08/leetcodeQ29/"/>
    <id>http://yoursite.com/2019/04/08/leetcodeQ29/</id>
    <published>2019-04-08T16:13:23.000Z</published>
    <updated>2019-04-09T17:12:39.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-29-Divide-Two-Integers"><a href="#LeetCode-Q-29-Divide-Two-Integers" class="headerlink" title="LeetCode Q 29 - Divide Two Integers"></a>LeetCode Q 29 - Divide Two Integers</h1><p>Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Basic idea is to utilize subtraction, checking how many times a dividend can substract a divisor. But this approach has a potential to cause time limit exceeds, when the dividend is very large.<br>So, we increase the divisor at each substraction, say we double the divisor.<br>At the same time, we need a variable to record how many times is the current divisor of the original divisor.</p><p><strong>Note:</strong></p><ul><li>To deal with the corner case, int need to be converted to long first, then take the absolute value.</li><li>tempDivisor should not double anymore if we know it will larger than dividend.</li></ul><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (divisor == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> dividend &gt;= <span class="number">0</span> ? Integer.MAX_VALUE : Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">if</span> (dividend == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (dividend == Integer.MIN_VALUE &amp;&amp; divisor == -<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sign = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ((dividend &lt; <span class="number">0</span> &amp;&amp; divisor &lt; <span class="number">0</span>) || (dividend &lt; <span class="number">0</span> &amp;&amp; divisor &lt; <span class="number">0</span>))</span><br><span class="line">sign = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> dividendLong = Math.abs((<span class="keyword">long</span>) dividend);</span><br><span class="line"><span class="keyword">long</span> divisorLong = Math.abs((<span class="keyword">long</span>) divisor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> res = divideHelper(dividendLong, divisorLong);</span><br><span class="line"><span class="keyword">return</span> sign * (<span class="keyword">int</span>) res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">divideHelper</span><span class="params">(<span class="keyword">long</span> dividend, <span class="keyword">long</span> divisor)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dividend &lt; divisor)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">long</span> sum = divisor, multiplication = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (sum + sum &lt; divisor) &#123;</span><br><span class="line">sum += sum; multiplication += multiplication;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> multiplication + divideHelper(dividend - sum, divisor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-29-Divide-Two-Integers&quot;&gt;&lt;a href=&quot;#LeetCode-Q-29-Divide-Two-Integers&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 29 - Divide Two Integers&quot;&gt;&lt;/a&gt;LeetCode Q 29 - Divide Two Integers&lt;/h1&gt;&lt;p&gt;Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Integer Overflow" scheme="http://yoursite.com/tags/Integer-Overflow/"/>
    
      <category term="Multiplication" scheme="http://yoursite.com/tags/Multiplication/"/>
    
  </entry>
  
  <entry>
    <title>Number-Theoretic Algorithm - gcd</title>
    <link href="http://yoursite.com/2019/04/08/gcd/"/>
    <id>http://yoursite.com/2019/04/08/gcd/</id>
    <published>2019-04-08T15:42:35.000Z</published>
    <updated>2019-04-08T16:05:35.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Euclid’s-algorithm"><a href="#Euclid’s-algorithm" class="headerlink" title="Euclid’s algorithm"></a>Euclid’s algorithm</h1><h2 id="Euclid’s-algorithm-for-efficiently-computing-the-greatest-common-divisor-of-two-integers"><a href="#Euclid’s-algorithm-for-efficiently-computing-the-greatest-common-divisor-of-two-integers" class="headerlink" title="Euclid’s algorithm for efficiently computing the greatest common divisor of two integers."></a>Euclid’s algorithm for efficiently computing the greatest common divisor of two integers.</h2><p><strong>PseudoCode:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Eucilid(a, b)</span><br><span class="line"><span class="keyword">if</span> b == <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> Eucilid(b, a mod b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Euclid’s-algorithm&quot;&gt;&lt;a href=&quot;#Euclid’s-algorithm&quot; class=&quot;headerlink&quot; title=&quot;Euclid’s algorithm&quot;&gt;&lt;/a&gt;Euclid’s algorithm&lt;/h1&gt;&lt;h2 id=&quot;E
      
    
    </summary>
    
    
      <category term="Number-Theoretic Algorithm" scheme="http://yoursite.com/tags/Number-Theoretic-Algorithm/"/>
    
      <category term="gcd" scheme="http://yoursite.com/tags/gcd/"/>
    
  </entry>
  
  <entry>
    <title>Permutation Sequence</title>
    <link href="http://yoursite.com/2019/04/08/leetcodeQ60/"/>
    <id>http://yoursite.com/2019/04/08/leetcodeQ60/</id>
    <published>2019-04-08T15:26:24.000Z</published>
    <updated>2019-04-09T17:13:51.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-60-Permutation-Sequence"><a href="#LeetCode-Q-60-Permutation-Sequence" class="headerlink" title="LeetCode Q 60 - Permutation Sequence"></a>LeetCode Q 60 - Permutation Sequence</h1><p>Given n and k, return the kth permutation sequence.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Algorithm: Cantor Unfold</strong><br>The detailed description can be found in <a href="https://zh.wikipedia.org/zh-cn/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80" target="_blank" rel="noopener">wekipedia</a>.<br><em>Cantor expansion is a double shot that is fully aligned to a natural number and is often used for spatial compression when building hash tables. The essence of Cantor’s expansion is to calculate the current order in all the order from small to large, and therefore reversible.</em></p><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// use list to store the num which we have chosen</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">ist.add(i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[] fac = <span class="keyword">new</span> <span class="keyword">int</span>[n]; fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) </span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i;</span><br><span class="line">    </span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    k--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = k / fac[i - <span class="number">1</span>];</span><br><span class="line">        k = k % fac[i - <span class="number">1</span>];</span><br><span class="line">        sb.append(list.get(index));</span><br><span class="line">        list.remove(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-60-Permutation-Sequence&quot;&gt;&lt;a href=&quot;#LeetCode-Q-60-Permutation-Sequence&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 60 - Permutation Sequence&quot;&gt;&lt;/a&gt;LeetCode Q 60 - Permutation Sequence&lt;/h1&gt;&lt;p&gt;Given n and k, return the kth permutation sequence.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Cantor Unfold" scheme="http://yoursite.com/tags/Cantor-Unfold/"/>
    
  </entry>
  
  <entry>
    <title>Roman to Integer</title>
    <link href="http://yoursite.com/2019/04/07/leetcodeQ13/"/>
    <id>http://yoursite.com/2019/04/07/leetcodeQ13/</id>
    <published>2019-04-07T13:49:56.000Z</published>
    <updated>2019-04-09T17:13:21.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Q-13-Roman-to-Integer"><a href="#LeetCode-Q-13-Roman-to-Integer" class="headerlink" title="LeetCode Q 13 - Roman to Integer"></a>LeetCode Q 13 - Roman to Integer</h1><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Code:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">'I'</span>, <span class="number">1</span>);    map.put(<span class="string">'V'</span>, <span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">'X'</span>, <span class="number">10</span>);   map.put(<span class="string">'L'</span>, <span class="number">50</span>);</span><br><span class="line">    map.put(<span class="string">'C'</span>, <span class="number">100</span>);  map.put(<span class="string">'D'</span>, <span class="number">500</span>);</span><br><span class="line">    map.put(<span class="string">'M'</span>, <span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res = map.get(s.charAt(s.length() - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.get(s.charAt(i)) &gt;= map.get(s.charAt(i + <span class="number">1</span>)))</span><br><span class="line">            res += map.get(s.charAt(i));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res -= map.get(s.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode-Q-13-Roman-to-Integer&quot;&gt;&lt;a href=&quot;#LeetCode-Q-13-Roman-to-Integer&quot; class=&quot;headerlink&quot; title=&quot;LeetCode Q 13 - Roman to Integer&quot;&gt;&lt;/a&gt;LeetCode Q 13 - Roman to Integer&lt;/h1&gt;&lt;p&gt;Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
  </entry>
  
</feed>
